contract main {




// =====================  Runtime code  =====================


#
#  - unstake(uint256 arg1)
#  - stake(uint256 arg1, address arg2)
#
address owner;
address trustedTokenAddress;
uint256 allStakes;
uint256 sub_b56a072d;
uint256 bonusRewardPool;
uint256 monthlyRewardPool;
mapping of uint256 referralRewards;
mapping of uint256 stakeOf;
mapping of struct withdrawnRewardOf;
uint256 stor10;
mapping of uint256 stor11;
uint256 stor12;
mapping of address stor13;
uint256 stor15;
uint256 stor16;
uint256 stor17;
uint256 stor18;
array of address stor19;
address stor20;

function stakeOf(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return stakeOf[address(arg1)]
}

function referralRewards(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return referralRewards[arg1]
}

function bonusRewardPool() payable {
    return bonusRewardPool
}

function owner() payable {
    return owner
}

function withdrawnRewardOf(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return withdrawnRewardOf[address(arg1)].field_0
}

function sub_b56a072d(?) payable {
    return sub_b56a072d
}

function monthlyRewardPool() payable {
    return monthlyRewardPool
}

function trustedToken() payable {
    return trustedTokenAddress
}

function allStakes() payable {
    return allStakes
}

function _fallback() payable {
    revert
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    owner = 0
    emit OwnershipTransferred(owner, 0);
}

function setPartnerWallet(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor20 = arg1
}

function bonusRewardPoolCountdown() payable {
    if block.timestamp < stor18:
        revert with 'NH{q', 17
    if block.timestamp - stor18 >= stor17:
        return 0
    if stor17 < block.timestamp - stor18:
        revert with 'NH{q', 17
    return (stor17 - block.timestamp + stor18)
}

function monthlyRewardPoolCountdown() payable {
    if block.timestamp < stor12:
        revert with 'NH{q', 17
    if block.timestamp - stor12 >= 720 * 24 * 3600:
        return 0
    if 720 * 24 * 3600 < block.timestamp - stor12:
        revert with 'NH{q', 17
    return (-block.timestamp + stor12 + (720 * 24 * 3600))
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    owner = arg1
    emit OwnershipTransferred(owner, arg1);
}

function accumulativeRewardOf(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if stakeOf[address(arg1)] and stor10 > -1 / stakeOf[address(arg1)]:
        revert with 'NH{q', 17
    if stakeOf[address(arg1)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
    if stakeOf[address(arg1)] * stor10 >= 0 and stor11[address(arg1)] > (-1 * stakeOf[address(arg1)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 'NH{q', 17
    if stakeOf[address(arg1)] * stor10 < 0 and stor11[address(arg1)] < (-1 * stakeOf[address(arg1)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
        revert with 'NH{q', 17
    if (stakeOf[address(arg1)] * stor10) + stor11[address(arg1)] < 0:
        revert with 0, 'SafeCast: value must be positive'
    return (Mask(128, 128, (stakeOf[address(arg1)] * stor10) + stor11[address(arg1)]) >> 128)
}

function withdrawableRewardOf(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if stakeOf[address(arg1)] and stor10 > -1 / stakeOf[address(arg1)]:
        revert with 'NH{q', 17
    if stakeOf[address(arg1)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
    if stakeOf[address(arg1)] * stor10 >= 0 and stor11[address(arg1)] > (-1 * stakeOf[address(arg1)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 'NH{q', 17
    if stakeOf[address(arg1)] * stor10 < 0 and stor11[address(arg1)] < (-1 * stakeOf[address(arg1)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
        revert with 'NH{q', 17
    if (stakeOf[address(arg1)] * stor10) + stor11[address(arg1)] < 0:
        revert with 0, 'SafeCast: value must be positive'
    if Mask(128, 128, (stakeOf[address(arg1)] * stor10) + stor11[address(arg1)]) >> 128 < withdrawnRewardOf[address(arg1)].field_0:
        revert with 'NH{q', 17
    return ((Mask(128, 128, (stakeOf[address(arg1)] * stor10) + stor11[address(arg1)]) >> 128) - withdrawnRewardOf[address(arg1)].field_0)
}

function sub_a5b63c42(?) payable {
    require calldata.size - 4 >= 32
    require cd[4] <= test266151307()
    require cd[4] + 35 < calldata.size
    if ('cd', 4).length > test266151307():
        revert with 'NH{q', 65
    if floor32(('cd', 4).length) + 97 > test266151307() or floor32(('cd', 4).length) + 97 < 96:
        revert with 'NH{q', 65
    require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
    idx = 0
    s = cd[4] + 36
    t = 128
    while idx < ('cd', 4).length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor19.length = ('cd', 4).length
    if not ('cd', 4).length:
        idx = 0
        while stor19.length > idx:
            uint256(stor19[idx]) = 0
            idx = idx + 1
            continue 
    else:
        s = 0
        idx = 128
        while (32 * ('cd', 4).length) + 128 > idx:
            address(stor19[s]) = mem[idx + 12 len 20]
            s = s + 1
            idx = idx + 32
            continue 
        idx = Mask(251, 0, (32 * ('cd', 4).length) + 31) >> 5
        while stor19.length > idx:
            uint256(stor19[idx]) = 0
            idx = idx + 1
            continue 
}

function bonusPoolLeaderboard() payable {
    if stor16 > -2:
        revert with 'NH{q', 17
    if stor16 + 1 < stor15:
        revert with 'NH{q', 17
    if stor16 + -stor15 + 1 > test266151307():
        revert with 'NH{q', 65
    mem[96] = stor16 + -stor15 + 1
    mem[64] = (32 * stor16 + -stor15 + 1) + 128
    if not stor16 + -stor15 + 1:
        idx = stor15
        s = 0
        while idx <= stor16:
            mem[0] = idx
            mem[32] = 13
            if s >= mem[96]:
                revert with 'NH{q', 50
            mem[(32 * s) + 128] = stor13[idx]
            if s == -1:
                revert with 'NH{q', 17
            if idx == -1:
                revert with 'NH{q', 17
            idx = idx + 1
            s = s + 1
            continue 
        mem[(32 * stor16 + -stor15 + 1) + 128] = 32
        _20 = mem[96]
        mem[(32 * stor16 + -stor15 + 1) + 160] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 64
        while idx < _20:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        return memory
          from mem[64]
           len (32 * stor16 + -stor15 + 1) + (32 * _20) + -mem[64] + 192
    mem[128 len 32 * stor16 + -stor15 + 1] = call.data[calldata.size len 32 * stor16 + -stor15 + 1]
    idx = stor15
    s = 0
    while idx <= stor16:
        mem[0] = idx
        mem[32] = 13
        if s >= mem[96]:
            revert with 'NH{q', 50
        mem[(32 * s) + 128] = stor13[idx]
        if s == -1:
            revert with 'NH{q', 17
        if idx == -1:
            revert with 'NH{q', 17
        idx = idx + 1
        s = s + 1
        continue 
    mem[(32 * stor16 + -stor15 + 1) + 128] = 32
    mem[(32 * stor16 + -stor15 + 1) + 160] = mem[96]
    idx = 0
    s = 128
    t = mem[64] + 64
    while idx < mem[96]:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    return memory
      from mem[64]
       len (32 * stor16 + -stor15 + 1) + (32 * mem[96]) + -mem[64] + 192
}

function withdrawReward() payable {
    mem[64] = 96
    if stor18:
        if block.timestamp < stor12:
            revert with 'NH{q', 17
        if block.timestamp - stor12 >= 720 * 24 * 3600:
            if not monthlyRewardPool:
                if block.timestamp < stor18:
                    revert with 'NH{q', 17
                if block.timestamp - stor18 >= stor17:
                    if not bonusRewardPool:
                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                            revert with 'NH{q', 17
                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                            revert with 0, 'SafeCast: value must be positive'
                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                            revert with 'NH{q', 17
                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                            revert with 0, 'GreenHouse: nothing to withdraw'
                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                            revert with 'NH{q', 17
                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                        require ext_code.size(trustedTokenAddress)
                        call trustedTokenAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                            revert with 'NH{q', 17
                        if not allStakes:
                            if stor10 > -1:
                                revert with 'NH{q', 17
                            if stor16 > -2:
                                revert with 'NH{q', 17
                            if stor16 + 1 < stor15:
                                revert with 'NH{q', 17
                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                revert with 'NH{q', 17
                            stor17 = 6 * 3600
                            stor18 = block.timestamp
                            if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                revert with 'NH{q', 17
                            if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                revert with 'NH{q', 17
                            bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                            if not stor16 + -stor15 + 1:
                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if not stor16 + -stor15 + 1:
                                    revert with 'NH{q', 18
                                if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    idx = stor15
                                    while idx <= stor16:
                                        mem[0] = idx
                                        mem[32] = 13
                                        mem[mem[64] + 4] = stor13[idx]
                                        mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4826 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4826] == bool(mem[_4826])
                                        if not mem[_4826]:
                                            revert with 0, 'GreenHouse: bonus transfer'
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        idx = idx + 1
                                        continue 
                                    mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    mem[0] = msg.sender
                                    mem[32] = 8
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    mem[mem[64] + 4] = msg.sender
                                    mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7348 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7348] == bool(mem[_7348])
                                    if not mem[_7348]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if 40 * bonusRewardPool / 100 > test266151307():
                                revert with 'NH{q', 17
                            if not allStakes:
                                revert with 'NH{q', 18
                            if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                revert with 'NH{q', 17
                            stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                            if stor16 > -2:
                                revert with 'NH{q', 17
                            if stor16 + 1 < stor15:
                                revert with 'NH{q', 17
                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                revert with 'NH{q', 17
                            stor17 = 6 * 3600
                            stor18 = block.timestamp
                            if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                revert with 'NH{q', 17
                            if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                revert with 'NH{q', 17
                            bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                            if not stor16 + -stor15 + 1:
                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if not stor16 + -stor15 + 1:
                                    revert with 'NH{q', 18
                                if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    idx = stor15
                                    while idx <= stor16:
                                        mem[0] = idx
                                        mem[32] = 13
                                        mem[mem[64] + 4] = stor13[idx]
                                        mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4825 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4825] == bool(mem[_4825])
                                        if not mem[_4825]:
                                            revert with 0, 'GreenHouse: bonus transfer'
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        idx = idx + 1
                                        continue 
                                    mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    mem[0] = msg.sender
                                    mem[32] = 8
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    mem[mem[64] + 4] = msg.sender
                                    mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7347 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7347] == bool(mem[_7347])
                                    if not mem[_7347]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                else:
                    if stor17 < block.timestamp - stor18:
                        revert with 'NH{q', 17
                    if stor17 - block.timestamp + stor18:
                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                            revert with 'NH{q', 17
                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                            revert with 0, 'SafeCast: value must be positive'
                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                            revert with 'NH{q', 17
                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                            revert with 0, 'GreenHouse: nothing to withdraw'
                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                            revert with 'NH{q', 17
                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                        require ext_code.size(trustedTokenAddress)
                        call trustedTokenAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if not bonusRewardPool:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                revert with 'NH{q', 17
                            if not allStakes:
                                if stor10 > -1:
                                    revert with 'NH{q', 17
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4822 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4822] == bool(mem[_4822])
                                            if not mem[_4822]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7346 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7346] == bool(mem[_7346])
                                        if not mem[_7346]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if 40 * bonusRewardPool / 100 > test266151307():
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    revert with 'NH{q', 18
                                if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                    revert with 'NH{q', 17
                                stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4821 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4821] == bool(mem[_4821])
                                            if not mem[_4821]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7345 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7345] == bool(mem[_7345])
                                        if not mem[_7345]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
            else:
                if monthlyRewardPool and 50 > -1 / monthlyRewardPool:
                    revert with 'NH{q', 17
                if not allStakes:
                    if stor10 > -1:
                        revert with 'NH{q', 17
                    stor12 = block.timestamp
                    if monthlyRewardPool < 50 * monthlyRewardPool / 100:
                        revert with 'NH{q', 17
                    monthlyRewardPool -= 50 * monthlyRewardPool / 100
                    mem[96] = 50 * monthlyRewardPool / 100
                    emit MonthlyRewardPoolDistributed((50 * monthlyRewardPool / 100));
                    if block.timestamp < stor18:
                        revert with 'NH{q', 17
                    if block.timestamp - stor18 >= stor17:
                        if not bonusRewardPool:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                revert with 'NH{q', 17
                            if not allStakes:
                                if stor10 > -1:
                                    revert with 'NH{q', 17
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4834 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4834] == bool(mem[_4834])
                                            if not mem[_4834]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7352 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7352] == bool(mem[_7352])
                                        if not mem[_7352]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if 40 * bonusRewardPool / 100 > test266151307():
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    revert with 'NH{q', 18
                                if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                    revert with 'NH{q', 17
                                stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4832 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4832] == bool(mem[_4832])
                                            if not mem[_4832]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7351 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7351] == bool(mem[_7351])
                                        if not mem[_7351]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if stor17 < block.timestamp - stor18:
                            revert with 'NH{q', 17
                        if stor17 - block.timestamp + stor18:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4831 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4831] == bool(mem[_4831])
                                                if not mem[_4831]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7350 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7350] == bool(mem[_7350])
                                            if not mem[_7350]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7881 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7881] == bool(mem[_7881])
                                                if not mem[_7881]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _8361 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_8361] == bool(mem[_8361])
                                            if not mem[_8361]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                else:
                    if 50 * monthlyRewardPool / 100 > test266151307():
                        revert with 'NH{q', 17
                    if not allStakes:
                        revert with 'NH{q', 18
                    if stor10 > -(50 * monthlyRewardPool / 100 << 128 / allStakes) - 1:
                        revert with 'NH{q', 17
                    stor10 += 50 * monthlyRewardPool / 100 << 128 / allStakes
                    stor12 = block.timestamp
                    if monthlyRewardPool < 50 * monthlyRewardPool / 100:
                        revert with 'NH{q', 17
                    monthlyRewardPool -= 50 * monthlyRewardPool / 100
                    mem[96] = 50 * monthlyRewardPool / 100
                    emit MonthlyRewardPoolDistributed((50 * monthlyRewardPool / 100));
                    if block.timestamp < stor18:
                        revert with 'NH{q', 17
                    if block.timestamp - stor18 >= stor17:
                        if not bonusRewardPool:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                revert with 'NH{q', 17
                            if not allStakes:
                                if stor10 > -1:
                                    revert with 'NH{q', 17
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4828 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4828] == bool(mem[_4828])
                                            if not mem[_4828]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7349 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7349] == bool(mem[_7349])
                                        if not mem[_7349]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if 40 * bonusRewardPool / 100 > test266151307():
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    revert with 'NH{q', 18
                                if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                    revert with 'NH{q', 17
                                stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7880 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7880] == bool(mem[_7880])
                                            if not mem[_7880]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _8360 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_8360] == bool(mem[_8360])
                                        if not mem[_8360]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if stor17 < block.timestamp - stor18:
                            revert with 'NH{q', 17
                        if stor17 - block.timestamp + stor18:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7879 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7879] == bool(mem[_7879])
                                                if not mem[_7879]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _8359 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_8359] == bool(mem[_8359])
                                            if not mem[_8359]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7878 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7878] == bool(mem[_7878])
                                                if not mem[_7878]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _8358 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_8358] == bool(mem[_8358])
                                            if not mem[_8358]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
        else:
            if 720 * 24 * 3600 < block.timestamp - stor12:
                revert with 'NH{q', 17
            if -block.timestamp + stor12 + (720 * 24 * 3600):
                if block.timestamp < stor18:
                    revert with 'NH{q', 17
                if block.timestamp - stor18 >= stor17:
                    if not bonusRewardPool:
                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                            revert with 'NH{q', 17
                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                            revert with 0, 'SafeCast: value must be positive'
                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                            revert with 'NH{q', 17
                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                            revert with 0, 'GreenHouse: nothing to withdraw'
                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                            revert with 'NH{q', 17
                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                        require ext_code.size(trustedTokenAddress)
                        call trustedTokenAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                            revert with 'NH{q', 17
                        if not allStakes:
                            if stor10 > -1:
                                revert with 'NH{q', 17
                            if stor16 > -2:
                                revert with 'NH{q', 17
                            if stor16 + 1 < stor15:
                                revert with 'NH{q', 17
                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                revert with 'NH{q', 17
                            stor17 = 6 * 3600
                            stor18 = block.timestamp
                            if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                revert with 'NH{q', 17
                            if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                revert with 'NH{q', 17
                            bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                            if not stor16 + -stor15 + 1:
                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if not stor16 + -stor15 + 1:
                                    revert with 'NH{q', 18
                                if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    idx = stor15
                                    while idx <= stor16:
                                        mem[0] = idx
                                        mem[32] = 13
                                        mem[mem[64] + 4] = stor13[idx]
                                        mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4808 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4808] == bool(mem[_4808])
                                        if not mem[_4808]:
                                            revert with 0, 'GreenHouse: bonus transfer'
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        idx = idx + 1
                                        continue 
                                    mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    mem[0] = msg.sender
                                    mem[32] = 8
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    mem[mem[64] + 4] = msg.sender
                                    mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7338 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7338] == bool(mem[_7338])
                                    if not mem[_7338]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if 40 * bonusRewardPool / 100 > test266151307():
                                revert with 'NH{q', 17
                            if not allStakes:
                                revert with 'NH{q', 18
                            if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                revert with 'NH{q', 17
                            stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                            if stor16 > -2:
                                revert with 'NH{q', 17
                            if stor16 + 1 < stor15:
                                revert with 'NH{q', 17
                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                revert with 'NH{q', 17
                            stor17 = 6 * 3600
                            stor18 = block.timestamp
                            if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                revert with 'NH{q', 17
                            if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                revert with 'NH{q', 17
                            bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                            if not stor16 + -stor15 + 1:
                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if not stor16 + -stor15 + 1:
                                    revert with 'NH{q', 18
                                if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    idx = stor15
                                    while idx <= stor16:
                                        mem[0] = idx
                                        mem[32] = 13
                                        mem[mem[64] + 4] = stor13[idx]
                                        mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4806 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4806] == bool(mem[_4806])
                                        if not mem[_4806]:
                                            revert with 0, 'GreenHouse: bonus transfer'
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        idx = idx + 1
                                        continue 
                                    mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    mem[0] = msg.sender
                                    mem[32] = 8
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    mem[mem[64] + 4] = msg.sender
                                    mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7337 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7337] == bool(mem[_7337])
                                    if not mem[_7337]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                else:
                    if stor17 < block.timestamp - stor18:
                        revert with 'NH{q', 17
                    if stor17 - block.timestamp + stor18:
                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                            revert with 'NH{q', 17
                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                            revert with 0, 'SafeCast: value must be positive'
                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                            revert with 'NH{q', 17
                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                            revert with 0, 'GreenHouse: nothing to withdraw'
                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                            revert with 'NH{q', 17
                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                        require ext_code.size(trustedTokenAddress)
                        call trustedTokenAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if not bonusRewardPool:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                revert with 'NH{q', 17
                            if not allStakes:
                                if stor10 > -1:
                                    revert with 'NH{q', 17
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4805 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4805] == bool(mem[_4805])
                                            if not mem[_4805]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7336 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7336] == bool(mem[_7336])
                                        if not mem[_7336]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if 40 * bonusRewardPool / 100 > test266151307():
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    revert with 'NH{q', 18
                                if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                    revert with 'NH{q', 17
                                stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4804 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4804] == bool(mem[_4804])
                                            if not mem[_4804]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7335 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7335] == bool(mem[_7335])
                                        if not mem[_7335]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
            else:
                if not monthlyRewardPool:
                    if block.timestamp < stor18:
                        revert with 'NH{q', 17
                    if block.timestamp - stor18 >= stor17:
                        if not bonusRewardPool:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                revert with 'NH{q', 17
                            if not allStakes:
                                if stor10 > -1:
                                    revert with 'NH{q', 17
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4814 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4814] == bool(mem[_4814])
                                            if not mem[_4814]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7342 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7342] == bool(mem[_7342])
                                        if not mem[_7342]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if 40 * bonusRewardPool / 100 > test266151307():
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    revert with 'NH{q', 18
                                if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                    revert with 'NH{q', 17
                                stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4813 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4813] == bool(mem[_4813])
                                            if not mem[_4813]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7341 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7341] == bool(mem[_7341])
                                        if not mem[_7341]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if stor17 < block.timestamp - stor18:
                            revert with 'NH{q', 17
                        if stor17 - block.timestamp + stor18:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4812 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4812] == bool(mem[_4812])
                                                if not mem[_4812]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7340 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7340] == bool(mem[_7340])
                                            if not mem[_7340]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4809 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4809] == bool(mem[_4809])
                                                if not mem[_4809]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7339 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7339] == bool(mem[_7339])
                                            if not mem[_7339]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                else:
                    if monthlyRewardPool and 50 > -1 / monthlyRewardPool:
                        revert with 'NH{q', 17
                    if not allStakes:
                        if stor10 > -1:
                            revert with 'NH{q', 17
                        stor12 = block.timestamp
                        if monthlyRewardPool < 50 * monthlyRewardPool / 100:
                            revert with 'NH{q', 17
                        monthlyRewardPool -= 50 * monthlyRewardPool / 100
                        mem[96] = 50 * monthlyRewardPool / 100
                        emit MonthlyRewardPoolDistributed((50 * monthlyRewardPool / 100));
                        if block.timestamp < stor18:
                            revert with 'NH{q', 17
                        if block.timestamp - stor18 >= stor17:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4820 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4820] == bool(mem[_4820])
                                                if not mem[_4820]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7344 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7344] == bool(mem[_7344])
                                            if not mem[_7344]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7877 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7877] == bool(mem[_7877])
                                                if not mem[_7877]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _8357 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_8357] == bool(mem[_8357])
                                            if not mem[_8357]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if stor17 < block.timestamp - stor18:
                                revert with 'NH{q', 17
                            if stor17 - block.timestamp + stor18:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if not bonusRewardPool:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        if stor10 > -1:
                                            revert with 'NH{q', 17
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _4817 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_4817] == bool(mem[_4817])
                                                    if not mem[_4817]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7343 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7343] == bool(mem[_7343])
                                                if not mem[_7343]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if 40 * bonusRewardPool / 100 > test266151307():
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            revert with 'NH{q', 18
                                        if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                            revert with 'NH{q', 17
                                        stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7876 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7876] == bool(mem[_7876])
                                                    if not mem[_7876]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8356 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8356] == bool(mem[_8356])
                                                if not mem[_8356]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if 50 * monthlyRewardPool / 100 > test266151307():
                            revert with 'NH{q', 17
                        if not allStakes:
                            revert with 'NH{q', 18
                        if stor10 > -(50 * monthlyRewardPool / 100 << 128 / allStakes) - 1:
                            revert with 'NH{q', 17
                        stor10 += 50 * monthlyRewardPool / 100 << 128 / allStakes
                        stor12 = block.timestamp
                        if monthlyRewardPool < 50 * monthlyRewardPool / 100:
                            revert with 'NH{q', 17
                        monthlyRewardPool -= 50 * monthlyRewardPool / 100
                        mem[96] = 50 * monthlyRewardPool / 100
                        emit MonthlyRewardPoolDistributed((50 * monthlyRewardPool / 100));
                        if block.timestamp < stor18:
                            revert with 'NH{q', 17
                        if block.timestamp - stor18 >= stor17:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7875 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7875] == bool(mem[_7875])
                                                if not mem[_7875]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _8355 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_8355] == bool(mem[_8355])
                                            if not mem[_8355]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7874 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7874] == bool(mem[_7874])
                                                if not mem[_7874]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _8354 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_8354] == bool(mem[_8354])
                                            if not mem[_8354]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if stor17 < block.timestamp - stor18:
                                revert with 'NH{q', 17
                            if stor17 - block.timestamp + stor18:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if not bonusRewardPool:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        if stor10 > -1:
                                            revert with 'NH{q', 17
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7873 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7873] == bool(mem[_7873])
                                                    if not mem[_7873]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8353 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8353] == bool(mem[_8353])
                                                if not mem[_8353]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if 40 * bonusRewardPool / 100 > test266151307():
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            revert with 'NH{q', 18
                                        if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                            revert with 'NH{q', 17
                                        stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7872 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7872] == bool(mem[_7872])
                                                    if not mem[_7872]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8352 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8352] == bool(mem[_8352])
                                                if not mem[_8352]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
    else:
        if stor12:
            if block.timestamp < stor12:
                revert with 'NH{q', 17
            if block.timestamp - stor12 >= 720 * 24 * 3600:
                if not monthlyRewardPool:
                    if block.timestamp < stor18:
                        revert with 'NH{q', 17
                    if block.timestamp - stor18 >= stor17:
                        if not bonusRewardPool:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                revert with 'NH{q', 17
                            if not allStakes:
                                if stor10 > -1:
                                    revert with 'NH{q', 17
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4863 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4863] == bool(mem[_4863])
                                            if not mem[_4863]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7369 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7369] == bool(mem[_7369])
                                        if not mem[_7369]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if 40 * bonusRewardPool / 100 > test266151307():
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    revert with 'NH{q', 18
                                if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                    revert with 'NH{q', 17
                                stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4862 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4862] == bool(mem[_4862])
                                            if not mem[_4862]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7368 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7368] == bool(mem[_7368])
                                        if not mem[_7368]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if stor17 < block.timestamp - stor18:
                            revert with 'NH{q', 17
                        if stor17 - block.timestamp + stor18:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4860 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4860] == bool(mem[_4860])
                                                if not mem[_4860]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7367 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7367] == bool(mem[_7367])
                                            if not mem[_7367]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4858 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4858] == bool(mem[_4858])
                                                if not mem[_4858]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7366 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7366] == bool(mem[_7366])
                                            if not mem[_7366]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                else:
                    if monthlyRewardPool and 50 > -1 / monthlyRewardPool:
                        revert with 'NH{q', 17
                    if not allStakes:
                        if stor10 > -1:
                            revert with 'NH{q', 17
                        stor12 = block.timestamp
                        if monthlyRewardPool < 50 * monthlyRewardPool / 100:
                            revert with 'NH{q', 17
                        monthlyRewardPool -= 50 * monthlyRewardPool / 100
                        mem[96] = 50 * monthlyRewardPool / 100
                        emit MonthlyRewardPoolDistributed((50 * monthlyRewardPool / 100));
                        if block.timestamp < stor18:
                            revert with 'NH{q', 17
                        if block.timestamp - stor18 >= stor17:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4872 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4872] == bool(mem[_4872])
                                                if not mem[_4872]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7374 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7374] == bool(mem[_7374])
                                            if not mem[_7374]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4871 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4871] == bool(mem[_4871])
                                                if not mem[_4871]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7373 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7373] == bool(mem[_7373])
                                            if not mem[_7373]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if stor17 < block.timestamp - stor18:
                                revert with 'NH{q', 17
                            if stor17 - block.timestamp + stor18:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if not bonusRewardPool:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        if stor10 > -1:
                                            revert with 'NH{q', 17
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _4870 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_4870] == bool(mem[_4870])
                                                    if not mem[_4870]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7372 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7372] == bool(mem[_7372])
                                                if not mem[_7372]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if 40 * bonusRewardPool / 100 > test266151307():
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            revert with 'NH{q', 18
                                        if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                            revert with 'NH{q', 17
                                        stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7891 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7891] == bool(mem[_7891])
                                                    if not mem[_7891]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8371 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8371] == bool(mem[_8371])
                                                if not mem[_8371]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if 50 * monthlyRewardPool / 100 > test266151307():
                            revert with 'NH{q', 17
                        if not allStakes:
                            revert with 'NH{q', 18
                        if stor10 > -(50 * monthlyRewardPool / 100 << 128 / allStakes) - 1:
                            revert with 'NH{q', 17
                        stor10 += 50 * monthlyRewardPool / 100 << 128 / allStakes
                        stor12 = block.timestamp
                        if monthlyRewardPool < 50 * monthlyRewardPool / 100:
                            revert with 'NH{q', 17
                        monthlyRewardPool -= 50 * monthlyRewardPool / 100
                        mem[96] = 50 * monthlyRewardPool / 100
                        emit MonthlyRewardPoolDistributed((50 * monthlyRewardPool / 100));
                        if block.timestamp < stor18:
                            revert with 'NH{q', 17
                        if block.timestamp - stor18 >= stor17:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4867 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4867] == bool(mem[_4867])
                                                if not mem[_4867]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7371 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7371] == bool(mem[_7371])
                                            if not mem[_7371]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7890 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7890] == bool(mem[_7890])
                                                if not mem[_7890]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _8370 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_8370] == bool(mem[_8370])
                                            if not mem[_8370]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if stor17 < block.timestamp - stor18:
                                revert with 'NH{q', 17
                            if stor17 - block.timestamp + stor18:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if not bonusRewardPool:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        if stor10 > -1:
                                            revert with 'NH{q', 17
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7889 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7889] == bool(mem[_7889])
                                                    if not mem[_7889]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8369 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8369] == bool(mem[_8369])
                                                if not mem[_8369]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if 40 * bonusRewardPool / 100 > test266151307():
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            revert with 'NH{q', 18
                                        if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                            revert with 'NH{q', 17
                                        stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7888 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7888] == bool(mem[_7888])
                                                    if not mem[_7888]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8368 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8368] == bool(mem[_8368])
                                                if not mem[_8368]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
            else:
                if 720 * 24 * 3600 < block.timestamp - stor12:
                    revert with 'NH{q', 17
                if -block.timestamp + stor12 + (720 * 24 * 3600):
                    if block.timestamp < stor18:
                        revert with 'NH{q', 17
                    if block.timestamp - stor18 >= stor17:
                        if not bonusRewardPool:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                revert with 'NH{q', 17
                            if not allStakes:
                                if stor10 > -1:
                                    revert with 'NH{q', 17
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4840 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4840] == bool(mem[_4840])
                                            if not mem[_4840]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7356 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7356] == bool(mem[_7356])
                                        if not mem[_7356]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if 40 * bonusRewardPool / 100 > test266151307():
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    revert with 'NH{q', 18
                                if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                    revert with 'NH{q', 17
                                stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4839 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4839] == bool(mem[_4839])
                                            if not mem[_4839]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7355 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7355] == bool(mem[_7355])
                                        if not mem[_7355]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if stor17 < block.timestamp - stor18:
                            revert with 'NH{q', 17
                        if stor17 - block.timestamp + stor18:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4838 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4838] == bool(mem[_4838])
                                                if not mem[_4838]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7354 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7354] == bool(mem[_7354])
                                            if not mem[_7354]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4835 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4835] == bool(mem[_4835])
                                                if not mem[_4835]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7353 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7353] == bool(mem[_7353])
                                            if not mem[_7353]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                else:
                    if not monthlyRewardPool:
                        if block.timestamp < stor18:
                            revert with 'NH{q', 17
                        if block.timestamp - stor18 >= stor17:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4847 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4847] == bool(mem[_4847])
                                                if not mem[_4847]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7360 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7360] == bool(mem[_7360])
                                            if not mem[_7360]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4845 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4845] == bool(mem[_4845])
                                                if not mem[_4845]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7359 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7359] == bool(mem[_7359])
                                            if not mem[_7359]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if stor17 < block.timestamp - stor18:
                                revert with 'NH{q', 17
                            if stor17 - block.timestamp + stor18:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if not bonusRewardPool:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        if stor10 > -1:
                                            revert with 'NH{q', 17
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _4843 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_4843] == bool(mem[_4843])
                                                    if not mem[_4843]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7358 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7358] == bool(mem[_7358])
                                                if not mem[_7358]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if 40 * bonusRewardPool / 100 > test266151307():
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            revert with 'NH{q', 18
                                        if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                            revert with 'NH{q', 17
                                        stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _4841 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_4841] == bool(mem[_4841])
                                                    if not mem[_4841]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7357 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7357] == bool(mem[_7357])
                                                if not mem[_7357]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if monthlyRewardPool and 50 > -1 / monthlyRewardPool:
                            revert with 'NH{q', 17
                        if not allStakes:
                            if stor10 > -1:
                                revert with 'NH{q', 17
                            stor12 = block.timestamp
                            if monthlyRewardPool < 50 * monthlyRewardPool / 100:
                                revert with 'NH{q', 17
                            monthlyRewardPool -= 50 * monthlyRewardPool / 100
                            mem[96] = 50 * monthlyRewardPool / 100
                            emit MonthlyRewardPoolDistributed((50 * monthlyRewardPool / 100));
                            if block.timestamp < stor18:
                                revert with 'NH{q', 17
                            if block.timestamp - stor18 >= stor17:
                                if not bonusRewardPool:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        if stor10 > -1:
                                            revert with 'NH{q', 17
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _4856 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_4856] == bool(mem[_4856])
                                                    if not mem[_4856]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7365 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7365] == bool(mem[_7365])
                                                if not mem[_7365]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if 40 * bonusRewardPool / 100 > test266151307():
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            revert with 'NH{q', 18
                                        if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                            revert with 'NH{q', 17
                                        stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7887 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7887] == bool(mem[_7887])
                                                    if not mem[_7887]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8367 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8367] == bool(mem[_8367])
                                                if not mem[_8367]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if stor17 < block.timestamp - stor18:
                                    revert with 'NH{q', 17
                                if stor17 - block.timestamp + stor18:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not bonusRewardPool:
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            if stor10 > -1:
                                                revert with 'NH{q', 17
                                            if stor16 > -2:
                                                revert with 'NH{q', 17
                                            if stor16 + 1 < stor15:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                                revert with 'NH{q', 17
                                            stor17 = 6 * 3600
                                            stor18 = block.timestamp
                                            if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                                revert with 'NH{q', 17
                                            bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                            if not stor16 + -stor15 + 1:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                if not stor16 + -stor15 + 1:
                                                    revert with 'NH{q', 18
                                                if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                    if not ext_call.return_data[0]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                                else:
                                                    idx = stor15
                                                    while idx <= stor16:
                                                        mem[0] = idx
                                                        mem[32] = 13
                                                        mem[mem[64] + 4] = stor13[idx]
                                                        mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        require ext_code.size(trustedTokenAddress)
                                                        call trustedTokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _4853 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        require mem[_4853] == bool(mem[_4853])
                                                        if not mem[_4853]:
                                                            revert with 0, 'GreenHouse: bonus transfer'
                                                        if idx == -1:
                                                            revert with 'NH{q', 17
                                                        idx = idx + 1
                                                        continue 
                                                    mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    mem[0] = msg.sender
                                                    mem[32] = 8
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7364 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7364] == bool(mem[_7364])
                                                    if not mem[_7364]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if 40 * bonusRewardPool / 100 > test266151307():
                                                revert with 'NH{q', 17
                                            if not allStakes:
                                                revert with 'NH{q', 18
                                            if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                                revert with 'NH{q', 17
                                            stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                            if stor16 > -2:
                                                revert with 'NH{q', 17
                                            if stor16 + 1 < stor15:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                                revert with 'NH{q', 17
                                            stor17 = 6 * 3600
                                            stor18 = block.timestamp
                                            if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                                revert with 'NH{q', 17
                                            bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                            if not stor16 + -stor15 + 1:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                if not stor16 + -stor15 + 1:
                                                    revert with 'NH{q', 18
                                                if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                    if not ext_call.return_data[0]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                                else:
                                                    idx = stor15
                                                    while idx <= stor16:
                                                        mem[0] = idx
                                                        mem[32] = 13
                                                        mem[mem[64] + 4] = stor13[idx]
                                                        mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        require ext_code.size(trustedTokenAddress)
                                                        call trustedTokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7886 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        require mem[_7886] == bool(mem[_7886])
                                                        if not mem[_7886]:
                                                            revert with 0, 'GreenHouse: bonus transfer'
                                                        if idx == -1:
                                                            revert with 'NH{q', 17
                                                        idx = idx + 1
                                                        continue 
                                                    mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    mem[0] = msg.sender
                                                    mem[32] = 8
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _8366 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_8366] == bool(mem[_8366])
                                                    if not mem[_8366]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if 50 * monthlyRewardPool / 100 > test266151307():
                                revert with 'NH{q', 17
                            if not allStakes:
                                revert with 'NH{q', 18
                            if stor10 > -(50 * monthlyRewardPool / 100 << 128 / allStakes) - 1:
                                revert with 'NH{q', 17
                            stor10 += 50 * monthlyRewardPool / 100 << 128 / allStakes
                            stor12 = block.timestamp
                            if monthlyRewardPool < 50 * monthlyRewardPool / 100:
                                revert with 'NH{q', 17
                            monthlyRewardPool -= 50 * monthlyRewardPool / 100
                            mem[96] = 50 * monthlyRewardPool / 100
                            emit MonthlyRewardPoolDistributed((50 * monthlyRewardPool / 100));
                            if block.timestamp < stor18:
                                revert with 'NH{q', 17
                            if block.timestamp - stor18 >= stor17:
                                if not bonusRewardPool:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        if stor10 > -1:
                                            revert with 'NH{q', 17
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7885 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7885] == bool(mem[_7885])
                                                    if not mem[_7885]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8365 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8365] == bool(mem[_8365])
                                                if not mem[_8365]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if 40 * bonusRewardPool / 100 > test266151307():
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            revert with 'NH{q', 18
                                        if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                            revert with 'NH{q', 17
                                        stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7884 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7884] == bool(mem[_7884])
                                                    if not mem[_7884]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8364 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8364] == bool(mem[_8364])
                                                if not mem[_8364]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if stor17 < block.timestamp - stor18:
                                    revert with 'NH{q', 17
                                if stor17 - block.timestamp + stor18:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not bonusRewardPool:
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            if stor10 > -1:
                                                revert with 'NH{q', 17
                                            if stor16 > -2:
                                                revert with 'NH{q', 17
                                            if stor16 + 1 < stor15:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                                revert with 'NH{q', 17
                                            stor17 = 6 * 3600
                                            stor18 = block.timestamp
                                            if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                                revert with 'NH{q', 17
                                            bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                            if not stor16 + -stor15 + 1:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                if not stor16 + -stor15 + 1:
                                                    revert with 'NH{q', 18
                                                if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                    if not ext_call.return_data[0]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                                else:
                                                    idx = stor15
                                                    while idx <= stor16:
                                                        mem[0] = idx
                                                        mem[32] = 13
                                                        mem[mem[64] + 4] = stor13[idx]
                                                        mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        require ext_code.size(trustedTokenAddress)
                                                        call trustedTokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7883 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        require mem[_7883] == bool(mem[_7883])
                                                        if not mem[_7883]:
                                                            revert with 0, 'GreenHouse: bonus transfer'
                                                        if idx == -1:
                                                            revert with 'NH{q', 17
                                                        idx = idx + 1
                                                        continue 
                                                    mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    mem[0] = msg.sender
                                                    mem[32] = 8
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _8363 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_8363] == bool(mem[_8363])
                                                    if not mem[_8363]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if 40 * bonusRewardPool / 100 > test266151307():
                                                revert with 'NH{q', 17
                                            if not allStakes:
                                                revert with 'NH{q', 18
                                            if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                                revert with 'NH{q', 17
                                            stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                            if stor16 > -2:
                                                revert with 'NH{q', 17
                                            if stor16 + 1 < stor15:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                                revert with 'NH{q', 17
                                            stor17 = 6 * 3600
                                            stor18 = block.timestamp
                                            if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                                revert with 'NH{q', 17
                                            bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                            if not stor16 + -stor15 + 1:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                if not stor16 + -stor15 + 1:
                                                    revert with 'NH{q', 18
                                                if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                    if not ext_call.return_data[0]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                                else:
                                                    idx = stor15
                                                    while idx <= stor16:
                                                        mem[0] = idx
                                                        mem[32] = 13
                                                        mem[mem[64] + 4] = stor13[idx]
                                                        mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        require ext_code.size(trustedTokenAddress)
                                                        call trustedTokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7882 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        require mem[_7882] == bool(mem[_7882])
                                                        if not mem[_7882]:
                                                            revert with 0, 'GreenHouse: bonus transfer'
                                                        if idx == -1:
                                                            revert with 'NH{q', 17
                                                        idx = idx + 1
                                                        continue 
                                                    mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    mem[0] = msg.sender
                                                    mem[32] = 8
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _8362 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_8362] == bool(mem[_8362])
                                                    if not mem[_8362]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
        else:
            stor18 = block.timestamp
            stor12 = block.timestamp
            if block.timestamp < stor12:
                revert with 'NH{q', 17
            if block.timestamp - stor12 >= 720 * 24 * 3600:
                if not monthlyRewardPool:
                    if block.timestamp < stor18:
                        revert with 'NH{q', 17
                    if block.timestamp - stor18 >= stor17:
                        if not bonusRewardPool:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                revert with 'NH{q', 17
                            if not allStakes:
                                if stor10 > -1:
                                    revert with 'NH{q', 17
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4899 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4899] == bool(mem[_4899])
                                            if not mem[_4899]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7390 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7390] == bool(mem[_7390])
                                        if not mem[_7390]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if 40 * bonusRewardPool / 100 > test266151307():
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    revert with 'NH{q', 18
                                if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                    revert with 'NH{q', 17
                                stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4898 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4898] == bool(mem[_4898])
                                            if not mem[_4898]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7389 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7389] == bool(mem[_7389])
                                        if not mem[_7389]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if stor17 < block.timestamp - stor18:
                            revert with 'NH{q', 17
                        if stor17 - block.timestamp + stor18:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4897 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4897] == bool(mem[_4897])
                                                if not mem[_4897]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7388 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7388] == bool(mem[_7388])
                                            if not mem[_7388]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4896 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4896] == bool(mem[_4896])
                                                if not mem[_4896]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7387 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7387] == bool(mem[_7387])
                                            if not mem[_7387]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                else:
                    if monthlyRewardPool and 50 > -1 / monthlyRewardPool:
                        revert with 'NH{q', 17
                    if not allStakes:
                        if stor10 > -1:
                            revert with 'NH{q', 17
                        stor12 = block.timestamp
                        if monthlyRewardPool < 50 * monthlyRewardPool / 100:
                            revert with 'NH{q', 17
                        monthlyRewardPool -= 50 * monthlyRewardPool / 100
                        mem[96] = 50 * monthlyRewardPool / 100
                        emit MonthlyRewardPoolDistributed((50 * monthlyRewardPool / 100));
                        if block.timestamp < stor18:
                            revert with 'NH{q', 17
                        if block.timestamp - stor18 >= stor17:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4910 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4910] == bool(mem[_4910])
                                                if not mem[_4910]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7396 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7396] == bool(mem[_7396])
                                            if not mem[_7396]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4909 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4909] == bool(mem[_4909])
                                                if not mem[_4909]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7395 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7395] == bool(mem[_7395])
                                            if not mem[_7395]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if stor17 < block.timestamp - stor18:
                                revert with 'NH{q', 17
                            if stor17 - block.timestamp + stor18:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if not bonusRewardPool:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        if stor10 > -1:
                                            revert with 'NH{q', 17
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _4906 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_4906] == bool(mem[_4906])
                                                    if not mem[_4906]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7394 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7394] == bool(mem[_7394])
                                                if not mem[_7394]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if 40 * bonusRewardPool / 100 > test266151307():
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            revert with 'NH{q', 18
                                        if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                            revert with 'NH{q', 17
                                        stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7901 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7901] == bool(mem[_7901])
                                                    if not mem[_7901]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8381 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8381] == bool(mem[_8381])
                                                if not mem[_8381]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if 50 * monthlyRewardPool / 100 > test266151307():
                            revert with 'NH{q', 17
                        if not allStakes:
                            revert with 'NH{q', 18
                        if stor10 > -(50 * monthlyRewardPool / 100 << 128 / allStakes) - 1:
                            revert with 'NH{q', 17
                        stor10 += 50 * monthlyRewardPool / 100 << 128 / allStakes
                        stor12 = block.timestamp
                        if monthlyRewardPool < 50 * monthlyRewardPool / 100:
                            revert with 'NH{q', 17
                        monthlyRewardPool -= 50 * monthlyRewardPool / 100
                        mem[96] = 50 * monthlyRewardPool / 100
                        emit MonthlyRewardPoolDistributed((50 * monthlyRewardPool / 100));
                        if block.timestamp < stor18:
                            revert with 'NH{q', 17
                        if block.timestamp - stor18 >= stor17:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4904 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4904] == bool(mem[_4904])
                                                if not mem[_4904]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7393 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7393] == bool(mem[_7393])
                                            if not mem[_7393]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7900 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7900] == bool(mem[_7900])
                                                if not mem[_7900]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _8380 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_8380] == bool(mem[_8380])
                                            if not mem[_8380]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if stor17 < block.timestamp - stor18:
                                revert with 'NH{q', 17
                            if stor17 - block.timestamp + stor18:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if not bonusRewardPool:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        if stor10 > -1:
                                            revert with 'NH{q', 17
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7899 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7899] == bool(mem[_7899])
                                                    if not mem[_7899]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8379 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8379] == bool(mem[_8379])
                                                if not mem[_8379]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if 40 * bonusRewardPool / 100 > test266151307():
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            revert with 'NH{q', 18
                                        if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                            revert with 'NH{q', 17
                                        stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7898 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7898] == bool(mem[_7898])
                                                    if not mem[_7898]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8378 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8378] == bool(mem[_8378])
                                                if not mem[_8378]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
            else:
                if 720 * 24 * 3600 < block.timestamp - stor12:
                    revert with 'NH{q', 17
                if -block.timestamp + stor12 + (720 * 24 * 3600):
                    if block.timestamp < stor18:
                        revert with 'NH{q', 17
                    if block.timestamp - stor18 >= stor17:
                        if not bonusRewardPool:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                revert with 'NH{q', 17
                            if not allStakes:
                                if stor10 > -1:
                                    revert with 'NH{q', 17
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4879 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4879] == bool(mem[_4879])
                                            if not mem[_4879]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7378 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7378] == bool(mem[_7378])
                                        if not mem[_7378]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if 40 * bonusRewardPool / 100 > test266151307():
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    revert with 'NH{q', 18
                                if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                    revert with 'NH{q', 17
                                stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                if stor16 > -2:
                                    revert with 'NH{q', 17
                                if stor16 + 1 < stor15:
                                    revert with 'NH{q', 17
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                stor17 = 6 * 3600
                                stor18 = block.timestamp
                                if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                    revert with 'NH{q', 17
                                if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                    revert with 'NH{q', 17
                                bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                if not stor16 + -stor15 + 1:
                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not stor16 + -stor15 + 1:
                                        revert with 'NH{q', 18
                                    if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        idx = stor15
                                        while idx <= stor16:
                                            mem[0] = idx
                                            mem[32] = 13
                                            mem[mem[64] + 4] = stor13[idx]
                                            mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4877 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_4877] == bool(mem[_4877])
                                            if not mem[_4877]:
                                                revert with 0, 'GreenHouse: bonus transfer'
                                            if idx == -1:
                                                revert with 'NH{q', 17
                                            idx = idx + 1
                                            continue 
                                        mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        mem[0] = msg.sender
                                        mem[32] = 8
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7377 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7377] == bool(mem[_7377])
                                        if not mem[_7377]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if stor17 < block.timestamp - stor18:
                            revert with 'NH{q', 17
                        if stor17 - block.timestamp + stor18:
                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                revert with 0, 'SafeCast: value must be positive'
                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                revert with 'NH{q', 17
                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                revert with 0, 'GreenHouse: nothing to withdraw'
                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                revert with 'NH{q', 17
                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                            require ext_code.size(trustedTokenAddress)
                            call trustedTokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4875 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4875] == bool(mem[_4875])
                                                if not mem[_4875]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7376 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7376] == bool(mem[_7376])
                                            if not mem[_7376]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4873 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4873] == bool(mem[_4873])
                                                if not mem[_4873]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7375 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7375] == bool(mem[_7375])
                                            if not mem[_7375]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                else:
                    if not monthlyRewardPool:
                        if block.timestamp < stor18:
                            revert with 'NH{q', 17
                        if block.timestamp - stor18 >= stor17:
                            if not bonusRewardPool:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                    revert with 'NH{q', 17
                                if not allStakes:
                                    if stor10 > -1:
                                        revert with 'NH{q', 17
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4885 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4885] == bool(mem[_4885])
                                                if not mem[_4885]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7382 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7382] == bool(mem[_7382])
                                            if not mem[_7382]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if 40 * bonusRewardPool / 100 > test266151307():
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        revert with 'NH{q', 18
                                    if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                        revert with 'NH{q', 17
                                    stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                    if stor16 > -2:
                                        revert with 'NH{q', 17
                                    if stor16 + 1 < stor15:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    stor17 = 6 * 3600
                                    stor18 = block.timestamp
                                    if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                        revert with 'NH{q', 17
                                    if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                        revert with 'NH{q', 17
                                    bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                    if not stor16 + -stor15 + 1:
                                        emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if not stor16 + -stor15 + 1:
                                            revert with 'NH{q', 18
                                        if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            idx = stor15
                                            while idx <= stor16:
                                                mem[0] = idx
                                                mem[32] = 13
                                                mem[mem[64] + 4] = stor13[idx]
                                                mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _4884 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_4884] == bool(mem[_4884])
                                                if not mem[_4884]:
                                                    revert with 0, 'GreenHouse: bonus transfer'
                                                if idx == -1:
                                                    revert with 'NH{q', 17
                                                idx = idx + 1
                                                continue 
                                            mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            mem[0] = msg.sender
                                            mem[32] = 8
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _7381 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_7381] == bool(mem[_7381])
                                            if not mem[_7381]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if stor17 < block.timestamp - stor18:
                                revert with 'NH{q', 17
                            if stor17 - block.timestamp + stor18:
                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                    revert with 'NH{q', 17
                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                    revert with 0, 'SafeCast: value must be positive'
                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                    revert with 'NH{q', 17
                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                    revert with 'NH{q', 17
                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                require ext_code.size(trustedTokenAddress)
                                call trustedTokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if not bonusRewardPool:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        if stor10 > -1:
                                            revert with 'NH{q', 17
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _4881 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_4881] == bool(mem[_4881])
                                                    if not mem[_4881]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7380 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7380] == bool(mem[_7380])
                                                if not mem[_7380]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if 40 * bonusRewardPool / 100 > test266151307():
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            revert with 'NH{q', 18
                                        if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                            revert with 'NH{q', 17
                                        stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _4880 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_4880] == bool(mem[_4880])
                                                    if not mem[_4880]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7379 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7379] == bool(mem[_7379])
                                                if not mem[_7379]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                    else:
                        if monthlyRewardPool and 50 > -1 / monthlyRewardPool:
                            revert with 'NH{q', 17
                        if not allStakes:
                            if stor10 > -1:
                                revert with 'NH{q', 17
                            stor12 = block.timestamp
                            if monthlyRewardPool < 50 * monthlyRewardPool / 100:
                                revert with 'NH{q', 17
                            monthlyRewardPool -= 50 * monthlyRewardPool / 100
                            mem[96] = 50 * monthlyRewardPool / 100
                            emit MonthlyRewardPoolDistributed((50 * monthlyRewardPool / 100));
                            if block.timestamp < stor18:
                                revert with 'NH{q', 17
                            if block.timestamp - stor18 >= stor17:
                                if not bonusRewardPool:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        if stor10 > -1:
                                            revert with 'NH{q', 17
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _4893 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_4893] == bool(mem[_4893])
                                                    if not mem[_4893]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _7386 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_7386] == bool(mem[_7386])
                                                if not mem[_7386]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if 40 * bonusRewardPool / 100 > test266151307():
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            revert with 'NH{q', 18
                                        if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                            revert with 'NH{q', 17
                                        stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7897 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7897] == bool(mem[_7897])
                                                    if not mem[_7897]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8377 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8377] == bool(mem[_8377])
                                                if not mem[_8377]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if stor17 < block.timestamp - stor18:
                                    revert with 'NH{q', 17
                                if stor17 - block.timestamp + stor18:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not bonusRewardPool:
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            if stor10 > -1:
                                                revert with 'NH{q', 17
                                            if stor16 > -2:
                                                revert with 'NH{q', 17
                                            if stor16 + 1 < stor15:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                                revert with 'NH{q', 17
                                            stor17 = 6 * 3600
                                            stor18 = block.timestamp
                                            if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                                revert with 'NH{q', 17
                                            bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                            if not stor16 + -stor15 + 1:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                if not stor16 + -stor15 + 1:
                                                    revert with 'NH{q', 18
                                                if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                    if not ext_call.return_data[0]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                                else:
                                                    idx = stor15
                                                    while idx <= stor16:
                                                        mem[0] = idx
                                                        mem[32] = 13
                                                        mem[mem[64] + 4] = stor13[idx]
                                                        mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        require ext_code.size(trustedTokenAddress)
                                                        call trustedTokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _4891 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        require mem[_4891] == bool(mem[_4891])
                                                        if not mem[_4891]:
                                                            revert with 0, 'GreenHouse: bonus transfer'
                                                        if idx == -1:
                                                            revert with 'NH{q', 17
                                                        idx = idx + 1
                                                        continue 
                                                    mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    mem[0] = msg.sender
                                                    mem[32] = 8
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7385 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7385] == bool(mem[_7385])
                                                    if not mem[_7385]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if 40 * bonusRewardPool / 100 > test266151307():
                                                revert with 'NH{q', 17
                                            if not allStakes:
                                                revert with 'NH{q', 18
                                            if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                                revert with 'NH{q', 17
                                            stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                            if stor16 > -2:
                                                revert with 'NH{q', 17
                                            if stor16 + 1 < stor15:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                                revert with 'NH{q', 17
                                            stor17 = 6 * 3600
                                            stor18 = block.timestamp
                                            if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                                revert with 'NH{q', 17
                                            bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                            if not stor16 + -stor15 + 1:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                if not stor16 + -stor15 + 1:
                                                    revert with 'NH{q', 18
                                                if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                    if not ext_call.return_data[0]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                                else:
                                                    idx = stor15
                                                    while idx <= stor16:
                                                        mem[0] = idx
                                                        mem[32] = 13
                                                        mem[mem[64] + 4] = stor13[idx]
                                                        mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        require ext_code.size(trustedTokenAddress)
                                                        call trustedTokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7896 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        require mem[_7896] == bool(mem[_7896])
                                                        if not mem[_7896]:
                                                            revert with 0, 'GreenHouse: bonus transfer'
                                                        if idx == -1:
                                                            revert with 'NH{q', 17
                                                        idx = idx + 1
                                                        continue 
                                                    mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    mem[0] = msg.sender
                                                    mem[32] = 8
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _8376 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_8376] == bool(mem[_8376])
                                                    if not mem[_8376]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
                        else:
                            if 50 * monthlyRewardPool / 100 > test266151307():
                                revert with 'NH{q', 17
                            if not allStakes:
                                revert with 'NH{q', 18
                            if stor10 > -(50 * monthlyRewardPool / 100 << 128 / allStakes) - 1:
                                revert with 'NH{q', 17
                            stor10 += 50 * monthlyRewardPool / 100 << 128 / allStakes
                            stor12 = block.timestamp
                            if monthlyRewardPool < 50 * monthlyRewardPool / 100:
                                revert with 'NH{q', 17
                            monthlyRewardPool -= 50 * monthlyRewardPool / 100
                            mem[96] = 50 * monthlyRewardPool / 100
                            emit MonthlyRewardPoolDistributed((50 * monthlyRewardPool / 100));
                            if block.timestamp < stor18:
                                revert with 'NH{q', 17
                            if block.timestamp - stor18 >= stor17:
                                if not bonusRewardPool:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                        revert with 'NH{q', 17
                                    if not allStakes:
                                        if stor10 > -1:
                                            revert with 'NH{q', 17
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7895 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7895] == bool(mem[_7895])
                                                    if not mem[_7895]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8375 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8375] == bool(mem[_8375])
                                                if not mem[_8375]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if 40 * bonusRewardPool / 100 > test266151307():
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            revert with 'NH{q', 18
                                        if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                            revert with 'NH{q', 17
                                        stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                        if stor16 > -2:
                                            revert with 'NH{q', 17
                                        if stor16 + 1 < stor15:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        stor17 = 6 * 3600
                                        stor18 = block.timestamp
                                        if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                            revert with 'NH{q', 17
                                        if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                            revert with 'NH{q', 17
                                        bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                        if not stor16 + -stor15 + 1:
                                            emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                            if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                            if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                revert with 'NH{q', 17
                                            if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                revert with 0, 'SafeCast: value must be positive'
                                            if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                revert with 'NH{q', 17
                                            if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                revert with 0, 'GreenHouse: nothing to withdraw'
                                            if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                revert with 'NH{q', 17
                                            withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                            withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                            require ext_code.size(trustedTokenAddress)
                                            call trustedTokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if not stor16 + -stor15 + 1:
                                                revert with 'NH{q', 18
                                            if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                idx = stor15
                                                while idx <= stor16:
                                                    mem[0] = idx
                                                    mem[32] = 13
                                                    mem[mem[64] + 4] = stor13[idx]
                                                    mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7894 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_7894] == bool(mem[_7894])
                                                    if not mem[_7894]:
                                                        revert with 0, 'GreenHouse: bonus transfer'
                                                    if idx == -1:
                                                        revert with 'NH{q', 17
                                                    idx = idx + 1
                                                    continue 
                                                mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                mem[0] = msg.sender
                                                mem[32] = 8
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _8374 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_8374] == bool(mem[_8374])
                                                if not mem[_8374]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                            else:
                                if stor17 < block.timestamp - stor18:
                                    revert with 'NH{q', 17
                                if stor17 - block.timestamp + stor18:
                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                        revert with 'NH{q', 17
                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                        revert with 0, 'SafeCast: value must be positive'
                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                        revert with 'NH{q', 17
                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                        revert with 'NH{q', 17
                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                    require ext_code.size(trustedTokenAddress)
                                    call trustedTokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                else:
                                    if not bonusRewardPool:
                                        if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                        if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                            revert with 'NH{q', 17
                                        if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                            revert with 0, 'SafeCast: value must be positive'
                                        if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                            revert with 'NH{q', 17
                                        if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                            revert with 0, 'GreenHouse: nothing to withdraw'
                                        if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                            revert with 'NH{q', 17
                                        withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                        withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                        require ext_code.size(trustedTokenAddress)
                                        call trustedTokenAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        if not ext_call.return_data[0]:
                                            revert with 0, 'GreenHouse: withdrawal transfer'
                                    else:
                                        if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                            revert with 'NH{q', 17
                                        if not allStakes:
                                            if stor10 > -1:
                                                revert with 'NH{q', 17
                                            if stor16 > -2:
                                                revert with 'NH{q', 17
                                            if stor16 + 1 < stor15:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                                revert with 'NH{q', 17
                                            stor17 = 6 * 3600
                                            stor18 = block.timestamp
                                            if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                                revert with 'NH{q', 17
                                            bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                            if not stor16 + -stor15 + 1:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                if not stor16 + -stor15 + 1:
                                                    revert with 'NH{q', 18
                                                if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                    if not ext_call.return_data[0]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                                else:
                                                    idx = stor15
                                                    while idx <= stor16:
                                                        mem[0] = idx
                                                        mem[32] = 13
                                                        mem[mem[64] + 4] = stor13[idx]
                                                        mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        require ext_code.size(trustedTokenAddress)
                                                        call trustedTokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7893 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        require mem[_7893] == bool(mem[_7893])
                                                        if not mem[_7893]:
                                                            revert with 0, 'GreenHouse: bonus transfer'
                                                        if idx == -1:
                                                            revert with 'NH{q', 17
                                                        idx = idx + 1
                                                        continue 
                                                    mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    mem[0] = msg.sender
                                                    mem[32] = 8
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _8373 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_8373] == bool(mem[_8373])
                                                    if not mem[_8373]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                        else:
                                            if 40 * bonusRewardPool / 100 > test266151307():
                                                revert with 'NH{q', 17
                                            if not allStakes:
                                                revert with 'NH{q', 18
                                            if stor10 > -(40 * bonusRewardPool / 100 << 128 / allStakes) - 1:
                                                revert with 'NH{q', 17
                                            stor10 += 40 * bonusRewardPool / 100 << 128 / allStakes
                                            if stor16 > -2:
                                                revert with 'NH{q', 17
                                            if stor16 + 1 < stor15:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool and 40 > -1 / bonusRewardPool:
                                                revert with 'NH{q', 17
                                            stor17 = 6 * 3600
                                            stor18 = block.timestamp
                                            if 40 * bonusRewardPool / 100 > -(40 * bonusRewardPool / 100) - 1:
                                                revert with 'NH{q', 17
                                            if bonusRewardPool < 2 * 40 * bonusRewardPool / 100:
                                                revert with 'NH{q', 17
                                            bonusRewardPool -= 2 * 40 * bonusRewardPool / 100
                                            if not stor16 + -stor15 + 1:
                                                emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                    revert with 'NH{q', 17
                                                if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeCast: value must be positive'
                                                if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                    revert with 'NH{q', 17
                                                if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                    revert with 0, 'GreenHouse: nothing to withdraw'
                                                if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                    revert with 'NH{q', 17
                                                withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                require ext_code.size(trustedTokenAddress)
                                                call trustedTokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                if not ext_call.return_data[0]:
                                                    revert with 0, 'GreenHouse: withdrawal transfer'
                                            else:
                                                if not stor16 + -stor15 + 1:
                                                    revert with 'NH{q', 18
                                                if 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1 <= 0:
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                    if not ext_call.return_data[0]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
                                                else:
                                                    idx = stor15
                                                    while idx <= stor16:
                                                        mem[0] = idx
                                                        mem[32] = 13
                                                        mem[mem[64] + 4] = stor13[idx]
                                                        mem[mem[64] + 36] = 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        require ext_code.size(trustedTokenAddress)
                                                        call trustedTokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args stor13[idx], 40 * bonusRewardPool / 100 / stor16 + -stor15 + 1
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7892 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        require mem[_7892] == bool(mem[_7892])
                                                        if not mem[_7892]:
                                                            revert with 0, 'GreenHouse: bonus transfer'
                                                        if idx == -1:
                                                            revert with 'NH{q', 17
                                                        idx = idx + 1
                                                        continue 
                                                    mem[mem[64] + 32] = 40 * bonusRewardPool / 100
                                                    emit BonusRewardPoolDistributed(40 * bonusRewardPool / 100, 40 * bonusRewardPool / 100);
                                                    if stakeOf[address(msg.sender)] and stor10 > -1 / stakeOf[address(msg.sender)]:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 'SafeCast: value doesn't fit in an int256'
                                                    if stakeOf[address(msg.sender)] * stor10 >= 0 and stor11[address(msg.sender)] > (-1 * stakeOf[address(msg.sender)] * stor10) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if stakeOf[address(msg.sender)] * stor10 < 0 and stor11[address(msg.sender)] < (-1 * stakeOf[address(msg.sender)] * stor10) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                                        revert with 'NH{q', 17
                                                    if (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)] < 0:
                                                        revert with 0, 'SafeCast: value must be positive'
                                                    if Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128 < withdrawnRewardOf[address(msg.sender)].field_0:
                                                        revert with 'NH{q', 17
                                                    if (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0 <= 0:
                                                        revert with 0, 'GreenHouse: nothing to withdraw'
                                                    mem[0] = msg.sender
                                                    mem[32] = 8
                                                    if withdrawnRewardOf[address(msg.sender)].field_0 > -(Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) + withdrawnRewardOf[address(msg.sender)].field_0 - 1:
                                                        revert with 'NH{q', 17
                                                    withdrawnRewardOf[address(msg.sender)].field_0 = Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128
                                                    withdrawnRewardOf[address(msg.sender)].field_128 = 0
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    require ext_code.size(trustedTokenAddress)
                                                    call trustedTokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _8372 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    require mem[_8372] == bool(mem[_8372])
                                                    if not mem[_8372]:
                                                        revert with 0, 'GreenHouse: withdrawal transfer'
    emit RewardWithdrawn(((Mask(128, 128, (stakeOf[address(msg.sender)] * stor10) + stor11[address(msg.sender)]) >> 128) - withdrawnRewardOf[address(msg.sender)].field_0), msg.sender);
}



}
