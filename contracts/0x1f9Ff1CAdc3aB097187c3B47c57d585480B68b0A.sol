contract main {




// =====================  Runtime code  =====================


#
#  - transferFrom(address arg1, address arg2, uint256 arg3)
#
const deadAddress = 57005


address owner;
address stor1;
array of struct stor4;
array of struct stor5;
uint8 decimals;
uint256 totalSupply;
address stor8;
address sub_e5148bd6Address;
mapping of uint256 balanceOf;
mapping of struct allowance;
mapping of uint8 stor12;
mapping of uint8 stor13;
uint256 totalFees;
uint256 stor15;
uint256 stor16;
uint256 stor17;
uint256 stor18;
uint256 maxBalance;
address uniswapV2RouterAddress;
address uniswapV2PairAddress;
uint256 liquifyThreshhold;
uint8 stor23;

function totalFees() {
    return totalFees
}

function uniswapV2Router() {
    return uniswapV2RouterAddress
}

function totalSupply() {
    return totalSupply
}

function isExcludedFromMaxBalance(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor13[address(arg1)])
}

function decimals() {
    return decimals
}

function uniswapV2Pair() {
    return uniswapV2PairAddress
}

function isExcludedFromFees(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor12[address(arg1)])
}

function liquifyThreshhold() {
    return liquifyThreshhold
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return balanceOf[address(arg1)]
}

function maxBalance() {
    return maxBalance
}

function owner() {
    return owner
}

function allowance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return allowance[address(arg1)][address(arg2)].field_0
}

function sub_e5148bd6(?) {
    return sub_e5148bd6Address
}

function _fallback() payable {
    revert
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function setMarketingAddr(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor8 = arg1
}

function sub_b239d0d4(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor12[address(arg1)] = 1
}

function sub_f56ec40d(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor12[address(arg1)] = 0
}

function setLiquifyThreshhold(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    liquifyThreshhold = arg1
}

function includeInMaxBalance(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor13[address(arg1)] = 0
}

function excludeFromMaxBalance(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor13[address(arg1)] = 1
}

function setMarketingWalletToken(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_e5148bd6Address = arg1
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function sub_297d7621(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor17 = arg1
    if stor16 > -stor18 - 1:
        revert with 'NH{q', 17
    if stor16 + stor18 < stor16:
        revert with 0, 'SafeMath: addition overflow'
    if stor16 + stor18 > -stor17 - 1:
        revert with 'NH{q', 17
    if stor17 < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = stor16 + stor18 + stor17
    emit SetBurnFee(stor17);
}

function sub_8879b5eb(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not totalSupply:
        require arg1 >= 0
    else:
        if totalSupply and 5 > -1 / totalSupply:
            revert with 'NH{q', 17
        if not totalSupply:
            revert with 'NH{q', 18
        if 5 * totalSupply / totalSupply != 5:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
        require arg1 >= 5 * totalSupply / 1000
    maxBalance = arg1
}

function sub_ce39d7a3(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if stor23:
        revert with 0, 'inSwapAndLiquify'
    stor18 = arg1
    if stor16 > -stor18 - 1:
        revert with 'NH{q', 17
    if stor16 + stor18 < stor16:
        revert with 0, 'SafeMath: addition overflow'
    if stor16 + stor18 > -stor17 - 1:
        revert with 'NH{q', 17
    if stor17 < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = stor16 + stor18 + stor17
    if stor16 > -stor18 - 1:
        revert with 'NH{q', 17
    if stor16 + stor18 < stor16:
        revert with 0, 'SafeMath: addition overflow'
    stor15 = stor16 + stor18
    emit SetMarketingFee(stor18);
}

function sub_d25e88ce(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if stor23:
        revert with 0, 'inSwapAndLiquify'
    stor16 = arg1
    if stor16 > -stor18 - 1:
        revert with 'NH{q', 17
    if stor16 + stor18 < stor16:
        revert with 0, 'SafeMath: addition overflow'
    if stor16 + stor18 > -stor17 - 1:
        revert with 'NH{q', 17
    if stor17 < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = stor16 + stor18 + stor17
    if stor16 > -stor18 - 1:
        revert with 'NH{q', 17
    if stor16 + stor18 < stor16:
        revert with 0, 'SafeMath: addition overflow'
    stor15 = stor16 + stor18
    emit SetLiquidityFee(stor16);
}

function decreaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if arg2 > allowance[address(msg.sender)][address(arg1)].field_0:
        revert with 0, 32, 37, 0x6545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572, mem[165 len 27] >> 40, 0
    if allowance[address(msg.sender)][address(arg1)].field_0 < arg2:
        revert with 'NH{q', 17
    if not msg.sender:
        revert with 0, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 -= arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)].field_0 - arg2), msg.sender, arg1);
    return 1
}

function increaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if allowance[address(msg.sender)][address(arg1)].field_0 > -arg2 - 1:
        revert with 'NH{q', 17
    if allowance[address(msg.sender)][address(arg1)].field_0 + arg2 < allowance[address(msg.sender)][address(arg1)].field_0:
        revert with 0, 'SafeMath: addition overflow'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 += arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)].field_0 + arg2), msg.sender, arg1);
    return 1
}

function name() {
    if bool(stor4.length):
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 'NH{q', 34
        if bool(stor4.length):
            if bool(stor4.length) == stor4.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor4.length.field_1:
                if 31 < stor4.length.field_1:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while stor4.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)])
                mem[128] = 256 * stor4.length.field_8
        else:
            if bool(stor4.length) == stor4.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor4.length.field_1:
                if 31 < stor4.length.field_1:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while stor4.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)])
                mem[128] = 256 * stor4.length.field_8
        mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]
        if ceil32(stor4.length.field_1) > stor4.length.field_1:
            mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0
        return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), 
    if bool(stor4.length) == stor4.length.field_1 < 32:
        revert with 'NH{q', 34
    if bool(stor4.length):
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor4.length.field_1:
            if 31 < stor4.length.field_1:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while stor4.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    else:
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor4.length.field_1:
            if 31 < stor4.length.field_1:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while stor4.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]
    if ceil32(stor4.length.field_1) > stor4.length.field_1:
        mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0
    return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), 
}

function symbol() {
    if bool(stor5.length):
        if bool(stor5.length) == stor5.length.field_1 < 32:
            revert with 'NH{q', 34
        if bool(stor5.length):
            if bool(stor5.length) == stor5.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor5.length.field_1:
                if 31 < stor5.length.field_1:
                    mem[128] = uint256(stor5.field_0)
                    idx = 128
                    s = 0
                    while stor5.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor5[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor5.length.field_1), data=mem[128 len ceil32(stor5.length.field_1)])
                mem[128] = 256 * stor5.length.field_8
        else:
            if bool(stor5.length) == stor5.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor5.length.field_1:
                if 31 < stor5.length.field_1:
                    mem[128] = uint256(stor5.field_0)
                    idx = 128
                    s = 0
                    while stor5.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor5[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor5.length.field_1), data=mem[128 len ceil32(stor5.length.field_1)])
                mem[128] = 256 * stor5.length.field_8
        mem[ceil32(stor5.length.field_1) + 192 len ceil32(stor5.length.field_1)] = mem[128 len ceil32(stor5.length.field_1)]
        if ceil32(stor5.length.field_1) > stor5.length.field_1:
            mem[ceil32(stor5.length.field_1) + stor5.length.field_1 + 192] = 0
        return Array(len=2 * Mask(256, -1, stor5.length.field_1), data=mem[128 len ceil32(stor5.length.field_1)], mem[(2 * ceil32(stor5.length.field_1)) + 192 len 2 * ceil32(stor5.length.field_1)]), 
    if bool(stor5.length) == stor5.length.field_1 < 32:
        revert with 'NH{q', 34
    if bool(stor5.length):
        if bool(stor5.length) == stor5.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor5.length.field_1:
            if 31 < stor5.length.field_1:
                mem[128] = uint256(stor5.field_0)
                idx = 128
                s = 0
                while stor5.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor5[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor5.length % 128, data=mem[128 len ceil32(stor5.length.field_1)])
            mem[128] = 256 * stor5.length.field_8
    else:
        if bool(stor5.length) == stor5.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor5.length.field_1:
            if 31 < stor5.length.field_1:
                mem[128] = uint256(stor5.field_0)
                idx = 128
                s = 0
                while stor5.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor5[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor5.length % 128, data=mem[128 len ceil32(stor5.length.field_1)])
            mem[128] = 256 * stor5.length.field_8
    mem[ceil32(stor5.length.field_1) + 192 len ceil32(stor5.length.field_1)] = mem[128 len ceil32(stor5.length.field_1)]
    if ceil32(stor5.length.field_1) > stor5.length.field_1:
        mem[ceil32(stor5.length.field_1) + stor5.length.field_1 + 192] = 0
    return Array(len=stor5.length % 128, data=mem[128 len ceil32(stor5.length.field_1)], mem[(2 * ceil32(stor5.length.field_1)) + 192 len 2 * ceil32(stor5.length.field_1)]), 
}

function transfer(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if arg2 <= 0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Transfer amount must be greater than zero'
    if msg.sender == owner:
        if arg1 != uniswapV2PairAddress:
            if stor12[address(msg.sender)]:
                if not msg.sender:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                if not arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                if arg2 > balanceOf[address(msg.sender)]:
                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                if balanceOf[address(msg.sender)] < arg2:
                    revert with 'NH{q', 17
                balanceOf[address(msg.sender)] -= arg2
                if balanceOf[address(arg1)] > -arg2 - 1:
                    revert with 'NH{q', 17
                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(arg1)] += arg2
                emit Transfer(arg2, msg.sender, arg1);
            else:
                if stor12[address(arg1)]:
                    if not msg.sender:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < arg2:
                        revert with 'NH{q', 17
                    balanceOf[address(msg.sender)] -= arg2
                    if balanceOf[address(arg1)] > -arg2 - 1:
                        revert with 'NH{q', 17
                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] += arg2
                    emit Transfer(arg2, msg.sender, arg1);
                else:
                    if totalFees <= 0:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if not arg2:
                            if not arg2:
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < 0:
                                    revert with 'NH{q', 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] > -1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(0, msg.sender, this.address);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] > -1:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] < balanceOf[57005]:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(0, msg.sender, 57005);
                                emit TokenBurn(0, msg.sender);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if arg2 and stor17 > -1 / arg2:
                                    revert with 'NH{q', 17
                                if not arg2:
                                    revert with 'NH{q', 18
                                if arg2 * stor17 / arg2 != stor17:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if 0 > -(arg2 * stor17 / 100) - 1:
                                    revert with 'NH{q', 17
                                if arg2 * stor17 / 100 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if arg2 * stor17 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < arg2 * stor17 / 100:
                                    revert with 'NH{q', 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] > -1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(0, msg.sender, this.address);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[57005] += arg2 * stor17 / 100
                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                        else:
                            if arg2 and stor15 > -1 / arg2:
                                revert with 'NH{q', 17
                            if not arg2:
                                revert with 'NH{q', 18
                            if arg2 * stor15 / arg2 != stor15:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                            if not arg2:
                                if arg2 * stor15 / 100 > -1:
                                    revert with 'NH{q', 17
                                if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                    revert with 0, 'SafeMath: addition overflow'
                                if arg2 * stor15 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < arg2 * stor15 / 100:
                                    revert with 'NH{q', 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] > -1:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] < balanceOf[57005]:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(0, msg.sender, 57005);
                                emit TokenBurn(0, msg.sender);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                            else:
                                if arg2 and stor17 > -1 / arg2:
                                    revert with 'NH{q', 17
                                if not arg2:
                                    revert with 'NH{q', 18
                                if arg2 * stor17 / arg2 != stor17:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                    revert with 'NH{q', 17
                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                    revert with 'NH{q', 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[57005] += arg2 * stor17 / 100
                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
        else:
            if stor23:
                if stor12[address(msg.sender)]:
                    if not msg.sender:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < arg2:
                        revert with 'NH{q', 17
                    balanceOf[address(msg.sender)] -= arg2
                    if balanceOf[address(arg1)] > -arg2 - 1:
                        revert with 'NH{q', 17
                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] += arg2
                    emit Transfer(arg2, msg.sender, arg1);
                else:
                    if stor12[address(arg1)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if totalFees <= 0:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if not arg2:
                                if not arg2:
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < 0:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, 57005);
                                    emit TokenBurn(0, msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if arg2 and stor17 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor17 / arg2 != stor17:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if 0 > -(arg2 * stor17 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if arg2 * stor17 / 100 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if arg2 * stor17 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 * stor17 / 100:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[57005] += arg2 * stor17 / 100
                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                    emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                            else:
                                if arg2 and stor15 > -1 / arg2:
                                    revert with 'NH{q', 17
                                if not arg2:
                                    revert with 'NH{q', 18
                                if arg2 * stor15 / arg2 != stor15:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                if not arg2:
                                    if arg2 * stor15 / 100 > -1:
                                        revert with 'NH{q', 17
                                    if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if arg2 * stor15 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 * stor15 / 100:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, 57005);
                                    emit TokenBurn(0, msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                    emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and stor17 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor17 / arg2 != stor17:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[57005] += arg2 * stor17 / 100
                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                    emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
            else:
                if balanceOf[address(this.address)] < liquifyThreshhold:
                    if stor12[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor12[address(arg1)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if totalFees <= 0:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if not arg2:
                                    if not arg2:
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < 0:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and stor17 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor17 / arg2 != stor17:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if 0 > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor17 / 100 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor17 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor17 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * stor17 / 100
                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                        emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and stor15 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor15 / arg2 != stor15:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    if not arg2:
                                        if arg2 * stor15 / 100 > -1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor15 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor15 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                        emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor17 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor17 / arg2 != stor17:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * stor17 / 100
                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                        emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                else:
                    if stor15 <= 0:
                        if stor12[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor12[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if totalFees <= 0:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if not arg2:
                                            if 0 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < 0:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and stor17 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor17 / arg2 != stor17:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if 0 > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor17 / 100 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor17 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor17 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                            if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * stor17 / 100
                                            emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                            emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor15 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor15 / arg2 != stor15:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        if not arg2:
                                            if arg2 * stor15 / 100 > -1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor15 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor15 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor15 / 100
                                            emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                            emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor17 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor17 / arg2 != stor17:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor15 / 100
                                            emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                            if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * stor17 / 100
                                            emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                            emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                    else:
                        if msg.sender == owner:
                            if stor12[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor12[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if totalFees <= 0:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if 0 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor17 / 100 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor17 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor15 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor15 / arg2 != stor15:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            if not arg2:
                                                if arg2 * stor15 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor15 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                        else:
                            if arg1 == owner:
                                if stor12[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor12[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and stor17 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor17 / arg2 != stor17:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if 0 > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor17 / 100 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor17 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * stor17 / 100
                                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor15 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor15 / arg2 != stor15:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                if not arg2:
                                                    if arg2 * stor15 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor15 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor17 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor17 / arg2 != stor17:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * stor17 / 100
                                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                            else:
                                stor23 = 1
                                if not balanceOf[address(this.address)]:
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    if stor15 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor15:
                                        revert with 'NH{q', 18
                                    if balanceOf[address(this.address)]:
                                        if balanceOf[address(this.address)] and stor18 > -1 / balanceOf[address(this.address)]:
                                            revert with 'NH{q', 17
                                        if not balanceOf[address(this.address)]:
                                            revert with 'NH{q', 18
                                        if balanceOf[address(this.address)] * stor18 / balanceOf[address(this.address)] != stor18:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[160] = 26
                                        mem[192] = 'SafeMath: division by zero'
                                        if stor15 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor15:
                                            revert with 'NH{q', 18
                                        mem[224] = 26
                                        mem[256] = 'SafeMath: division by zero'
                                        mem[288] = 30
                                        mem[320] = 'SafeMath: subtraction overflow'
                                        if 0 / stor15 / 2 > 0 / stor15:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if 0 / stor15 < 0 / stor15 / 2:
                                            revert with 'NH{q', 17
                                        mem[352] = 2
                                        mem[384] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[448] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[416] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor20].field_0 = 0 / stor15 / 2
                                        allowance[address(this.address)][stor20].field_255 = 0
                                        emit Approval((0 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(return_data.size) + 452] = 0 / stor15 / 2
                                        idx = 0
                                        s = 384
                                        t = ceil32(return_data.size) + 644
                                        while idx < 2:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, 0 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(return_data.size) + 448] = 30
                                        mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 'NH{q', 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor20].field_0 = (0 / stor15) - (0 / stor15 / 2)
                                        emit Approval(((0 / stor15) - (0 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 580] = 0
                                        mem[ceil32(return_data.size) + 612] = 0
                                        mem[ceil32(return_data.size) + 644] = stor1
                                        mem[ceil32(return_data.size) + 676] = block.timestamp
                                        call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), (0 / stor15) - (0 / stor15 / 2), 0, 0, stor1, block.timestamp
                                        mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        require ext_call.return_data[32] == ext_call.return_data[32]
                                        require ext_call.return_data[64] == ext_call.return_data[64]
                                        mem[(2 * ceil32(return_data.size)) + 512] = 3
                                        mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = (4 * ceil32(return_data.size)) + 640
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 11)
                                        allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor18 / stor15
                                        emit Approval((balanceOf[address(this.address)] * stor18 / stor15), this.address, uniswapV2RouterAddress);
                                        mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                        mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * stor18 / stor15
                                        mem[(4 * ceil32(return_data.size)) + 676] = 0
                                        mem[(4 * ceil32(return_data.size)) + 708] = 160
                                        mem[(4 * ceil32(return_data.size)) + 804] = 3
                                        idx = 0
                                        s = (2 * ceil32(return_data.size)) + 544
                                        t = (4 * ceil32(return_data.size)) + 836
                                        while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                        mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)] * stor18 / stor15, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        staticcall sub_e5148bd6Address.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        mem[(4 * ceil32(return_data.size)) + 644] = stor8
                                        mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                        call sub_e5148bd6Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                        mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        stor23 = 0
                                        if stor12[address(msg.sender)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if stor12[address(arg1)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor17 / 100 < 0:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * stor17 / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                    return 1
                                        else:
                                            if arg2 and stor15 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor15 / arg2 != stor15:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg2:
                                                if arg2 * stor15 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * stor15 / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                    return 1
                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                        mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                        mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                        revert with memory
                                          from (8 * ceil32(return_data.size)) + 1120
                                           len (13 * ceil32(return_data.size)) + 100
                                    mem[160] = 26
                                    mem[192] = 'SafeMath: division by zero'
                                    if stor15 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor15:
                                        revert with 'NH{q', 18
                                    mem[224] = 26
                                    mem[256] = 'SafeMath: division by zero'
                                    mem[288] = 30
                                    mem[320] = 'SafeMath: subtraction overflow'
                                    if 0 / stor15 / 2 > 0 / stor15:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if 0 / stor15 < 0 / stor15 / 2:
                                        revert with 'NH{q', 17
                                    mem[352] = 2
                                    mem[384] = this.address
                                    staticcall uniswapV2RouterAddress.WETH() with:
                                            gas gas_remaining wei
                                    mem[448] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[416] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor20].field_0 = 0 / stor15 / 2
                                    allowance[address(this.address)][stor20].field_255 = 0
                                    emit Approval((0 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(return_data.size) + 452] = 0 / stor15 / 2
                                    idx = 0
                                    s = 384
                                    t = ceil32(return_data.size) + 644
                                    while idx < 2:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(return_data.size) + 448] = 30
                                    mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 'NH{q', 17
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor20].field_0 = (0 / stor15) - (0 / stor15 / 2)
                                    emit Approval(((0 / stor15) - (0 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 580] = 0
                                    mem[ceil32(return_data.size) + 612] = 0
                                    mem[ceil32(return_data.size) + 644] = stor1
                                    mem[ceil32(return_data.size) + 676] = block.timestamp
                                    call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args address(this.address), (0 / stor15) - (0 / stor15 / 2), 0, 0, stor1, block.timestamp
                                    mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require ext_call.return_data[0] == ext_call.return_data[0]
                                    require ext_call.return_data[32] == ext_call.return_data[32]
                                    require ext_call.return_data[64] == ext_call.return_data[64]
                                    mem[(2 * ceil32(return_data.size)) + 512] = 3
                                    mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                    staticcall uniswapV2RouterAddress.WETH() with:
                                            gas gas_remaining wei
                                    mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = (4 * ceil32(return_data.size)) + 640
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                    mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 11)
                                    allowance[address(this.address)][stor20].field_0 = 0 / stor15
                                    emit Approval((0 / stor15), this.address, uniswapV2RouterAddress);
                                    mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor15
                                    mem[(4 * ceil32(return_data.size)) + 676] = 0
                                    mem[(4 * ceil32(return_data.size)) + 708] = 160
                                    mem[(4 * ceil32(return_data.size)) + 804] = 3
                                    idx = 0
                                    s = (2 * ceil32(return_data.size)) + 544
                                    t = (4 * ceil32(return_data.size)) + 836
                                    while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                    mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[mem[64] + 4] = this.address
                                    staticcall sub_e5148bd6Address.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    _10811 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10822 = mem[_10811]
                                    require mem[_10811] == mem[_10811]
                                    mem[mem[64] + 4] = stor8
                                    mem[mem[64] + 36] = _10822
                                    call sub_e5148bd6Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor8, _10822
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10923 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10923] == bool(mem[_10923])
                                    stor23 = 0
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if stor12[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        _10979 = mem[64]
                                        mem[64] = mem[64] + 96
                                        mem[_10979] = 38
                                        mem[_10979 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 38
                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10979 + 70 len 26]
                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        mem[0] = arg1
                                        mem[32] = 12
                                        if stor12[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _11019 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_11019] = 38
                                            mem[_11019 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11019 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _11060 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_11060] = 38
                                                mem[_11060 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11060 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    _11106 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11106] = 26
                                                    mem[_11106 + 32] = 'SafeMath: division by zero'
                                                    if not arg2:
                                                        _11413 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11413] = 26
                                                        mem[_11413 + 32] = 'SafeMath: division by zero'
                                                        _11683 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11683] = 30
                                                        mem[_11683 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11823 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11823] = 38
                                                        mem[_11823 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11823 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 10
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12526 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12526] = 38
                                                        mem[_12526 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12526 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 10
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _13399 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_13399] = 38
                                                        mem[_13399 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13399 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor17 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor17 / arg2 != stor17:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _11629 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11629] = 26
                                                        mem[_11629 + 32] = 'SafeMath: division by zero'
                                                        if 0 > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor17 / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _11852 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11852] = 30
                                                        mem[_11852 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * stor17 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12125 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12125] = 38
                                                        mem[_12125 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12125 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 10
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12895 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12895] = 38
                                                        mem[_12895 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12895 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 10
                                                        balanceOf[57005] += arg2 * stor17 / 100
                                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _13848 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_13848] = 38
                                                        mem[_13848 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13848 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor15 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor15 / arg2 != stor15:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11370 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11370] = 26
                                                    mem[_11370 + 32] = 'SafeMath: division by zero'
                                                    if not arg2:
                                                        _11628 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11628] = 26
                                                        mem[_11628 + 32] = 'SafeMath: division by zero'
                                                        if arg2 * stor15 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _11851 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11851] = 30
                                                        mem[_11851 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * stor15 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12122 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12122] = 38
                                                        mem[_12122 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12122 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 10
                                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12893 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12893] = 38
                                                        mem[_12893 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12893 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 10
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _13845 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_13845] = 38
                                                        mem[_13845 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13845 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor17 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor17 / arg2 != stor17:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _11753 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11753] = 26
                                                        mem[_11753 + 32] = 'SafeMath: division by zero'
                                                        if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _12179 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_12179] = 30
                                                        mem[_12179 + 32] = 'SafeMath: subtraction overflow'
                                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12523 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12523] = 38
                                                        mem[_12523 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12523 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 10
                                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _13221 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_13221] = 38
                                                        mem[_13221 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13221 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 10
                                                        balanceOf[57005] += arg2 * stor17 / 100
                                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14493 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14493] = 38
                                                        mem[_14493 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14493 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                else:
                                    if balanceOf[address(this.address)] and stor16 > -1 / balanceOf[address(this.address)]:
                                        revert with 'NH{q', 17
                                    if not balanceOf[address(this.address)]:
                                        revert with 'NH{q', 18
                                    if balanceOf[address(this.address)] * stor16 / balanceOf[address(this.address)] != stor16:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    if stor15 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor15:
                                        revert with 'NH{q', 18
                                    if not balanceOf[address(this.address)]:
                                        mem[160] = 26
                                        mem[192] = 'SafeMath: division by zero'
                                        if stor15 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor15:
                                            revert with 'NH{q', 18
                                        mem[224] = 26
                                        mem[256] = 'SafeMath: division by zero'
                                        mem[288] = 30
                                        mem[320] = 'SafeMath: subtraction overflow'
                                        if balanceOf[address(this.address)] * stor16 / stor15 / 2 > balanceOf[address(this.address)] * stor16 / stor15:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if balanceOf[address(this.address)] * stor16 / stor15 < balanceOf[address(this.address)] * stor16 / stor15 / 2:
                                            revert with 'NH{q', 17
                                        mem[352] = 2
                                        mem[384] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[448] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[416] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                        allowance[address(this.address)][stor20].field_255 = 0
                                        emit Approval((balanceOf[address(this.address)] * stor16 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                        idx = 0
                                        s = 384
                                        t = ceil32(return_data.size) + 644
                                        while idx < 2:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, balanceOf[address(this.address)] * stor16 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(return_data.size) + 448] = 30
                                        mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 'NH{q', 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor20].field_0 = (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)
                                        emit Approval(((balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 580] = 0
                                        mem[ceil32(return_data.size) + 612] = 0
                                        mem[ceil32(return_data.size) + 644] = stor1
                                        mem[ceil32(return_data.size) + 676] = block.timestamp
                                        call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2), 0, 0, stor1, block.timestamp
                                        mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        require ext_call.return_data[32] == ext_call.return_data[32]
                                        require ext_call.return_data[64] == ext_call.return_data[64]
                                        mem[(2 * ceil32(return_data.size)) + 512] = 3
                                        mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = (4 * ceil32(return_data.size)) + 640
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 11)
                                        allowance[address(this.address)][stor20].field_0 = 0 / stor15
                                        emit Approval((0 / stor15), this.address, uniswapV2RouterAddress);
                                        mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                        mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor15
                                        mem[(4 * ceil32(return_data.size)) + 676] = 0
                                        mem[(4 * ceil32(return_data.size)) + 708] = 160
                                        mem[(4 * ceil32(return_data.size)) + 804] = 3
                                        idx = 0
                                        s = (2 * ceil32(return_data.size)) + 544
                                        t = (4 * ceil32(return_data.size)) + 836
                                        while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                        mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / stor15, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        staticcall sub_e5148bd6Address.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        mem[(4 * ceil32(return_data.size)) + 644] = stor8
                                        mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                        call sub_e5148bd6Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                        mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        stor23 = 0
                                        if stor12[address(msg.sender)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if stor12[address(arg1)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor17 / 100 < 0:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * stor17 / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                    return 1
                                        else:
                                            if arg2 and stor15 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor15 / arg2 != stor15:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg2:
                                                if arg2 * stor15 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * stor15 / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                    return 1
                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                        mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                        mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                        revert with memory
                                          from (8 * ceil32(return_data.size)) + 1120
                                           len (13 * ceil32(return_data.size)) + 100
                                    if balanceOf[address(this.address)] and stor18 > -1 / balanceOf[address(this.address)]:
                                        revert with 'NH{q', 17
                                    if not balanceOf[address(this.address)]:
                                        revert with 'NH{q', 18
                                    if balanceOf[address(this.address)] * stor18 / balanceOf[address(this.address)] != stor18:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    mem[160] = 26
                                    mem[192] = 'SafeMath: division by zero'
                                    if stor15 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor15:
                                        revert with 'NH{q', 18
                                    mem[224] = 26
                                    mem[256] = 'SafeMath: division by zero'
                                    mem[288] = 30
                                    mem[320] = 'SafeMath: subtraction overflow'
                                    if balanceOf[address(this.address)] * stor16 / stor15 / 2 > balanceOf[address(this.address)] * stor16 / stor15:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if balanceOf[address(this.address)] * stor16 / stor15 < balanceOf[address(this.address)] * stor16 / stor15 / 2:
                                        revert with 'NH{q', 17
                                    mem[352] = 2
                                    mem[384] = this.address
                                    staticcall uniswapV2RouterAddress.WETH() with:
                                            gas gas_remaining wei
                                    mem[448] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[416] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                    allowance[address(this.address)][stor20].field_255 = 0
                                    emit Approval((balanceOf[address(this.address)] * stor16 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                    idx = 0
                                    s = 384
                                    t = ceil32(return_data.size) + 644
                                    while idx < 2:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, balanceOf[address(this.address)] * stor16 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(return_data.size) + 448] = 30
                                    mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 'NH{q', 17
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor20].field_0 = (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)
                                    emit Approval(((balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 580] = 0
                                    mem[ceil32(return_data.size) + 612] = 0
                                    mem[ceil32(return_data.size) + 644] = stor1
                                    mem[ceil32(return_data.size) + 676] = block.timestamp
                                    call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args address(this.address), (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2), 0, 0, stor1, block.timestamp
                                    mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require ext_call.return_data[0] == ext_call.return_data[0]
                                    require ext_call.return_data[32] == ext_call.return_data[32]
                                    require ext_call.return_data[64] == ext_call.return_data[64]
                                    mem[(2 * ceil32(return_data.size)) + 512] = 3
                                    mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                    staticcall uniswapV2RouterAddress.WETH() with:
                                            gas gas_remaining wei
                                    mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = (4 * ceil32(return_data.size)) + 640
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                    mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 11)
                                    allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor18 / stor15
                                    emit Approval((balanceOf[address(this.address)] * stor18 / stor15), this.address, uniswapV2RouterAddress);
                                    mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * stor18 / stor15
                                    mem[(4 * ceil32(return_data.size)) + 676] = 0
                                    mem[(4 * ceil32(return_data.size)) + 708] = 160
                                    mem[(4 * ceil32(return_data.size)) + 804] = 3
                                    idx = 0
                                    s = (2 * ceil32(return_data.size)) + 544
                                    t = (4 * ceil32(return_data.size)) + 836
                                    while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                    mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[mem[64] + 4] = this.address
                                    staticcall sub_e5148bd6Address.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    _14593 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _14669 = mem[_14593]
                                    require mem[_14593] == mem[_14593]
                                    mem[mem[64] + 4] = stor8
                                    mem[mem[64] + 36] = _14669
                                    call sub_e5148bd6Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor8, _14669
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14877 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_14877] == bool(mem[_14877])
                                    stor23 = 0
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if stor12[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        _14927 = mem[64]
                                        mem[64] = mem[64] + 96
                                        mem[_14927] = 38
                                        mem[_14927 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 38
                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14927 + 70 len 26]
                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        mem[0] = arg1
                                        mem[32] = 12
                                        if stor12[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _14951 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_14951] = 38
                                            mem[_14951 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14951 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _14976 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_14976] = 38
                                                mem[_14976 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14976 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    _15006 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_15006] = 26
                                                    mem[_15006 + 32] = 'SafeMath: division by zero'
                                                    if not arg2:
                                                        _15177 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15177] = 26
                                                        mem[_15177 + 32] = 'SafeMath: division by zero'
                                                        _15335 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15335] = 30
                                                        mem[_15335 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _15395 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15395] = 38
                                                        mem[_15395 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15395 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 10
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _15776 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15776] = 38
                                                        mem[_15776 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15776 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 10
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _16278 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_16278] = 38
                                                        mem[_16278 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16278 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor17 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor17 / arg2 != stor17:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _15301 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15301] = 26
                                                        mem[_15301 + 32] = 'SafeMath: division by zero'
                                                        if 0 > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor17 / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _15414 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15414] = 30
                                                        mem[_15414 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * stor17 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _15548 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15548] = 38
                                                        mem[_15548 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15548 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 10
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _15991 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15991] = 38
                                                        mem[_15991 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15991 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 10
                                                        balanceOf[57005] += arg2 * stor17 / 100
                                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _16572 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_16572] = 38
                                                        mem[_16572 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16572 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor15 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor15 / arg2 != stor15:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _15152 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_15152] = 26
                                                    mem[_15152 + 32] = 'SafeMath: division by zero'
                                                    if not arg2:
                                                        _15300 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15300] = 26
                                                        mem[_15300 + 32] = 'SafeMath: division by zero'
                                                        if arg2 * stor15 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _15413 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15413] = 30
                                                        mem[_15413 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * stor15 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _15545 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15545] = 38
                                                        mem[_15545 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15545 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 10
                                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _15989 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15989] = 38
                                                        mem[_15989 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15989 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 10
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _16569 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_16569] = 38
                                                        mem[_16569 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16569 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor17 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor17 / arg2 != stor17:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _15359 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15359] = 26
                                                        mem[_15359 + 32] = 'SafeMath: division by zero'
                                                        if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _15581 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15581] = 30
                                                        mem[_15581 + 32] = 'SafeMath: subtraction overflow'
                                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _15773 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15773] = 38
                                                        mem[_15773 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15773 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 10
                                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _16181 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_16181] = 38
                                                        mem[_16181 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16181 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 10
                                                        balanceOf[57005] += arg2 * stor17 / 100
                                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _17027 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_17027] = 38
                                                        mem[_17027 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_17027 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
    else:
        if arg1 == owner:
            if arg1 != uniswapV2PairAddress:
                if stor12[address(msg.sender)]:
                    if not msg.sender:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < arg2:
                        revert with 'NH{q', 17
                    balanceOf[address(msg.sender)] -= arg2
                    if balanceOf[address(arg1)] > -arg2 - 1:
                        revert with 'NH{q', 17
                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] += arg2
                    emit Transfer(arg2, msg.sender, arg1);
                else:
                    if stor12[address(arg1)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if totalFees <= 0:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if not arg2:
                                if not arg2:
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < 0:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, 57005);
                                    emit TokenBurn(0, msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if arg2 and stor17 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor17 / arg2 != stor17:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if 0 > -(arg2 * stor17 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if arg2 * stor17 / 100 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if arg2 * stor17 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 * stor17 / 100:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[57005] += arg2 * stor17 / 100
                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                    emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                            else:
                                if arg2 and stor15 > -1 / arg2:
                                    revert with 'NH{q', 17
                                if not arg2:
                                    revert with 'NH{q', 18
                                if arg2 * stor15 / arg2 != stor15:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                if not arg2:
                                    if arg2 * stor15 / 100 > -1:
                                        revert with 'NH{q', 17
                                    if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if arg2 * stor15 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 * stor15 / 100:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, 57005);
                                    emit TokenBurn(0, msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                    emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and stor17 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor17 / arg2 != stor17:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[57005] += arg2 * stor17 / 100
                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                    emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
            else:
                if stor23:
                    if stor12[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor12[address(arg1)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if totalFees <= 0:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if not arg2:
                                    if not arg2:
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < 0:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and stor17 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor17 / arg2 != stor17:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if 0 > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor17 / 100 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor17 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor17 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * stor17 / 100
                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                        emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and stor15 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor15 / arg2 != stor15:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    if not arg2:
                                        if arg2 * stor15 / 100 > -1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor15 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor15 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                        emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor17 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor17 / arg2 != stor17:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * stor17 / 100
                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                        emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                else:
                    if balanceOf[address(this.address)] < liquifyThreshhold:
                        if stor12[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor12[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if totalFees <= 0:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if not arg2:
                                            if 0 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < 0:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and stor17 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor17 / arg2 != stor17:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if 0 > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor17 / 100 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor17 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor17 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                            if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * stor17 / 100
                                            emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                            emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor15 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor15 / arg2 != stor15:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        if not arg2:
                                            if arg2 * stor15 / 100 > -1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor15 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor15 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor15 / 100
                                            emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                            emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor17 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor17 / arg2 != stor17:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor15 / 100
                                            emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                            if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * stor17 / 100
                                            emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                            emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                    else:
                        if stor15 <= 0:
                            if stor12[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor12[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if totalFees <= 0:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if 0 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor17 / 100 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor17 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor15 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor15 / arg2 != stor15:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            if not arg2:
                                                if arg2 * stor15 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor15 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                        else:
                            if msg.sender == owner:
                                if stor12[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor12[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and stor17 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor17 / arg2 != stor17:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if 0 > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor17 / 100 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor17 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * stor17 / 100
                                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor15 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor15 / arg2 != stor15:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                if not arg2:
                                                    if arg2 * stor15 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor15 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor17 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor17 / arg2 != stor17:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * stor17 / 100
                                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                            else:
                                if arg1 == owner:
                                    if stor12[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor12[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    if not arg2:
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor17 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor17 / arg2 != stor17:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if 0 > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor17 / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * stor17 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * stor17 / 100
                                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor15 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor15 / arg2 != stor15:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                    if not arg2:
                                                        if arg2 * stor15 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * stor15 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor17 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor17 / arg2 != stor17:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * stor17 / 100
                                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                else:
                                    stor23 = 1
                                    if not balanceOf[address(this.address)]:
                                        mem[96] = 26
                                        mem[128] = 'SafeMath: division by zero'
                                        if stor15 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor15:
                                            revert with 'NH{q', 18
                                        if not balanceOf[address(this.address)]:
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor15 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor15:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if 0 / stor15 / 2 > 0 / stor15:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if 0 / stor15 < 0 / stor15 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor20].field_0 = 0 / stor15 / 2
                                            allowance[address(this.address)][stor20].field_255 = 0
                                            emit Approval((0 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = 0 / stor15 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, 0 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor20].field_0 = (0 / stor15) - (0 / stor15 / 2)
                                            emit Approval(((0 / stor15) - (0 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = stor1
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (0 / stor15) - (0 / stor15 / 2), 0, 0, stor1, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 11)
                                            allowance[address(this.address)][stor20].field_0 = 0 / stor15
                                            emit Approval((0 / stor15), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor15
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0 / stor15, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                        else:
                                            if balanceOf[address(this.address)] and stor18 > -1 / balanceOf[address(this.address)]:
                                                revert with 'NH{q', 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)] * stor18 / balanceOf[address(this.address)] != stor18:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor15 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor15:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if 0 / stor15 / 2 > 0 / stor15:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if 0 / stor15 < 0 / stor15 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor20].field_0 = 0 / stor15 / 2
                                            allowance[address(this.address)][stor20].field_255 = 0
                                            emit Approval((0 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = 0 / stor15 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, 0 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor20].field_0 = (0 / stor15) - (0 / stor15 / 2)
                                            emit Approval(((0 / stor15) - (0 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = stor1
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (0 / stor15) - (0 / stor15 / 2), 0, 0, stor1, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 11)
                                            allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor18 / stor15
                                            emit Approval((balanceOf[address(this.address)] * stor18 / stor15), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * stor18 / stor15
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)] * stor18 / stor15, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        staticcall sub_e5148bd6Address.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        mem[(4 * ceil32(return_data.size)) + 644] = stor8
                                        mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                        call sub_e5148bd6Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                        mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        stor23 = 0
                                        if stor12[address(msg.sender)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if stor12[address(arg1)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor17 / 100 < 0:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * stor17 / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                    return 1
                                        else:
                                            if arg2 and stor15 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor15 / arg2 != stor15:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg2:
                                                if arg2 * stor15 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * stor15 / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                    return 1
                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                        mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                        mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                        revert with memory
                                          from (8 * ceil32(return_data.size)) + 1120
                                           len (13 * ceil32(return_data.size)) + 100
                                    if balanceOf[address(this.address)] and stor16 > -1 / balanceOf[address(this.address)]:
                                        revert with 'NH{q', 17
                                    if not balanceOf[address(this.address)]:
                                        revert with 'NH{q', 18
                                    if balanceOf[address(this.address)] * stor16 / balanceOf[address(this.address)] != stor16:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    if stor15 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor15:
                                        revert with 'NH{q', 18
                                    if not balanceOf[address(this.address)]:
                                        mem[160] = 26
                                        mem[192] = 'SafeMath: division by zero'
                                        if stor15 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor15:
                                            revert with 'NH{q', 18
                                        mem[224] = 26
                                        mem[256] = 'SafeMath: division by zero'
                                        mem[288] = 30
                                        mem[320] = 'SafeMath: subtraction overflow'
                                        if balanceOf[address(this.address)] * stor16 / stor15 / 2 > balanceOf[address(this.address)] * stor16 / stor15:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if balanceOf[address(this.address)] * stor16 / stor15 < balanceOf[address(this.address)] * stor16 / stor15 / 2:
                                            revert with 'NH{q', 17
                                        mem[352] = 2
                                        mem[384] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[448] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[416] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                        allowance[address(this.address)][stor20].field_255 = 0
                                        emit Approval((balanceOf[address(this.address)] * stor16 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                        idx = 0
                                        s = 384
                                        t = ceil32(return_data.size) + 644
                                        while idx < 2:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, balanceOf[address(this.address)] * stor16 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(return_data.size) + 448] = 30
                                        mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 'NH{q', 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor20].field_0 = (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)
                                        emit Approval(((balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 580] = 0
                                        mem[ceil32(return_data.size) + 612] = 0
                                        mem[ceil32(return_data.size) + 644] = stor1
                                        mem[ceil32(return_data.size) + 676] = block.timestamp
                                        call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2), 0, 0, stor1, block.timestamp
                                        mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        require ext_call.return_data[32] == ext_call.return_data[32]
                                        require ext_call.return_data[64] == ext_call.return_data[64]
                                        mem[(2 * ceil32(return_data.size)) + 512] = 3
                                        mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = (4 * ceil32(return_data.size)) + 640
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 11)
                                        allowance[address(this.address)][stor20].field_0 = 0 / stor15
                                        emit Approval((0 / stor15), this.address, uniswapV2RouterAddress);
                                        mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                        mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor15
                                        mem[(4 * ceil32(return_data.size)) + 676] = 0
                                        mem[(4 * ceil32(return_data.size)) + 708] = 160
                                        mem[(4 * ceil32(return_data.size)) + 804] = 3
                                        idx = 0
                                        s = (2 * ceil32(return_data.size)) + 544
                                        t = (4 * ceil32(return_data.size)) + 836
                                        while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                        mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / stor15, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        staticcall sub_e5148bd6Address.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        mem[(4 * ceil32(return_data.size)) + 644] = stor8
                                        mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                        call sub_e5148bd6Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                        mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        stor23 = 0
                                        if stor12[address(msg.sender)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if stor12[address(arg1)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor17 / 100 < 0:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * stor17 / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                    return 1
                                        else:
                                            if arg2 and stor15 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor15 / arg2 != stor15:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg2:
                                                if arg2 * stor15 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * stor15 / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                    return 1
                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                        mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                        mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                        revert with memory
                                          from (8 * ceil32(return_data.size)) + 1120
                                           len (13 * ceil32(return_data.size)) + 100
                                    if balanceOf[address(this.address)] and stor18 > -1 / balanceOf[address(this.address)]:
                                        revert with 'NH{q', 17
                                    if not balanceOf[address(this.address)]:
                                        revert with 'NH{q', 18
                                    if balanceOf[address(this.address)] * stor18 / balanceOf[address(this.address)] != stor18:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    mem[160] = 26
                                    mem[192] = 'SafeMath: division by zero'
                                    if stor15 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor15:
                                        revert with 'NH{q', 18
                                    mem[224] = 26
                                    mem[256] = 'SafeMath: division by zero'
                                    mem[288] = 30
                                    mem[320] = 'SafeMath: subtraction overflow'
                                    if balanceOf[address(this.address)] * stor16 / stor15 / 2 > balanceOf[address(this.address)] * stor16 / stor15:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if balanceOf[address(this.address)] * stor16 / stor15 < balanceOf[address(this.address)] * stor16 / stor15 / 2:
                                        revert with 'NH{q', 17
                                    mem[352] = 2
                                    mem[384] = this.address
                                    staticcall uniswapV2RouterAddress.WETH() with:
                                            gas gas_remaining wei
                                    mem[448] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[416] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                    allowance[address(this.address)][stor20].field_255 = 0
                                    emit Approval((balanceOf[address(this.address)] * stor16 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                    idx = 0
                                    s = 384
                                    t = ceil32(return_data.size) + 644
                                    while idx < 2:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, balanceOf[address(this.address)] * stor16 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(return_data.size) + 448] = 30
                                    mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 'NH{q', 17
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor20].field_0 = (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)
                                    emit Approval(((balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 580] = 0
                                    mem[ceil32(return_data.size) + 612] = 0
                                    mem[ceil32(return_data.size) + 644] = stor1
                                    mem[ceil32(return_data.size) + 676] = block.timestamp
                                    call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args address(this.address), (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2), 0, 0, stor1, block.timestamp
                                    mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require ext_call.return_data[0] == ext_call.return_data[0]
                                    require ext_call.return_data[32] == ext_call.return_data[32]
                                    require ext_call.return_data[64] == ext_call.return_data[64]
                                    mem[(2 * ceil32(return_data.size)) + 512] = 3
                                    mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                    staticcall uniswapV2RouterAddress.WETH() with:
                                            gas gas_remaining wei
                                    mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = (4 * ceil32(return_data.size)) + 640
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                    mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 11)
                                    allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor18 / stor15
                                    emit Approval((balanceOf[address(this.address)] * stor18 / stor15), this.address, uniswapV2RouterAddress);
                                    mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * stor18 / stor15
                                    mem[(4 * ceil32(return_data.size)) + 676] = 0
                                    mem[(4 * ceil32(return_data.size)) + 708] = 160
                                    mem[(4 * ceil32(return_data.size)) + 804] = 3
                                    idx = 0
                                    s = (2 * ceil32(return_data.size)) + 544
                                    t = (4 * ceil32(return_data.size)) + 836
                                    while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                    mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[mem[64] + 4] = this.address
                                    staticcall sub_e5148bd6Address.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    _14612 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _14673 = mem[_14612]
                                    require mem[_14612] == mem[_14612]
                                    mem[mem[64] + 4] = stor8
                                    mem[mem[64] + 36] = _14673
                                    call sub_e5148bd6Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor8, _14673
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14878 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_14878] == bool(mem[_14878])
                                    stor23 = 0
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if stor12[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        _14931 = mem[64]
                                        mem[64] = mem[64] + 96
                                        mem[_14931] = 38
                                        mem[_14931 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 38
                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14931 + 70 len 26]
                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        mem[0] = arg1
                                        mem[32] = 12
                                        if stor12[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _14955 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_14955] = 38
                                            mem[_14955 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14955 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _14980 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_14980] = 38
                                                mem[_14980 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14980 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    _15008 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_15008] = 26
                                                    mem[_15008 + 32] = 'SafeMath: division by zero'
                                                    if not arg2:
                                                        _15182 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15182] = 26
                                                        mem[_15182 + 32] = 'SafeMath: division by zero'
                                                        _15336 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15336] = 30
                                                        mem[_15336 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _15398 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15398] = 38
                                                        mem[_15398 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15398 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 10
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _15781 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15781] = 38
                                                        mem[_15781 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15781 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 10
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _16282 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_16282] = 38
                                                        mem[_16282 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16282 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor17 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor17 / arg2 != stor17:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _15304 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15304] = 26
                                                        mem[_15304 + 32] = 'SafeMath: division by zero'
                                                        if 0 > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor17 / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _15416 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15416] = 30
                                                        mem[_15416 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * stor17 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _15554 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15554] = 38
                                                        mem[_15554 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15554 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 10
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _15995 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15995] = 38
                                                        mem[_15995 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15995 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 10
                                                        balanceOf[57005] += arg2 * stor17 / 100
                                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _16578 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_16578] = 38
                                                        mem[_16578 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16578 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor15 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor15 / arg2 != stor15:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _15156 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_15156] = 26
                                                    mem[_15156 + 32] = 'SafeMath: division by zero'
                                                    if not arg2:
                                                        _15303 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15303] = 26
                                                        mem[_15303 + 32] = 'SafeMath: division by zero'
                                                        if arg2 * stor15 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _15415 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15415] = 30
                                                        mem[_15415 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * stor15 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _15551 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15551] = 38
                                                        mem[_15551 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15551 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 10
                                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _15993 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15993] = 38
                                                        mem[_15993 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15993 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 10
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _16575 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_16575] = 38
                                                        mem[_16575 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16575 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor17 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor17 / arg2 != stor17:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _15360 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15360] = 26
                                                        mem[_15360 + 32] = 'SafeMath: division by zero'
                                                        if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _15582 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15582] = 30
                                                        mem[_15582 + 32] = 'SafeMath: subtraction overflow'
                                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _15778 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15778] = 38
                                                        mem[_15778 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15778 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 10
                                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _16183 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_16183] = 38
                                                        mem[_16183 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16183 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 10
                                                        balanceOf[57005] += arg2 * stor17 / 100
                                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _17030 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_17030] = 38
                                                        mem[_17030 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_17030 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
        else:
            if stor13[address(arg1)]:
                if arg1 != uniswapV2PairAddress:
                    if stor12[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor12[address(arg1)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if totalFees <= 0:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if not arg2:
                                    if not arg2:
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < 0:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and stor17 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor17 / arg2 != stor17:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if 0 > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor17 / 100 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor17 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor17 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * stor17 / 100
                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                        emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and stor15 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor15 / arg2 != stor15:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    if not arg2:
                                        if arg2 * stor15 / 100 > -1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor15 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor15 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                        emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor17 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor17 / arg2 != stor17:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * stor17 / 100
                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                        emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                else:
                    if stor23:
                        if stor12[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor12[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if totalFees <= 0:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if not arg2:
                                            if 0 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < 0:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and stor17 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor17 / arg2 != stor17:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if 0 > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor17 / 100 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor17 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor17 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                            if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * stor17 / 100
                                            emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                            emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor15 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor15 / arg2 != stor15:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        if not arg2:
                                            if arg2 * stor15 / 100 > -1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor15 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor15 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor15 / 100
                                            emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                            emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor17 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor17 / arg2 != stor17:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor15 / 100
                                            emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                            if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * stor17 / 100
                                            emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                            emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                    else:
                        if balanceOf[address(this.address)] < liquifyThreshhold:
                            if stor12[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor12[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if totalFees <= 0:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if 0 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor17 / 100 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor17 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor15 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor15 / arg2 != stor15:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            if not arg2:
                                                if arg2 * stor15 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor15 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                        else:
                            if stor15 <= 0:
                                if stor12[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor12[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and stor17 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor17 / arg2 != stor17:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if 0 > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor17 / 100 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor17 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * stor17 / 100
                                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor15 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor15 / arg2 != stor15:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                if not arg2:
                                                    if arg2 * stor15 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor15 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor17 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor17 / arg2 != stor17:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * stor17 / 100
                                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                            else:
                                if msg.sender == owner:
                                    if stor12[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor12[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    if not arg2:
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor17 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor17 / arg2 != stor17:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if 0 > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor17 / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * stor17 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * stor17 / 100
                                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor15 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor15 / arg2 != stor15:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                    if not arg2:
                                                        if arg2 * stor15 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * stor15 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor17 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor17 / arg2 != stor17:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * stor17 / 100
                                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                else:
                                    if arg1 == owner:
                                        if stor12[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor12[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if totalFees <= 0:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if not arg2:
                                                        if not arg2:
                                                            if 0 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < 0:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor17 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor17 / arg2 != stor17:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            if 0 > -(arg2 * stor17 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * stor17 / 100 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg2 * stor17 / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * stor17 / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                            if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[57005] += arg2 * stor17 / 100
                                                            emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor15 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor15 / arg2 != stor15:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                        if not arg2:
                                                            if arg2 * stor15 / 100 > -1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg2 * stor15 / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * stor15 / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                            emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor17 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor17 / arg2 != stor17:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                            emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                            if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[57005] += arg2 * stor17 / 100
                                                            emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                    else:
                                        stor23 = 1
                                        if balanceOf[address(this.address)]:
                                            if balanceOf[address(this.address)] and stor16 > -1 / balanceOf[address(this.address)]:
                                                revert with 'NH{q', 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)] * stor16 / balanceOf[address(this.address)] != stor16:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            mem[96] = 26
                                            mem[128] = 'SafeMath: division by zero'
                                            if stor15 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor15:
                                                revert with 'NH{q', 18
                                            if not balanceOf[address(this.address)]:
                                                mem[160] = 26
                                                mem[192] = 'SafeMath: division by zero'
                                                if stor15 <= 0:
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                if not stor15:
                                                    revert with 'NH{q', 18
                                                mem[224] = 26
                                                mem[256] = 'SafeMath: division by zero'
                                                mem[288] = 30
                                                mem[320] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * stor16 / stor15 / 2 > balanceOf[address(this.address)] * stor16 / stor15:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * stor16 / stor15 < balanceOf[address(this.address)] * stor16 / stor15 / 2:
                                                    revert with 'NH{q', 17
                                                mem[352] = 2
                                                mem[384] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[448] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[416] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                                allowance[address(this.address)][stor20].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * stor16 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                                idx = 0
                                                s = 384
                                                t = ceil32(return_data.size) + 644
                                                while idx < 2:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * stor16 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(return_data.size) + 448] = 30
                                                mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor20].field_0 = (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 580] = 0
                                                mem[ceil32(return_data.size) + 612] = 0
                                                mem[ceil32(return_data.size) + 644] = stor1
                                                mem[ceil32(return_data.size) + 676] = block.timestamp
                                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2), 0, 0, stor1, block.timestamp
                                                mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                require ext_call.return_data[32] == ext_call.return_data[32]
                                                require ext_call.return_data[64] == ext_call.return_data[64]
                                                mem[(2 * ceil32(return_data.size)) + 512] = 3
                                                mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (4 * ceil32(return_data.size)) + 640
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 11)
                                                allowance[address(this.address)][stor20].field_0 = 0 / stor15
                                                emit Approval((0 / stor15), this.address, uniswapV2RouterAddress);
                                                mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor15
                                                mem[(4 * ceil32(return_data.size)) + 676] = 0
                                                mem[(4 * ceil32(return_data.size)) + 708] = 160
                                                mem[(4 * ceil32(return_data.size)) + 804] = 3
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 544
                                                t = (4 * ceil32(return_data.size)) + 836
                                                while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                                mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0 / stor15, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                            else:
                                                if balanceOf[address(this.address)] and stor18 > -1 / balanceOf[address(this.address)]:
                                                    revert with 'NH{q', 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 'NH{q', 18
                                                if balanceOf[address(this.address)] * stor18 / balanceOf[address(this.address)] != stor18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[160] = 26
                                                mem[192] = 'SafeMath: division by zero'
                                                if stor15 <= 0:
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                if not stor15:
                                                    revert with 'NH{q', 18
                                                mem[224] = 26
                                                mem[256] = 'SafeMath: division by zero'
                                                mem[288] = 30
                                                mem[320] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * stor16 / stor15 / 2 > balanceOf[address(this.address)] * stor16 / stor15:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * stor16 / stor15 < balanceOf[address(this.address)] * stor16 / stor15 / 2:
                                                    revert with 'NH{q', 17
                                                mem[352] = 2
                                                mem[384] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[448] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[416] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                                allowance[address(this.address)][stor20].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * stor16 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                                idx = 0
                                                s = 384
                                                t = ceil32(return_data.size) + 644
                                                while idx < 2:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * stor16 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(return_data.size) + 448] = 30
                                                mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor20].field_0 = (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 580] = 0
                                                mem[ceil32(return_data.size) + 612] = 0
                                                mem[ceil32(return_data.size) + 644] = stor1
                                                mem[ceil32(return_data.size) + 676] = block.timestamp
                                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2), 0, 0, stor1, block.timestamp
                                                mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                require ext_call.return_data[32] == ext_call.return_data[32]
                                                require ext_call.return_data[64] == ext_call.return_data[64]
                                                mem[(2 * ceil32(return_data.size)) + 512] = 3
                                                mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (4 * ceil32(return_data.size)) + 640
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 11)
                                                allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor18 / stor15
                                                emit Approval((balanceOf[address(this.address)] * stor18 / stor15), this.address, uniswapV2RouterAddress);
                                                mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * stor18 / stor15
                                                mem[(4 * ceil32(return_data.size)) + 676] = 0
                                                mem[(4 * ceil32(return_data.size)) + 708] = 160
                                                mem[(4 * ceil32(return_data.size)) + 804] = 3
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 544
                                                t = (4 * ceil32(return_data.size)) + 836
                                                while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                                mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)] * stor18 / stor15, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            mem[(4 * ceil32(return_data.size)) + 644] = stor8
                                            mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                            mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            stor23 = 0
                                            if stor12[address(msg.sender)]:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if stor12[address(arg1)]:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                else:
                                                    if arg2 and stor17 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor17 / arg2 != stor17:
                                                        mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 704
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor17 / 100 < 0:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 * stor17 / 100 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[57005] += arg2 * stor17 / 100
                                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                        return 1
                                            else:
                                                if arg2 and stor15 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor15 / arg2 != stor15:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg2:
                                                    if arg2 * stor15 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 * stor15 / 100 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                        return 1
                                                else:
                                                    if arg2 and stor17 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor17 / arg2 != stor17:
                                                        mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 704
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[57005] += arg2 * stor17 / 100
                                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                        return 1
                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                            mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                            mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 1120
                                               len (13 * ceil32(return_data.size)) + 100
                                        mem[96] = 26
                                        mem[128] = 'SafeMath: division by zero'
                                        if stor15 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor15:
                                            revert with 'NH{q', 18
                                        if not balanceOf[address(this.address)]:
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor15 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor15:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if 0 / stor15 / 2 > 0 / stor15:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if 0 / stor15 < 0 / stor15 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor20].field_0 = 0 / stor15 / 2
                                            allowance[address(this.address)][stor20].field_255 = 0
                                            emit Approval((0 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = 0 / stor15 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, 0 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor20].field_0 = (0 / stor15) - (0 / stor15 / 2)
                                            emit Approval(((0 / stor15) - (0 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = stor1
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (0 / stor15) - (0 / stor15 / 2), 0, 0, stor1, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 11)
                                            allowance[address(this.address)][stor20].field_0 = 0 / stor15
                                            emit Approval((0 / stor15), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor15
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[mem[64] + 4] = this.address
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            _10817 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _10830 = mem[_10817]
                                            require mem[_10817] == mem[_10817]
                                            mem[mem[64] + 4] = stor8
                                            mem[mem[64] + 36] = _10830
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor8, _10830
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10929 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_10929] == bool(mem[_10929])
                                            stor23 = 0
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            if stor12[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _11003 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_11003] = 38
                                                mem[_11003 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11003 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                mem[0] = arg1
                                                mem[32] = 12
                                                if stor12[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _11043 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_11043] = 38
                                                    mem[_11043 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11043 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if totalFees <= 0:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11084 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11084] = 38
                                                        mem[_11084 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11084 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if not arg2:
                                                            _11118 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11118] = 26
                                                            mem[_11118 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11443 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11443] = 26
                                                                mem[_11443 + 32] = 'SafeMath: division by zero'
                                                                _11689 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11689] = 30
                                                                mem[_11689 + 32] = 'SafeMath: subtraction overflow'
                                                                if 0 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < 0:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _11841 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_11841] = 38
                                                                mem[_11841 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11841 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 10
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12556 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12556] = 38
                                                                mem[_12556 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12556 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 10
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _13425 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13425] = 38
                                                                mem[_13425 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13425 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                            else:
                                                                if arg2 and stor17 > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * stor17 / arg2 != stor17:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11647 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11647] = 26
                                                                mem[_11647 + 32] = 'SafeMath: division by zero'
                                                                if 0 > -(arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * stor17 / 100 < 0:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11864 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11864] = 30
                                                                mem[_11864 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * stor17 / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * stor17 / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12163 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12163] = 38
                                                                mem[_12163 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12163 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 10
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12919 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12919] = 38
                                                                mem[_12919 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12919 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 10
                                                                balanceOf[57005] += arg2 * stor17 / 100
                                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _13884 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13884] = 38
                                                                mem[_13884 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13884 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor15 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor15 / arg2 != stor15:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11394 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11394] = 26
                                                            mem[_11394 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11646 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11646] = 26
                                                                mem[_11646 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor15 / 100 > -1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11863 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11863] = 30
                                                                mem[_11863 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * stor15 / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * stor15 / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12160 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12160] = 38
                                                                mem[_12160 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12160 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 10
                                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12917 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12917] = 38
                                                                mem[_12917 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12917 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 10
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _13881 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13881] = 38
                                                                mem[_13881 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13881 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and stor17 > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * stor17 / arg2 != stor17:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11759 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11759] = 26
                                                                mem[_11759 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _12189 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_12189] = 30
                                                                mem[_12189 + 32] = 'SafeMath: subtraction overflow'
                                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12553 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12553] = 38
                                                                mem[_12553 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12553 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 10
                                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _13233 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13233] = 38
                                                                mem[_13233 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13233 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 10
                                                                balanceOf[57005] += arg2 * stor17 / 100
                                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14511 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14511] = 38
                                                                mem[_14511 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14511 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                        else:
                                            if balanceOf[address(this.address)] and stor18 > -1 / balanceOf[address(this.address)]:
                                                revert with 'NH{q', 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)] * stor18 / balanceOf[address(this.address)] != stor18:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor15 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor15:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if 0 / stor15 / 2 > 0 / stor15:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if 0 / stor15 < 0 / stor15 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor20].field_0 = 0 / stor15 / 2
                                            allowance[address(this.address)][stor20].field_255 = 0
                                            emit Approval((0 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = 0 / stor15 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, 0 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor20].field_0 = (0 / stor15) - (0 / stor15 / 2)
                                            emit Approval(((0 / stor15) - (0 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = stor1
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (0 / stor15) - (0 / stor15 / 2), 0, 0, stor1, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 11)
                                            allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor18 / stor15
                                            emit Approval((balanceOf[address(this.address)] * stor18 / stor15), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * stor18 / stor15
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[mem[64] + 4] = this.address
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            _10816 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _10829 = mem[_10816]
                                            require mem[_10816] == mem[_10816]
                                            mem[mem[64] + 4] = stor8
                                            mem[mem[64] + 36] = _10829
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor8, _10829
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10928 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_10928] == bool(mem[_10928])
                                            stor23 = 0
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            if stor12[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _10999 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_10999] = 38
                                                mem[_10999 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10999 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                mem[0] = arg1
                                                mem[32] = 12
                                                if stor12[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _11039 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_11039] = 38
                                                    mem[_11039 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11039 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if totalFees <= 0:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11080 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11080] = 38
                                                        mem[_11080 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11080 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if not arg2:
                                                            _11116 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11116] = 26
                                                            mem[_11116 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11438 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11438] = 26
                                                                mem[_11438 + 32] = 'SafeMath: division by zero'
                                                                _11688 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11688] = 30
                                                                mem[_11688 + 32] = 'SafeMath: subtraction overflow'
                                                                if 0 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < 0:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _11838 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_11838] = 38
                                                                mem[_11838 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11838 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 10
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12551 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12551] = 38
                                                                mem[_12551 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12551 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 10
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _13421 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13421] = 38
                                                                mem[_13421 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13421 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                            else:
                                                                if arg2 and stor17 > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * stor17 / arg2 != stor17:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11644 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11644] = 26
                                                                mem[_11644 + 32] = 'SafeMath: division by zero'
                                                                if 0 > -(arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * stor17 / 100 < 0:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11862 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11862] = 30
                                                                mem[_11862 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * stor17 / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * stor17 / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12157 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12157] = 38
                                                                mem[_12157 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12157 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 10
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12915 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12915] = 38
                                                                mem[_12915 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12915 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 10
                                                                balanceOf[57005] += arg2 * stor17 / 100
                                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _13878 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13878] = 38
                                                                mem[_13878 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13878 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor15 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor15 / arg2 != stor15:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11390 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11390] = 26
                                                            mem[_11390 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11643 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11643] = 26
                                                                mem[_11643 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor15 / 100 > -1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11861 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11861] = 30
                                                                mem[_11861 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * stor15 / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * stor15 / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12154 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12154] = 38
                                                                mem[_12154 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12154 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 10
                                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12913 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12913] = 38
                                                                mem[_12913 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12913 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 10
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _13875 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13875] = 38
                                                                mem[_13875 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13875 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and stor17 > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * stor17 / arg2 != stor17:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11758 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11758] = 26
                                                                mem[_11758 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _12188 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_12188] = 30
                                                                mem[_12188 + 32] = 'SafeMath: subtraction overflow'
                                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12548 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12548] = 38
                                                                mem[_12548 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12548 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 10
                                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _13231 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13231] = 38
                                                                mem[_13231 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13231 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 10
                                                                balanceOf[57005] += arg2 * stor17 / 100
                                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14508 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14508] = 38
                                                                mem[_14508 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14508 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
            else:
                if balanceOf[address(arg1)] > -arg2 - 1:
                    revert with 'NH{q', 17
                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                    revert with 0, 'SafeMath: addition overflow'
                if balanceOf[address(arg1)] + arg2 > maxBalance:
                    revert with 0, 'Max Balance is reached.'
                if arg1 != uniswapV2PairAddress:
                    if stor12[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor12[address(arg1)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if totalFees <= 0:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if not arg2:
                                    if not arg2:
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < 0:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and stor17 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor17 / arg2 != stor17:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if 0 > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor17 / 100 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor17 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor17 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * stor17 / 100
                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                        emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and stor15 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor15 / arg2 != stor15:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    if not arg2:
                                        if arg2 * stor15 / 100 > -1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor15 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor15 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                        emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor17 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor17 / arg2 != stor17:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * stor17 / 100
                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                        emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                else:
                    if stor23:
                        if stor12[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor12[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if totalFees <= 0:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if not arg2:
                                            if 0 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < 0:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and stor17 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor17 / arg2 != stor17:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if 0 > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor17 / 100 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor17 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor17 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                            if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * stor17 / 100
                                            emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                            emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor15 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor15 / arg2 != stor15:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        if not arg2:
                                            if arg2 * stor15 / 100 > -1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor15 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor15 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor15 / 100
                                            emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                            emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor17 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor17 / arg2 != stor17:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor15 / 100
                                            emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                            if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * stor17 / 100
                                            emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                            emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                    else:
                        if balanceOf[address(this.address)] < liquifyThreshhold:
                            if stor12[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor12[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if totalFees <= 0:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if 0 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor17 / 100 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor17 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor15 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor15 / arg2 != stor15:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            if not arg2:
                                                if arg2 * stor15 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor15 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor17 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor17 / arg2 != stor17:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * stor17 / 100
                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                        else:
                            if stor15 <= 0:
                                if stor12[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor12[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and stor17 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor17 / arg2 != stor17:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if 0 > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor17 / 100 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor17 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * stor17 / 100
                                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor15 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor15 / arg2 != stor15:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                if not arg2:
                                                    if arg2 * stor15 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor15 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor17 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor17 / arg2 != stor17:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * stor17 / 100
                                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                            else:
                                if msg.sender == owner:
                                    if stor12[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor12[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    if not arg2:
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor17 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor17 / arg2 != stor17:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if 0 > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor17 / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * stor17 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * stor17 / 100
                                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor15 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor15 / arg2 != stor15:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                    if not arg2:
                                                        if arg2 * stor15 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * stor15 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor17 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor17 / arg2 != stor17:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * stor17 / 100
                                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                else:
                                    if arg1 == owner:
                                        if stor12[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor12[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if totalFees <= 0:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if not arg2:
                                                        if not arg2:
                                                            if 0 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < 0:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor17 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor17 / arg2 != stor17:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            if 0 > -(arg2 * stor17 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * stor17 / 100 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg2 * stor17 / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * stor17 / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                            if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[57005] += arg2 * stor17 / 100
                                                            emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor15 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor15 / arg2 != stor15:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                        if not arg2:
                                                            if arg2 * stor15 / 100 > -1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg2 * stor15 / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * stor15 / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                            emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor17 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor17 / arg2 != stor17:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                            emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                            if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[57005] += arg2 * stor17 / 100
                                                            emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                    else:
                                        stor23 = 1
                                        if not balanceOf[address(this.address)]:
                                            mem[96] = 26
                                            mem[128] = 'SafeMath: division by zero'
                                            if stor15 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor15:
                                                revert with 'NH{q', 18
                                            if not balanceOf[address(this.address)]:
                                                mem[160] = 26
                                                mem[192] = 'SafeMath: division by zero'
                                                if stor15 <= 0:
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                if not stor15:
                                                    revert with 'NH{q', 18
                                                mem[224] = 26
                                                mem[256] = 'SafeMath: division by zero'
                                                mem[288] = 30
                                                mem[320] = 'SafeMath: subtraction overflow'
                                                if 0 / stor15 / 2 > 0 / stor15:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if 0 / stor15 < 0 / stor15 / 2:
                                                    revert with 'NH{q', 17
                                                mem[352] = 2
                                                mem[384] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[448] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[416] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor20].field_0 = 0 / stor15 / 2
                                                allowance[address(this.address)][stor20].field_255 = 0
                                                emit Approval((0 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 452] = 0 / stor15 / 2
                                                idx = 0
                                                s = 384
                                                t = ceil32(return_data.size) + 644
                                                while idx < 2:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, 0 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(return_data.size) + 448] = 30
                                                mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor20].field_0 = (0 / stor15) - (0 / stor15 / 2)
                                                emit Approval(((0 / stor15) - (0 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 580] = 0
                                                mem[ceil32(return_data.size) + 612] = 0
                                                mem[ceil32(return_data.size) + 644] = stor1
                                                mem[ceil32(return_data.size) + 676] = block.timestamp
                                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (0 / stor15) - (0 / stor15 / 2), 0, 0, stor1, block.timestamp
                                                mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                require ext_call.return_data[32] == ext_call.return_data[32]
                                                require ext_call.return_data[64] == ext_call.return_data[64]
                                                mem[(2 * ceil32(return_data.size)) + 512] = 3
                                                mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (4 * ceil32(return_data.size)) + 640
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 11)
                                                allowance[address(this.address)][stor20].field_0 = 0 / stor15
                                                emit Approval((0 / stor15), this.address, uniswapV2RouterAddress);
                                                mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor15
                                                mem[(4 * ceil32(return_data.size)) + 676] = 0
                                                mem[(4 * ceil32(return_data.size)) + 708] = 160
                                                mem[(4 * ceil32(return_data.size)) + 804] = 3
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 544
                                                t = (4 * ceil32(return_data.size)) + 836
                                                while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                                mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0 / stor15, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                staticcall sub_e5148bd6Address.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                mem[(4 * ceil32(return_data.size)) + 644] = stor8
                                                mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                                call sub_e5148bd6Address.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                                mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                stor23 = 0
                                                if stor12[address(msg.sender)]:
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 736
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if stor12[address(arg1)]:
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 736
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if totalFees <= 0:
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 736
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if not arg2:
                                                    if not arg2:
                                                        if 0 > arg2:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                            mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not this.address:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not arg1:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1120
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            return 1
                                                    else:
                                                        if arg2 and stor17 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor17 / arg2 != stor17:
                                                            mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 704
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor17 / 100 < 0:
                                                            mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 768
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 * stor17 / 100 > arg2:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                            mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not this.address:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        balanceOf[57005] += arg2 * stor17 / 100
                                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not arg1:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1120
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) >= balanceOf[address(arg1)]:
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                            return 1
                                                else:
                                                    if arg2 and stor15 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor15 / arg2 != stor15:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg2:
                                                        if arg2 * stor15 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                            mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 768
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 * stor15 / 100 > arg2:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                            mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not this.address:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not arg1:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1120
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) >= balanceOf[address(arg1)]:
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                            return 1
                                                    else:
                                                        if arg2 and stor17 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor17 / arg2 != stor17:
                                                            mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 704
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                            mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 768
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                            mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not this.address:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                        emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                        if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        balanceOf[57005] += arg2 * stor17 / 100
                                                        emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not arg1:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1120
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) >= balanceOf[address(arg1)]:
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                            return 1
                                                mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                                mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 1120
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] and stor18 > -1 / balanceOf[address(this.address)]:
                                                revert with 'NH{q', 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)] * stor18 / balanceOf[address(this.address)] != stor18:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor15 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor15:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if 0 / stor15 / 2 > 0 / stor15:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if 0 / stor15 < 0 / stor15 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor20].field_0 = 0 / stor15 / 2
                                            allowance[address(this.address)][stor20].field_255 = 0
                                            emit Approval((0 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = 0 / stor15 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, 0 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor20].field_0 = (0 / stor15) - (0 / stor15 / 2)
                                            emit Approval(((0 / stor15) - (0 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = stor1
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (0 / stor15) - (0 / stor15 / 2), 0, 0, stor1, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 11)
                                            allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor18 / stor15
                                            emit Approval((balanceOf[address(this.address)] * stor18 / stor15), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * stor18 / stor15
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[mem[64] + 4] = this.address
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            _14652 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _14683 = mem[_14652]
                                            require mem[_14652] == mem[_14652]
                                            mem[mem[64] + 4] = stor8
                                            mem[mem[64] + 36] = _14683
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor8, _14683
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14882 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_14882] == bool(mem[_14882])
                                            stor23 = 0
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            if stor12[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _14947 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_14947] = 38
                                                mem[_14947 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14947 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                mem[0] = arg1
                                                mem[32] = 12
                                                if stor12[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _14971 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_14971] = 38
                                                    mem[_14971 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14971 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if totalFees <= 0:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14996 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14996] = 38
                                                        mem[_14996 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14996 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if not arg2:
                                                            _15016 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15016] = 26
                                                            mem[_15016 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _15202 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15202] = 26
                                                                mem[_15202 + 32] = 'SafeMath: division by zero'
                                                                _15340 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15340] = 30
                                                                mem[_15340 + 32] = 'SafeMath: subtraction overflow'
                                                                if 0 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < 0:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _15410 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15410] = 38
                                                                mem[_15410 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15410 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 10
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _15801 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15801] = 38
                                                                mem[_15801 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15801 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 10
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _16298 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16298] = 38
                                                                mem[_16298 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16298 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                            else:
                                                                if arg2 and stor17 > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * stor17 / arg2 != stor17:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _15316 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15316] = 26
                                                                mem[_15316 + 32] = 'SafeMath: division by zero'
                                                                if 0 > -(arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * stor17 / 100 < 0:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _15424 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15424] = 30
                                                                mem[_15424 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * stor17 / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * stor17 / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _15578 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15578] = 38
                                                                mem[_15578 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15578 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 10
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _16011 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16011] = 38
                                                                mem[_16011 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16011 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 10
                                                                balanceOf[57005] += arg2 * stor17 / 100
                                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _16602 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16602] = 38
                                                                mem[_16602 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16602 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor15 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor15 / arg2 != stor15:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _15172 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15172] = 26
                                                            mem[_15172 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _15315 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15315] = 26
                                                                mem[_15315 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor15 / 100 > -1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _15423 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15423] = 30
                                                                mem[_15423 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * stor15 / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * stor15 / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _15575 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15575] = 38
                                                                mem[_15575 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15575 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 10
                                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _16009 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16009] = 38
                                                                mem[_16009 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16009 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 10
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _16599 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16599] = 38
                                                                mem[_16599 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16599 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and stor17 > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * stor17 / arg2 != stor17:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _15364 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15364] = 26
                                                                mem[_15364 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _15586 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15586] = 30
                                                                mem[_15586 + 32] = 'SafeMath: subtraction overflow'
                                                                if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _15798 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15798] = 38
                                                                mem[_15798 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15798 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 10
                                                                balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                                emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _16191 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16191] = 38
                                                                mem[_16191 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16191 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                                if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 10
                                                                balanceOf[57005] += arg2 * stor17 / 100
                                                                emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _17042 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_17042] = 38
                                                                mem[_17042 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_17042 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                        else:
                                            if balanceOf[address(this.address)] and stor16 > -1 / balanceOf[address(this.address)]:
                                                revert with 'NH{q', 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)] * stor16 / balanceOf[address(this.address)] != stor16:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            mem[96] = 26
                                            mem[128] = 'SafeMath: division by zero'
                                            if stor15 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor15:
                                                revert with 'NH{q', 18
                                            if not balanceOf[address(this.address)]:
                                                mem[160] = 26
                                                mem[192] = 'SafeMath: division by zero'
                                                if stor15 <= 0:
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                if not stor15:
                                                    revert with 'NH{q', 18
                                                mem[224] = 26
                                                mem[256] = 'SafeMath: division by zero'
                                                mem[288] = 30
                                                mem[320] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * stor16 / stor15 / 2 > balanceOf[address(this.address)] * stor16 / stor15:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * stor16 / stor15 < balanceOf[address(this.address)] * stor16 / stor15 / 2:
                                                    revert with 'NH{q', 17
                                                mem[352] = 2
                                                mem[384] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[448] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[416] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                                allowance[address(this.address)][stor20].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * stor16 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                                idx = 0
                                                s = 384
                                                t = ceil32(return_data.size) + 644
                                                while idx < 2:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * stor16 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(return_data.size) + 448] = 30
                                                mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor20].field_0 = (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 580] = 0
                                                mem[ceil32(return_data.size) + 612] = 0
                                                mem[ceil32(return_data.size) + 644] = stor1
                                                mem[ceil32(return_data.size) + 676] = block.timestamp
                                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2), 0, 0, stor1, block.timestamp
                                                mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                require ext_call.return_data[32] == ext_call.return_data[32]
                                                require ext_call.return_data[64] == ext_call.return_data[64]
                                                mem[(2 * ceil32(return_data.size)) + 512] = 3
                                                mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (4 * ceil32(return_data.size)) + 640
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 11)
                                                allowance[address(this.address)][stor20].field_0 = 0 / stor15
                                                emit Approval((0 / stor15), this.address, uniswapV2RouterAddress);
                                                mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor15
                                                mem[(4 * ceil32(return_data.size)) + 676] = 0
                                                mem[(4 * ceil32(return_data.size)) + 708] = 160
                                                mem[(4 * ceil32(return_data.size)) + 804] = 3
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 544
                                                t = (4 * ceil32(return_data.size)) + 836
                                                while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                                mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[mem[64] + 4] = this.address
                                                staticcall sub_e5148bd6Address.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                _14651 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _14682 = mem[_14651]
                                                require mem[_14651] == mem[_14651]
                                                mem[mem[64] + 4] = stor8
                                                mem[mem[64] + 36] = _14682
                                                call sub_e5148bd6Address.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor8, _14682
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14881 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_14881] == bool(mem[_14881])
                                                stor23 = 0
                                                mem[0] = msg.sender
                                                mem[32] = 12
                                                if stor12[address(msg.sender)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _14943 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_14943] = 38
                                                    mem[_14943 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14943 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    mem[0] = arg1
                                                    mem[32] = 12
                                                    if stor12[address(arg1)]:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14967 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14967] = 38
                                                        mem[_14967 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14967 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if totalFees <= 0:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _14992 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_14992] = 38
                                                            mem[_14992 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14992 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if not arg2:
                                                                _15014 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15014] = 26
                                                                mem[_15014 + 32] = 'SafeMath: division by zero'
                                                                if not arg2:
                                                                    _15197 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15197] = 26
                                                                    mem[_15197 + 32] = 'SafeMath: division by zero'
                                                                    _15339 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15339] = 30
                                                                    mem[_15339 + 32] = 'SafeMath: subtraction overflow'
                                                                    if 0 > arg2:
                                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                                    if arg2 < 0:
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _15407 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_15407] = 38
                                                                    mem[_15407 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15407 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(this.address)] > -1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = this.address
                                                                    mem[32] = 10
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    _15796 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_15796] = 38
                                                                    mem[_15796 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15796 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[57005] > -1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[57005] < balanceOf[57005]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = 57005
                                                                    mem[32] = 10
                                                                    emit Transfer(0, msg.sender, 57005);
                                                                    emit TokenBurn(0, msg.sender);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _16294 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_16294] = 38
                                                                    mem[_16294 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16294 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] -= arg2
                                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(arg1)] += arg2
                                                                    emit Transfer(arg2, msg.sender, arg1);
                                                                else:
                                                                    if arg2 and stor17 > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if not arg2:
                                                                        revert with 'NH{q', 18
                                                                    if arg2 * stor17 / arg2 != stor17:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _15313 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15313] = 26
                                                                    mem[_15313 + 32] = 'SafeMath: division by zero'
                                                                    if 0 > -(arg2 * stor17 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if arg2 * stor17 / 100 < 0:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    _15422 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15422] = 30
                                                                    mem[_15422 + 32] = 'SafeMath: subtraction overflow'
                                                                    if arg2 * stor17 / 100 > arg2:
                                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                                    if arg2 < arg2 * stor17 / 100:
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _15572 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_15572] = 38
                                                                    mem[_15572 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15572 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(this.address)] > -1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = this.address
                                                                    mem[32] = 10
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    _16007 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_16007] = 38
                                                                    mem[_16007 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16007 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = 57005
                                                                    mem[32] = 10
                                                                    balanceOf[57005] += arg2 * stor17 / 100
                                                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _16596 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_16596] = 38
                                                                    mem[_16596 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16596 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                                    emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and stor15 > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * stor15 / arg2 != stor15:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _15168 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15168] = 26
                                                                mem[_15168 + 32] = 'SafeMath: division by zero'
                                                                if not arg2:
                                                                    _15312 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15312] = 26
                                                                    mem[_15312 + 32] = 'SafeMath: division by zero'
                                                                    if arg2 * stor15 / 100 > -1:
                                                                        revert with 'NH{q', 17
                                                                    if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    _15421 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15421] = 30
                                                                    mem[_15421 + 32] = 'SafeMath: subtraction overflow'
                                                                    if arg2 * stor15 / 100 > arg2:
                                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                                    if arg2 < arg2 * stor15 / 100:
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _15569 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_15569] = 38
                                                                    mem[_15569 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15569 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = this.address
                                                                    mem[32] = 10
                                                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    _16005 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_16005] = 38
                                                                    mem[_16005 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16005 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[57005] > -1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[57005] < balanceOf[57005]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = 57005
                                                                    mem[32] = 10
                                                                    emit Transfer(0, msg.sender, 57005);
                                                                    emit TokenBurn(0, msg.sender);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _16593 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_16593] = 38
                                                                    mem[_16593 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16593 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                                    emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                                else:
                                                                    if arg2 and stor17 > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if not arg2:
                                                                        revert with 'NH{q', 18
                                                                    if arg2 * stor17 / arg2 != stor17:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _15363 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15363] = 26
                                                                    mem[_15363 + 32] = 'SafeMath: division by zero'
                                                                    if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    _15585 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15585] = 30
                                                                    mem[_15585 + 32] = 'SafeMath: subtraction overflow'
                                                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                                    if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _15793 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_15793] = 38
                                                                    mem[_15793 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15793 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = this.address
                                                                    mem[32] = 10
                                                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    _16189 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_16189] = 38
                                                                    mem[_16189 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16189 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = 57005
                                                                    mem[32] = 10
                                                                    balanceOf[57005] += arg2 * stor17 / 100
                                                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _17039 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_17039] = 38
                                                                    mem[_17039 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_17039 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                                    emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
                                            else:
                                                if balanceOf[address(this.address)] and stor18 > -1 / balanceOf[address(this.address)]:
                                                    revert with 'NH{q', 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 'NH{q', 18
                                                if balanceOf[address(this.address)] * stor18 / balanceOf[address(this.address)] != stor18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[160] = 26
                                                mem[192] = 'SafeMath: division by zero'
                                                if stor15 <= 0:
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                if not stor15:
                                                    revert with 'NH{q', 18
                                                mem[224] = 26
                                                mem[256] = 'SafeMath: division by zero'
                                                mem[288] = 30
                                                mem[320] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * stor16 / stor15 / 2 > balanceOf[address(this.address)] * stor16 / stor15:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * stor16 / stor15 < balanceOf[address(this.address)] * stor16 / stor15 / 2:
                                                    revert with 'NH{q', 17
                                                mem[352] = 2
                                                mem[384] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[448] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[416] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                                allowance[address(this.address)][stor20].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * stor16 / stor15 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * stor16 / stor15 / 2
                                                idx = 0
                                                s = 384
                                                t = ceil32(return_data.size) + 644
                                                while idx < 2:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * stor16 / stor15), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(return_data.size) + 448] = 30
                                                mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor20].field_0 = (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 580] = 0
                                                mem[ceil32(return_data.size) + 612] = 0
                                                mem[ceil32(return_data.size) + 644] = stor1
                                                mem[ceil32(return_data.size) + 676] = block.timestamp
                                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (balanceOf[address(this.address)] * stor16 / stor15) - (balanceOf[address(this.address)] * stor16 / stor15 / 2), 0, 0, stor1, block.timestamp
                                                mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                require ext_call.return_data[32] == ext_call.return_data[32]
                                                require ext_call.return_data[64] == ext_call.return_data[64]
                                                mem[(2 * ceil32(return_data.size)) + 512] = 3
                                                mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (4 * ceil32(return_data.size)) + 640
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 11)
                                                allowance[address(this.address)][stor20].field_0 = balanceOf[address(this.address)] * stor18 / stor15
                                                emit Approval((balanceOf[address(this.address)] * stor18 / stor15), this.address, uniswapV2RouterAddress);
                                                mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * stor18 / stor15
                                                mem[(4 * ceil32(return_data.size)) + 676] = 0
                                                mem[(4 * ceil32(return_data.size)) + 708] = 160
                                                mem[(4 * ceil32(return_data.size)) + 804] = 3
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 544
                                                t = (4 * ceil32(return_data.size)) + 836
                                                while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                                mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[mem[64] + 4] = this.address
                                                staticcall sub_e5148bd6Address.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                _14650 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _14681 = mem[_14650]
                                                require mem[_14650] == mem[_14650]
                                                mem[mem[64] + 4] = stor8
                                                mem[mem[64] + 36] = _14681
                                                call sub_e5148bd6Address.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor8, _14681
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14880 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require mem[_14880] == bool(mem[_14880])
                                                stor23 = 0
                                                mem[0] = msg.sender
                                                mem[32] = 12
                                                if stor12[address(msg.sender)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _14939 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_14939] = 38
                                                    mem[_14939 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14939 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    mem[0] = arg1
                                                    mem[32] = 12
                                                    if stor12[address(arg1)]:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14963 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14963] = 38
                                                        mem[_14963 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14963 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if totalFees <= 0:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _14988 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_14988] = 38
                                                            mem[_14988 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14988 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if not arg2:
                                                                _15012 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15012] = 26
                                                                mem[_15012 + 32] = 'SafeMath: division by zero'
                                                                if not arg2:
                                                                    _15192 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15192] = 26
                                                                    mem[_15192 + 32] = 'SafeMath: division by zero'
                                                                    _15338 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15338] = 30
                                                                    mem[_15338 + 32] = 'SafeMath: subtraction overflow'
                                                                    if 0 > arg2:
                                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                                    if arg2 < 0:
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _15404 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_15404] = 38
                                                                    mem[_15404 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15404 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(this.address)] > -1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = this.address
                                                                    mem[32] = 10
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    _15791 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_15791] = 38
                                                                    mem[_15791 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15791 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[57005] > -1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[57005] < balanceOf[57005]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = 57005
                                                                    mem[32] = 10
                                                                    emit Transfer(0, msg.sender, 57005);
                                                                    emit TokenBurn(0, msg.sender);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _16290 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_16290] = 38
                                                                    mem[_16290 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16290 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] -= arg2
                                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(arg1)] += arg2
                                                                    emit Transfer(arg2, msg.sender, arg1);
                                                                else:
                                                                    if arg2 and stor17 > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if not arg2:
                                                                        revert with 'NH{q', 18
                                                                    if arg2 * stor17 / arg2 != stor17:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _15310 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15310] = 26
                                                                    mem[_15310 + 32] = 'SafeMath: division by zero'
                                                                    if 0 > -(arg2 * stor17 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if arg2 * stor17 / 100 < 0:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    _15420 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15420] = 30
                                                                    mem[_15420 + 32] = 'SafeMath: subtraction overflow'
                                                                    if arg2 * stor17 / 100 > arg2:
                                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                                    if arg2 < arg2 * stor17 / 100:
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _15566 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_15566] = 38
                                                                    mem[_15566 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15566 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(this.address)] > -1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = this.address
                                                                    mem[32] = 10
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    _16003 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_16003] = 38
                                                                    mem[_16003 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16003 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = 57005
                                                                    mem[32] = 10
                                                                    balanceOf[57005] += arg2 * stor17 / 100
                                                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _16590 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_16590] = 38
                                                                    mem[_16590 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16590 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor17 / 100):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor17 / 100)
                                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor17 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor17 / 100)
                                                                    emit Transfer((arg2 - (arg2 * stor17 / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and stor15 > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * stor15 / arg2 != stor15:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _15164 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15164] = 26
                                                                mem[_15164 + 32] = 'SafeMath: division by zero'
                                                                if not arg2:
                                                                    _15309 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15309] = 26
                                                                    mem[_15309 + 32] = 'SafeMath: division by zero'
                                                                    if arg2 * stor15 / 100 > -1:
                                                                        revert with 'NH{q', 17
                                                                    if arg2 * stor15 / 100 < arg2 * stor15 / 100:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    _15419 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15419] = 30
                                                                    mem[_15419 + 32] = 'SafeMath: subtraction overflow'
                                                                    if arg2 * stor15 / 100 > arg2:
                                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                                    if arg2 < arg2 * stor15 / 100:
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _15563 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_15563] = 38
                                                                    mem[_15563 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15563 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = this.address
                                                                    mem[32] = 10
                                                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    _16001 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_16001] = 38
                                                                    mem[_16001 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16001 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[57005] > -1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[57005] < balanceOf[57005]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = 57005
                                                                    mem[32] = 10
                                                                    emit Transfer(0, msg.sender, 57005);
                                                                    emit TokenBurn(0, msg.sender);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _16587 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_16587] = 38
                                                                    mem[_16587 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 - (arg2 * stor15 / 100) > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16587 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100)
                                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) < balanceOf[address(arg1)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100)
                                                                    emit Transfer((arg2 - (arg2 * stor15 / 100)), msg.sender, arg1);
                                                                else:
                                                                    if arg2 and stor17 > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if not arg2:
                                                                        revert with 'NH{q', 18
                                                                    if arg2 * stor17 / arg2 != stor17:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _15362 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15362] = 26
                                                                    mem[_15362 + 32] = 'SafeMath: division by zero'
                                                                    if arg2 * stor15 / 100 > -(arg2 * stor17 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) < arg2 * stor15 / 100:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    _15584 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_15584] = 30
                                                                    mem[_15584 + 32] = 'SafeMath: subtraction overflow'
                                                                    if (arg2 * stor15 / 100) + (arg2 * stor17 / 100) > arg2:
                                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                                    if arg2 < (arg2 * stor15 / 100) + (arg2 * stor17 / 100):
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _15788 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_15788] = 38
                                                                    mem[_15788 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 * stor15 / 100 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15788 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2 * stor15 / 100:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] -= arg2 * stor15 / 100
                                                                    if balanceOf[address(this.address)] > -(arg2 * stor15 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(this.address)] + (arg2 * stor15 / 100) < balanceOf[address(this.address)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = this.address
                                                                    mem[32] = 10
                                                                    balanceOf[address(this.address)] += arg2 * stor15 / 100
                                                                    emit Transfer((arg2 * stor15 / 100), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    _16187 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_16187] = 38
                                                                    mem[_16187 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 * stor17 / 100 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16187 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2 * stor17 / 100:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] -= arg2 * stor17 / 100
                                                                    if balanceOf[57005] > -(arg2 * stor17 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[57005] + (arg2 * stor17 / 100) < balanceOf[57005]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    mem[0] = 57005
                                                                    mem[32] = 10
                                                                    balanceOf[57005] += arg2 * stor17 / 100
                                                                    emit Transfer((arg2 * stor17 / 100), msg.sender, 57005);
                                                                    emit TokenBurn((arg2 * stor17 / 100), msg.sender);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _17036 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_17036] = 38
                                                                    mem[_17036 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_17036 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100)
                                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor15 / 100) + (arg2 * stor17 / 100) - 1:
                                                                        revert with 'NH{q', 17
                                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100) < balanceOf[address(arg1)]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)
                                                                    emit Transfer((arg2 - (arg2 * stor15 / 100) - (arg2 * stor17 / 100)), msg.sender, arg1);
    return 1
}



}
