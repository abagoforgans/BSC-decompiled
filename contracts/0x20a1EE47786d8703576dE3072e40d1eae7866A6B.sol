contract main {




// =====================  Runtime code  =====================


#
#  - unstake(uint256 arg1)
#  - stakeFor(address arg1, uint256 arg2)
#  - unstakeQuery(uint256 arg1)
#  - getUserReward(address arg1, uint256 arg2)
#
const BONUS_DECIMALS = 2


address owner;
address stor1;
address stor2;
address stor3;
uint256 startBonus;
uint256 bonusPeriodSec;
uint256 totalLockedShares;
uint256 totalStakingShares;
uint256 _totalStakingShareSeconds;
uint256 _lastAccountingTimestampSec;
uint256 _maxUnlockSchedules;
uint256 _initialSharesPerToken;
mapping of struct _userTotals;
array of struct _userStakes;
array of struct unlockSchedules;

function _userStakes(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg2 < _userStakes[arg1].field_0
    return _userStakes[arg1][arg2].field_0, _userStakes[arg1][arg2].field_256
}

function _lastAccountingTimestampSec() payable {
    return _lastAccountingTimestampSec
}

function _initialSharesPerToken() payable {
    return _initialSharesPerToken
}

function startBonus() payable {
    return startBonus
}

function unlockSchedules(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < unlockSchedules.length
    return unlockSchedules[arg1].field_0, 
           unlockSchedules[arg1].field_256,
           unlockSchedules[arg1].field_512,
           unlockSchedules[arg1].field_768,
           unlockSchedules[arg1].field_1024
}

function totalStakingShares() payable {
    return totalStakingShares
}

function bonusPeriodSec() payable {
    return bonusPeriodSec
}

function totalLockedShares() payable {
    return totalLockedShares
}

function owner() payable {
    return owner
}

function _maxUnlockSchedules() payable {
    return _maxUnlockSchedules
}

function _userTotals(address arg1) payable {
    require calldata.size - 4 >= 32
    return _userTotals[arg1].field_0, _userTotals[arg1].field_256, _userTotals[arg1].field_512
}

function unlockScheduleCount() payable {
    return unlockSchedules.length
}

function _totalStakingShareSeconds() payable {
    return _totalStakingShareSeconds
}

function _fallback() payable {
    revert
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function totalLocked() payable {
    require ext_code.size(stor3)
    staticcall stor3.balance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function totalStaked() payable {
    require ext_code.size(stor1)
    staticcall stor1.balance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function totalUnlocked() payable {
    require ext_code.size(stor2)
    staticcall stor2.balance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function token() payable {
    require ext_code.size(stor1)
    staticcall stor1.0xfc0c546a with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[12 len 20]
}

function getStakingToken() payable {
    require ext_code.size(stor1)
    staticcall stor1.0xfc0c546a with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[12 len 20]
}

function getLatestUnlockEndTime() payable {
    idx = 0
    s = 0
    while idx < unlockSchedules.length:
        mem[0] = 14
        if s >= unlockSchedules[idx].field_768:
            idx = idx + 1
            s = s
            continue 
        require idx < unlockSchedules.length
        mem[0] = 14
        idx = idx + 1
        s = unlockSchedules[idx].field_768
        continue 
    return s
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0x6c4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                    mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function rescueFundsFromStakingPool(address arg1, address arg2, uint256 arg3) payable {
    require calldata.size - 4 >= 96
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(stor1)
    call stor1.rescueFunds(address arg1, address arg2, uint256 arg3) with:
         gas gas_remaining wei
        args address(arg1), address(arg2), arg3
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return bool(ext_call.return_data[0])
}

function getUserFirstStakeTime(address arg1) payable {
    require calldata.size - 4 >= 32
    mem[0] = arg1
    mem[32] = 13
    mem[64] = (32 * _userStakes[address(arg1)].field_0) + 128
    mem[96] = _userStakes[address(arg1)].field_0
    s = 128
    idx = 0
    while idx < _userStakes[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 13)
        _15 = mem[64]
        mem[64] = mem[64] + 64
        mem[_15] = _userStakes[address(arg1)][idx].field_0
        mem[_15 + 32] = _userStakes[address(arg1)][idx].field_256
        mem[s] = _15
        s = s + 32
        idx = idx + 1
        continue 
    if mem[96] <= 0:
        return 0
    require 0 < mem[96]
    mem[mem[64]] = mem[mem[128] + 32]
    return memory
      from mem[64]
       len 32
}

function getDistributionToken() payable {
    require ext_code.size(stor3)
    staticcall stor3.0xfc0c546a with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor2)
    staticcall stor2.0xfc0c546a with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[12 len 20] == address(ext_call.return_data[0])
    require ext_code.size(stor2)
    staticcall stor2.0xfc0c546a with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[12 len 20]
}

function totalStakedFor(address arg1) payable {
    require calldata.size - 4 >= 32
    if totalStakingShares <= 0:
        return 0
    require ext_code.size(stor1)
    staticcall stor1.balance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if totalStakingShares <= 0:
            revert with 0, 'SafeMath: division by zero'
        if totalStakingShares:
            return (0 / totalStakingShares)
    else:
        if ext_call.return_data[0]:
            if ext_call.return_data[0] * _userTotals[address(arg1)].field_0 / ext_call.return_data[0] != _userTotals[address(arg1)].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if totalStakingShares <= 0:
                revert with 0, 'SafeMath: division by zero'
            if totalStakingShares:
                return (ext_call.return_data[0] * _userTotals[address(arg1)].field_0 / totalStakingShares)
    revert
}

function unlockableScheduleShares(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 < unlockSchedules.length
    if unlockSchedules[arg1].field_256 >= unlockSchedules[arg1].field_0:
        return 0
    if arg2 >= unlockSchedules[arg1].field_768:
        if unlockSchedules[arg1].field_256 > unlockSchedules[arg1].field_0:
            revert with 0, 'SafeMath: subtraction overflow'
        return (unlockSchedules[arg1].field_0 - unlockSchedules[arg1].field_256)
    if unlockSchedules[arg1].field_512 > arg2:
        revert with 0, 'SafeMath: subtraction overflow'
    if not arg2 - unlockSchedules[arg1].field_512:
        if unlockSchedules[arg1].field_1024 <= 0:
            revert with 0, 'SafeMath: division by zero'
        if unlockSchedules[arg1].field_1024:
            return (0 / unlockSchedules[arg1].field_1024)
    else:
        if arg2 - unlockSchedules[arg1].field_512:
            if (arg2 * unlockSchedules[arg1].field_0) - (unlockSchedules[arg1].field_512 * unlockSchedules[arg1].field_0) / arg2 - unlockSchedules[arg1].field_512 != unlockSchedules[arg1].field_0:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if unlockSchedules[arg1].field_1024 <= 0:
                revert with 0, 'SafeMath: division by zero'
            if unlockSchedules[arg1].field_1024:
                return ((arg2 * unlockSchedules[arg1].field_0) - (unlockSchedules[arg1].field_512 * unlockSchedules[arg1].field_0) / unlockSchedules[arg1].field_1024)
    revert
}

function getUnlockableAmount(uint256 arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    require ext_code.size(stor3)
    staticcall stor3.balance() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not totalLockedShares:
        return ext_call.return_data[0]
    idx = 0
    while idx < unlockSchedules.length:
        _68 = mem[64]
        mem[64] = mem[64] + 160
        mem[_68] = 0
        mem[_68 + 32] = 0
        mem[_68 + 64] = 0
        mem[_68 + 96] = 0
        mem[_68 + 128] = 0
        mem[0] = 14
        _70 = mem[64]
        mem[64] = mem[64] + 160
        mem[_70] = unlockSchedules[idx].field_0
        mem[_70 + 32] = unlockSchedules[idx].field_256
        mem[_70 + 64] = unlockSchedules[idx].field_512
        mem[_70 + 96] = unlockSchedules[idx].field_768
        mem[_70 + 128] = unlockSchedules[idx].field_1024
        if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
            idx = idx + 1
            continue 
        if arg1 >= unlockSchedules[idx].field_768:
            _84 = mem[64]
            mem[64] = mem[64] + 64
            mem[_84] = 30
            mem[_84 + 32] = 'SafeMath: subtraction overflow'
            if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _89 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_89 + idx + 68] = mem[_84 + idx + 32]
                idx = idx + 32
                continue 
            mem[_89 + 68] = mem[_89 + 70 len 30]
            revert with memory
              from mem[64]
               len _89 + -mem[64] + 100
        _83 = mem[64]
        mem[64] = mem[64] + 64
        mem[_83] = 30
        mem[_83 + 32] = 'SafeMath: subtraction overflow'
        if unlockSchedules[idx].field_512 > arg1:
            _86 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_86 + idx + 68] = mem[_83 + idx + 32]
                idx = idx + 32
                continue 
            mem[_86 + 68] = mem[_86 + 70 len 30]
            revert with memory
              from mem[64]
               len _86 + -mem[64] + 100
        if not arg1 - unlockSchedules[idx].field_512:
            _107 = mem[64]
            mem[64] = mem[64] + 64
            mem[_107] = 26
            mem[_107 + 32] = 'SafeMath: division by zero'
            if unlockSchedules[idx].field_1024 > 0:
                require unlockSchedules[idx].field_1024
                if 0 / unlockSchedules[idx].field_1024 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _111 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_111 + idx + 68] = mem[_107 + idx + 32]
                idx = idx + 32
                continue 
            mem[_111 + 68] = mem[_111 + 74 len 26]
            revert with memory
              from mem[64]
               len _111 + -mem[64] + 100
        require arg1 - unlockSchedules[idx].field_512
        if (arg1 * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / arg1 - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        _110 = mem[64]
        mem[64] = mem[64] + 64
        mem[_110] = 26
        mem[_110 + 32] = 'SafeMath: division by zero'
        if unlockSchedules[idx].field_1024 > 0:
            require unlockSchedules[idx].field_1024
            if (arg1 * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                revert with 0, 'SafeMath: addition overflow'
            idx = idx + 1
            continue 
        _114 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 26
        idx = 0
        while idx < 26:
            mem[_114 + idx + 68] = mem[_110 + idx + 32]
            idx = idx + 32
            continue 
        mem[_114 + 68] = mem[_114 + 74 len 26]
        revert with memory
          from mem[64]
           len _114 + -mem[64] + 100
    if totalLockedShares <= 0:
        revert with 0, 'SafeMath: division by zero'
    if totalLockedShares:
        return (0 / totalLockedShares)
    revert
}

function unlockTokens() payable {
    mem[64] = 96
    require ext_code.size(stor3)
    staticcall stor3.balance() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not totalLockedShares:
        if ext_call.return_data[0] > 0:
            require ext_code.size(stor3)
            call stor3.0xa9059cbb with:
                 gas gas_remaining wei
                args stor2, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            47,
                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                            mem[211 len 17]
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
        return ext_call.return_data[0]
    idx = 0
    while idx < unlockSchedules.length:
        mem[0] = 14
        if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
            idx = idx + 1
            continue 
        if block.timestamp >= unlockSchedules[idx].field_768:
            _103 = mem[64]
            mem[64] = mem[64] + 64
            mem[_103] = 30
            mem[_103 + 32] = 'SafeMath: subtraction overflow'
            if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                    revert with 0, 'SafeMath: addition overflow'
                unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _110 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_110 + idx + 68] = mem[_103 + idx + 32]
                idx = idx + 32
                continue 
            mem[_110 + 68] = mem[_110 + 70 len 30]
            revert with memory
              from mem[64]
               len _110 + -mem[64] + 100
        _102 = mem[64]
        mem[64] = mem[64] + 64
        mem[_102] = 30
        mem[_102 + 32] = 'SafeMath: subtraction overflow'
        if unlockSchedules[idx].field_512 > block.timestamp:
            _107 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_107 + idx + 68] = mem[_102 + idx + 32]
                idx = idx + 32
                continue 
            mem[_107 + 68] = mem[_107 + 70 len 30]
            revert with memory
              from mem[64]
               len _107 + -mem[64] + 100
        if not block.timestamp - unlockSchedules[idx].field_512:
            _133 = mem[64]
            mem[64] = mem[64] + 64
            mem[_133] = 26
            mem[_133 + 32] = 'SafeMath: division by zero'
            if unlockSchedules[idx].field_1024 > 0:
                require unlockSchedules[idx].field_1024
                unlockSchedules[idx].field_512 = block.timestamp
                if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                    revert with 0, 'SafeMath: addition overflow'
                unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                if 0 / unlockSchedules[idx].field_1024 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _138 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_138 + idx + 68] = mem[_133 + idx + 32]
                idx = idx + 32
                continue 
            mem[_138 + 68] = mem[_138 + 74 len 26]
            revert with memory
              from mem[64]
               len _138 + -mem[64] + 100
        require block.timestamp - unlockSchedules[idx].field_512
        if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        _137 = mem[64]
        mem[64] = mem[64] + 64
        mem[_137] = 26
        mem[_137 + 32] = 'SafeMath: division by zero'
        if unlockSchedules[idx].field_1024 > 0:
            require unlockSchedules[idx].field_1024
            unlockSchedules[idx].field_512 = block.timestamp
            if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                revert with 0, 'SafeMath: addition overflow'
            unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                revert with 0, 'SafeMath: addition overflow'
            idx = idx + 1
            continue 
        _148 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 26
        idx = 0
        while idx < 26:
            mem[_148 + idx + 68] = mem[_137 + idx + 32]
            idx = idx + 32
            continue 
        mem[_148 + 68] = mem[_148 + 74 len 26]
        revert with memory
          from mem[64]
           len _148 + -mem[64] + 100
    _101 = mem[64]
    mem[64] = mem[64] + 64
    mem[_101] = 26
    mem[_101 + 32] = 'SafeMath: division by zero'
    if totalLockedShares <= 0:
        revert with 0, 'SafeMath: division by zero'
    require totalLockedShares
    _122 = mem[64]
    mem[64] = mem[64] + 64
    mem[_122] = 30
    mem[_122 + 32] = 'SafeMath: subtraction overflow'
    if 0 > totalLockedShares:
        revert with 0, 'SafeMath: subtraction overflow'
    if 0 / totalLockedShares > 0:
        require ext_code.size(stor3)
        call stor3.0xa9059cbb with:
             gas gas_remaining wei
            args stor2, 0 / totalLockedShares
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            revert with 0, 
                        32,
                        47,
                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                        mem[mem[64] + 115 len 17]
        require ext_code.size(stor3)
        staticcall stor3.balance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
    return (0 / totalLockedShares)
}

function updateAccounting() payable {
    mem[64] = 96
    require ext_code.size(stor3)
    staticcall stor3.balance() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not totalLockedShares:
        if ext_call.return_data[0] > 0:
            require ext_code.size(stor3)
            call stor3.0xa9059cbb with:
                 gas gas_remaining wei
                args stor2, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            47,
                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                            mem[211 len 17]
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
        if _lastAccountingTimestampSec > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.timestamp - _lastAccountingTimestampSec:
            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                revert with 0, 'SafeMath: addition overflow'
        else:
            require block.timestamp - _lastAccountingTimestampSec
            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                revert with 0, 'SafeMath: addition overflow'
            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
        _lastAccountingTimestampSec = block.timestamp
        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                revert with 0, 'SafeMath: addition overflow'
        else:
            require block.timestamp - _userTotals[address(msg.sender)].field_512
            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                revert with 0, 'SafeMath: addition overflow'
            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
        _userTotals[address(msg.sender)].field_512 = block.timestamp
        if _totalStakingShareSeconds <= 0:
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor2)
            staticcall stor2.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return ext_call.return_data[0], 
                   ext_call.return_data[0],
                   _userTotals[address(msg.sender)].field_256,
                   _totalStakingShareSeconds,
                   0,
                   block.timestamp
        require ext_code.size(stor2)
        staticcall stor2.balance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if _totalStakingShareSeconds <= 0:
                revert with 0, 'SafeMath: division by zero'
            require _totalStakingShareSeconds
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor2)
            staticcall stor2.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return ext_call.return_data[0], 
                   ext_call.return_data[0],
                   _userTotals[address(msg.sender)].field_256,
                   _totalStakingShareSeconds,
                   0 / _totalStakingShareSeconds,
                   block.timestamp
        require ext_call.return_data[0]
        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
    else:
        idx = 0
        while idx < unlockSchedules.length:
            mem[0] = 14
            if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                idx = idx + 1
                continue 
            if block.timestamp >= unlockSchedules[idx].field_768:
                _1191 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1191] = 30
                mem[_1191 + 32] = 'SafeMath: subtraction overflow'
                if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                    unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                    if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                    if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    continue 
                _1198 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1198 + idx + 68] = mem[_1191 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1198 + 68] = mem[_1198 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1198 + -mem[64] + 100
            _1190 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1190] = 30
            mem[_1190 + 32] = 'SafeMath: subtraction overflow'
            if unlockSchedules[idx].field_512 > block.timestamp:
                _1195 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1195 + idx + 68] = mem[_1190 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1195 + 68] = mem[_1195 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1195 + -mem[64] + 100
            if not block.timestamp - unlockSchedules[idx].field_512:
                _1221 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1221] = 26
                mem[_1221 + 32] = 'SafeMath: division by zero'
                if unlockSchedules[idx].field_1024 > 0:
                    require unlockSchedules[idx].field_1024
                    unlockSchedules[idx].field_512 = block.timestamp
                    if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                    if 0 / unlockSchedules[idx].field_1024 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    continue 
                _1226 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_1226 + idx + 68] = mem[_1221 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1226 + 68] = mem[_1226 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1226 + -mem[64] + 100
            require block.timestamp - unlockSchedules[idx].field_512
            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1225 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1225] = 26
            mem[_1225 + 32] = 'SafeMath: division by zero'
            if unlockSchedules[idx].field_1024 > 0:
                require unlockSchedules[idx].field_1024
                unlockSchedules[idx].field_512 = block.timestamp
                if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                    revert with 0, 'SafeMath: addition overflow'
                unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _1234 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_1234 + idx + 68] = mem[_1225 + idx + 32]
                idx = idx + 32
                continue 
            mem[_1234 + 68] = mem[_1234 + 74 len 26]
            revert with memory
              from mem[64]
               len _1234 + -mem[64] + 100
        _1189 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1189] = 26
        mem[_1189 + 32] = 'SafeMath: division by zero'
        if totalLockedShares <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalLockedShares
        _1210 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1210] = 30
        mem[_1210 + 32] = 'SafeMath: subtraction overflow'
        if 0 > totalLockedShares:
            revert with 0, 'SafeMath: subtraction overflow'
        if 0 / totalLockedShares <= 0:
            _1238 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1238] = 30
            mem[_1238 + 32] = 'SafeMath: subtraction overflow'
            if _lastAccountingTimestampSec > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.timestamp - _lastAccountingTimestampSec:
                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 12
                _1279 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1279] = 30
                mem[_1279 + 32] = 'SafeMath: subtraction overflow'
            else:
                require block.timestamp - _lastAccountingTimestampSec
                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 12
                _1284 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1284] = 30
                mem[_1284 + 32] = 'SafeMath: subtraction overflow'
        else:
            mem[mem[64] + 36] = 0 / totalLockedShares
            require ext_code.size(stor3)
            call stor3.0xa9059cbb with:
                 gas gas_remaining wei
                args stor2, 0 / totalLockedShares
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 
                            32,
                            47,
                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                            mem[mem[64] + 115 len 17]
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[mem[64] + 32] = ext_call.return_data[0]
            emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
            _1273 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1273] = 30
            mem[_1273 + 32] = 'SafeMath: subtraction overflow'
            if _lastAccountingTimestampSec > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.timestamp - _lastAccountingTimestampSec:
                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 12
                _1316 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1316] = 30
                mem[_1316 + 32] = 'SafeMath: subtraction overflow'
            else:
                require block.timestamp - _lastAccountingTimestampSec
                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 12
                _1322 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1322] = 30
                mem[_1322 + 32] = 'SafeMath: subtraction overflow'
        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                revert with 0, 'SafeMath: addition overflow'
        else:
            require block.timestamp - _userTotals[address(msg.sender)].field_512
            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                revert with 0, 'SafeMath: addition overflow'
            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
        _userTotals[address(msg.sender)].field_512 = block.timestamp
        if _totalStakingShareSeconds <= 0:
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor2)
            staticcall stor2.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return ext_call.return_data[0], 
                   ext_call.return_data[0],
                   _userTotals[address(msg.sender)].field_256,
                   _totalStakingShareSeconds,
                   0,
                   block.timestamp
        require ext_code.size(stor2)
        staticcall stor2.balance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if _totalStakingShareSeconds <= 0:
                revert with 0, 'SafeMath: division by zero'
            require _totalStakingShareSeconds
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor2)
            staticcall stor2.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return ext_call.return_data[0], 
                   ext_call.return_data[0],
                   _userTotals[address(msg.sender)].field_256,
                   _totalStakingShareSeconds,
                   0 / _totalStakingShareSeconds,
                   block.timestamp
        require ext_call.return_data[0]
        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
    ('eq', ('div', ('mul', ('ext_call.return_data', 0, 32), ('field', 256, ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', '_userTotals', 12))))), ('ext_call.return_data', 0, 32)), ('field', 256, ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', '_userTotals', 12)))))
    if _totalStakingShareSeconds <= 0:
        revert with 0, 'SafeMath: division by zero'
    require _totalStakingShareSeconds
    require ext_code.size(stor3)
    staticcall stor3.balance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor2)
    staticcall stor2.balance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0], 
           ext_call.return_data[0],
           _userTotals[address(msg.sender)].field_256,
           _totalStakingShareSeconds,
           ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / _totalStakingShareSeconds,
           block.timestamp
}

function lockTokens(uint256 arg1, uint256 arg2) payable {
    mem[64] = 96
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if unlockSchedules.length >= _maxUnlockSchedules:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    45,
                    0x6f546f6b656e4765797365723a2072656163686564206d6178696d756d20756e6c6f636b207363686564756c65,
                    mem[209 len 19]
    require ext_code.size(stor3)
    staticcall stor3.balance() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not totalLockedShares:
        if ext_call.return_data[0] > 0:
            require ext_code.size(stor3)
            call stor3.0xa9059cbb with:
                 gas gas_remaining wei
                args stor2, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            47,
                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                            mem[211 len 17]
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
        if _lastAccountingTimestampSec > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.timestamp - _lastAccountingTimestampSec:
            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                revert with 0, 'SafeMath: addition overflow'
        else:
            require block.timestamp - _lastAccountingTimestampSec
            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                revert with 0, 'SafeMath: addition overflow'
            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
        _lastAccountingTimestampSec = block.timestamp
        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                revert with 0, 'SafeMath: addition overflow'
        else:
            require block.timestamp - _userTotals[address(msg.sender)].field_512
            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                revert with 0, 'SafeMath: addition overflow'
            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
        _userTotals[address(msg.sender)].field_512 = block.timestamp
        if _totalStakingShareSeconds <= 0:
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor2)
            staticcall stor2.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] <= 0:
                if not arg1:
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = 0
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                else:
                    require arg1
                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalLockedShares += arg1 * _initialSharesPerToken
                require ext_code.size(stor3)
                staticcall stor3.0xfc0c546a with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).0x23b872dd with:
                     gas gas_remaining wei
                    args msg.sender, stor3, arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    revert with 0, 
                                32,
                                45,
                                0xfe546f6b656e4765797365723a207472616e7366657220696e746f206c6f636b656420706f6f6c206661696c65,
                                mem[497 len 19]
            else:
                if not totalLockedShares:
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalLockedShares += 0 / ext_call.return_data[0]
                else:
                    require totalLockedShares
                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                require ext_code.size(stor3)
                staticcall stor3.0xfc0c546a with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).0x23b872dd with:
                     gas gas_remaining wei
                    args msg.sender, stor3, arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    revert with 0, 
                                32,
                                45,
                                0xfe546f6b656e4765797365723a207472616e7366657220696e746f206c6f636b656420706f6f6c206661696c65,
                                mem[561 len 19]
        else:
            require ext_code.size(stor2)
            staticcall stor2.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0]:
                require ext_call.return_data[0]
                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            if _totalStakingShareSeconds <= 0:
                revert with 0, 'SafeMath: division by zero'
            require _totalStakingShareSeconds
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor2)
            staticcall stor2.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] <= 0:
                if not arg1:
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = 0
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                else:
                    require arg1
                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalLockedShares += arg1 * _initialSharesPerToken
                require ext_code.size(stor3)
                staticcall stor3.0xfc0c546a with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).0x23b872dd with:
                     gas gas_remaining wei
                    args msg.sender, stor3, arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    revert with 0, 
                                32,
                                45,
                                0xfe546f6b656e4765797365723a207472616e7366657220696e746f206c6f636b656420706f6f6c206661696c65,
                                mem[561 len 19]
            else:
                if not totalLockedShares:
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalLockedShares += 0 / ext_call.return_data[0]
                else:
                    require totalLockedShares
                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                require ext_code.size(stor3)
                staticcall stor3.0xfc0c546a with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).0x23b872dd with:
                     gas gas_remaining wei
                    args msg.sender, stor3, arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    revert with 0, 
                                32,
                                45,
                                0xfe546f6b656e4765797365723a207472616e7366657220696e746f206c6f636b656420706f6f6c206661696c65,
                                mem[625 len 19]
    else:
        idx = 0
        while idx < unlockSchedules.length:
            mem[0] = 14
            if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                idx = idx + 1
                continue 
            if block.timestamp >= unlockSchedules[idx].field_768:
                _7627 = mem[64]
                mem[64] = mem[64] + 64
                mem[_7627] = 30
                mem[_7627 + 32] = 'SafeMath: subtraction overflow'
                if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                    unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                    if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                    if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    continue 
                _7634 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_7634 + idx + 68] = mem[_7627 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_7634 + 68] = mem[_7634 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _7634 + -mem[64] + 100
            _7626 = mem[64]
            mem[64] = mem[64] + 64
            mem[_7626] = 30
            mem[_7626 + 32] = 'SafeMath: subtraction overflow'
            if unlockSchedules[idx].field_512 > block.timestamp:
                _7631 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_7631 + idx + 68] = mem[_7626 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_7631 + 68] = mem[_7631 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _7631 + -mem[64] + 100
            if not block.timestamp - unlockSchedules[idx].field_512:
                _7657 = mem[64]
                mem[64] = mem[64] + 64
                mem[_7657] = 26
                mem[_7657 + 32] = 'SafeMath: division by zero'
                if unlockSchedules[idx].field_1024 > 0:
                    require unlockSchedules[idx].field_1024
                    unlockSchedules[idx].field_512 = block.timestamp
                    if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                    if 0 / unlockSchedules[idx].field_1024 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    continue 
                _7662 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_7662 + idx + 68] = mem[_7657 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_7662 + 68] = mem[_7662 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _7662 + -mem[64] + 100
            require block.timestamp - unlockSchedules[idx].field_512
            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _7661 = mem[64]
            mem[64] = mem[64] + 64
            mem[_7661] = 26
            mem[_7661 + 32] = 'SafeMath: division by zero'
            if unlockSchedules[idx].field_1024 > 0:
                require unlockSchedules[idx].field_1024
                unlockSchedules[idx].field_512 = block.timestamp
                if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                    revert with 0, 'SafeMath: addition overflow'
                unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _7670 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_7670 + idx + 68] = mem[_7661 + idx + 32]
                idx = idx + 32
                continue 
            mem[_7670 + 68] = mem[_7670 + 74 len 26]
            revert with memory
              from mem[64]
               len _7670 + -mem[64] + 100
        _7625 = mem[64]
        mem[64] = mem[64] + 64
        mem[_7625] = 26
        mem[_7625 + 32] = 'SafeMath: division by zero'
        if totalLockedShares <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalLockedShares
        _7646 = mem[64]
        mem[64] = mem[64] + 64
        mem[_7646] = 30
        mem[_7646 + 32] = 'SafeMath: subtraction overflow'
        if 0 > totalLockedShares:
            revert with 0, 'SafeMath: subtraction overflow'
        if 0 / totalLockedShares <= 0:
            _7674 = mem[64]
            mem[64] = mem[64] + 64
            mem[_7674] = 30
            mem[_7674 + 32] = 'SafeMath: subtraction overflow'
            if _lastAccountingTimestampSec > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.timestamp - _lastAccountingTimestampSec:
                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 12
                _7715 = mem[64]
                mem[64] = mem[64] + 64
                mem[_7715] = 30
                mem[_7715 + 32] = 'SafeMath: subtraction overflow'
                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8039 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8039 + 32] = 0
                                mem[_8039] = 0
                                mem[_8039 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8039 + 96] = block.timestamp + arg2
                                mem[_8039 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8085 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8085 + 32] = 0
                                mem[_8085] = arg1 * _initialSharesPerToken
                                mem[_8085 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8085 + 96] = block.timestamp + arg2
                                mem[_8085 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8015 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8015] = 26
                                mem[_8015 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8224 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8224 + 32] = 0
                                mem[_8224] = 0 / ext_call.return_data[0]
                                mem[_8224 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8224 + 96] = block.timestamp + arg2
                                mem[_8224 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8058 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8058] = 26
                                mem[_8058 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8308 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8308 + 32] = 0
                                mem[_8308] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_8308 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8308 + 96] = block.timestamp + arg2
                                mem[_8308 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _7822 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7822] = 26
                            mem[_7822 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8588 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8588 + 32] = 0
                                    mem[_8588] = 0
                                    mem[_8588 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8588 + 96] = block.timestamp + arg2
                                    mem[_8588 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8718 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8718 + 32] = 0
                                    mem[_8718] = arg1 * _initialSharesPerToken
                                    mem[_8718 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8718 + 96] = block.timestamp + arg2
                                    mem[_8718 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8543 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8543] = 26
                                    mem[_8543 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9006 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9006 + 32] = 0
                                    mem[_9006] = 0 / ext_call.return_data[0]
                                    mem[_9006 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9006 + 96] = block.timestamp + arg2
                                    mem[_9006 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8643 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8643] = 26
                                    mem[_8643 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9197 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9197 + 32] = 0
                                    mem[_9197] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9197 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9197 + 96] = block.timestamp + arg2
                                    mem[_9197 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _7842 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7842] = 26
                            mem[_7842 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8717 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8717 + 32] = 0
                                    mem[_8717] = 0
                                    mem[_8717 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8717 + 96] = block.timestamp + arg2
                                    mem[_8717 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8848 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8848 + 32] = 0
                                    mem[_8848] = arg1 * _initialSharesPerToken
                                    mem[_8848 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8848 + 96] = block.timestamp + arg2
                                    mem[_8848 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8642 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8642] = 26
                                    mem[_8642 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9188 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9188 + 32] = 0
                                    mem[_9188] = 0 / ext_call.return_data[0]
                                    mem[_9188 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9188 + 96] = block.timestamp + arg2
                                    mem[_9188 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8768 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8768] = 26
                                    mem[_8768 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9360 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9360 + 32] = 0
                                    mem[_9360] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9360 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9360 + 96] = block.timestamp + arg2
                                    mem[_9360 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                else:
                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8083 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8083 + 32] = 0
                                mem[_8083] = 0
                                mem[_8083 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8083 + 96] = block.timestamp + arg2
                                mem[_8083 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8138 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8138 + 32] = 0
                                mem[_8138] = arg1 * _initialSharesPerToken
                                mem[_8138 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8138 + 96] = block.timestamp + arg2
                                mem[_8138 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8056 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8056] = 26
                                mem[_8056 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8298 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8298 + 32] = 0
                                mem[_8298] = 0 / ext_call.return_data[0]
                                mem[_8298 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8298 + 96] = block.timestamp + arg2
                                mem[_8298 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8108 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8108] = 26
                                mem[_8108 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8364 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8364 + 32] = 0
                                mem[_8364] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_8364 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8364 + 96] = block.timestamp + arg2
                                mem[_8364 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _7840 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7840] = 26
                            mem[_7840 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8710 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8710 + 32] = 0
                                    mem[_8710] = 0
                                    mem[_8710 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8710 + 96] = block.timestamp + arg2
                                    mem[_8710 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8843 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8843 + 32] = 0
                                    mem[_8843] = arg1 * _initialSharesPerToken
                                    mem[_8843 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8843 + 96] = block.timestamp + arg2
                                    mem[_8843 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8636 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8636] = 26
                                    mem[_8636 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9172 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9172 + 32] = 0
                                    mem[_9172] = 0 / ext_call.return_data[0]
                                    mem[_9172 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9172 + 96] = block.timestamp + arg2
                                    mem[_9172 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8759 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8759] = 26
                                    mem[_8759 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9354 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9354 + 32] = 0
                                    mem[_9354] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9354 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9354 + 96] = block.timestamp + arg2
                                    mem[_9354 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _7866 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7866] = 26
                            mem[_7866 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8842 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8842 + 32] = 0
                                    mem[_8842] = 0
                                    mem[_8842 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8842 + 96] = block.timestamp + arg2
                                    mem[_8842 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8983 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8983 + 32] = 0
                                    mem[_8983] = arg1 * _initialSharesPerToken
                                    mem[_8983 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8983 + 96] = block.timestamp + arg2
                                    mem[_8983 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8758 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8758] = 26
                                    mem[_8758 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9345 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9345 + 32] = 0
                                    mem[_9345] = 0 / ext_call.return_data[0]
                                    mem[_9345 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9345 + 96] = block.timestamp + arg2
                                    mem[_9345 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8904 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8904] = 26
                                    mem[_8904 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9505 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9505 + 32] = 0
                                    mem[_9505] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9505 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9505 + 96] = block.timestamp + arg2
                                    mem[_9505 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
            else:
                require block.timestamp - _lastAccountingTimestampSec
                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 12
                _7720 = mem[64]
                mem[64] = mem[64] + 64
                mem[_7720] = 30
                mem[_7720 + 32] = 'SafeMath: subtraction overflow'
                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8079 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8079 + 32] = 0
                                mem[_8079] = 0
                                mem[_8079 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8079 + 96] = block.timestamp + arg2
                                mem[_8079 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8136 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8136 + 32] = 0
                                mem[_8136] = arg1 * _initialSharesPerToken
                                mem[_8136 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8136 + 96] = block.timestamp + arg2
                                mem[_8136 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8055 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8055] = 26
                                mem[_8055 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8284 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8284 + 32] = 0
                                mem[_8284] = 0 / ext_call.return_data[0]
                                mem[_8284 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8284 + 96] = block.timestamp + arg2
                                mem[_8284 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8103 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8103] = 26
                                mem[_8103 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8360 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8360 + 32] = 0
                                mem[_8360] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_8360 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8360 + 96] = block.timestamp + arg2
                                mem[_8360 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _7838 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7838] = 26
                            mem[_7838 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8699 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8699 + 32] = 0
                                    mem[_8699] = 0
                                    mem[_8699 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8699 + 96] = block.timestamp + arg2
                                    mem[_8699 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8837 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8837 + 32] = 0
                                    mem[_8837] = arg1 * _initialSharesPerToken
                                    mem[_8837 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8837 + 96] = block.timestamp + arg2
                                    mem[_8837 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8630 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8630] = 26
                                    mem[_8630 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9148 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9148 + 32] = 0
                                    mem[_9148] = 0 / ext_call.return_data[0]
                                    mem[_9148 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9148 + 96] = block.timestamp + arg2
                                    mem[_9148 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8749 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8749] = 26
                                    mem[_8749 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9337 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9337 + 32] = 0
                                    mem[_9337] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9337 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9337 + 96] = block.timestamp + arg2
                                    mem[_9337 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _7862 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7862] = 26
                            mem[_7862 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8836 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8836 + 32] = 0
                                    mem[_8836] = 0
                                    mem[_8836 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8836 + 96] = block.timestamp + arg2
                                    mem[_8836 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8970 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8970 + 32] = 0
                                    mem[_8970] = arg1 * _initialSharesPerToken
                                    mem[_8970 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8970 + 96] = block.timestamp + arg2
                                    mem[_8970 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8748 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8748] = 26
                                    mem[_8748 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9328 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9328 + 32] = 0
                                    mem[_9328] = 0 / ext_call.return_data[0]
                                    mem[_9328 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9328 + 96] = block.timestamp + arg2
                                    mem[_9328 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8889 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8889] = 26
                                    mem[_8889 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9490 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9490 + 32] = 0
                                    mem[_9490] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9490 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9490 + 96] = block.timestamp + arg2
                                    mem[_9490 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                else:
                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8134 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8134 + 32] = 0
                                mem[_8134] = 0
                                mem[_8134 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8134 + 96] = block.timestamp + arg2
                                mem[_8134 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8198 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8198 + 32] = 0
                                mem[_8198] = arg1 * _initialSharesPerToken
                                mem[_8198 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8198 + 96] = block.timestamp + arg2
                                mem[_8198 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8101 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8101] = 26
                                mem[_8101 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8350 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8350 + 32] = 0
                                mem[_8350] = 0 / ext_call.return_data[0]
                                mem[_8350 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8350 + 96] = block.timestamp + arg2
                                mem[_8350 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8161 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8161] = 26
                                mem[_8161 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8423 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8423 + 32] = 0
                                mem[_8423] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_8423 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8423 + 96] = block.timestamp + arg2
                                mem[_8423 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _7860 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7860] = 26
                            mem[_7860 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8829 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8829 + 32] = 0
                                    mem[_8829] = 0
                                    mem[_8829 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8829 + 96] = block.timestamp + arg2
                                    mem[_8829 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8965 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8965 + 32] = 0
                                    mem[_8965] = arg1 * _initialSharesPerToken
                                    mem[_8965 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8965 + 96] = block.timestamp + arg2
                                    mem[_8965 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8742 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8742] = 26
                                    mem[_8742 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9312 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9312 + 32] = 0
                                    mem[_9312] = 0 / ext_call.return_data[0]
                                    mem[_9312 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9312 + 96] = block.timestamp + arg2
                                    mem[_9312 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8880 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8880] = 26
                                    mem[_8880 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9484 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9484 + 32] = 0
                                    mem[_9484] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9484 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9484 + 96] = block.timestamp + arg2
                                    mem[_9484 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _7892 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7892] = 26
                            mem[_7892 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8964 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8964 + 32] = 0
                                    mem[_8964] = 0
                                    mem[_8964 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8964 + 96] = block.timestamp + arg2
                                    mem[_8964 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9125 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9125 + 32] = 0
                                    mem[_9125] = arg1 * _initialSharesPerToken
                                    mem[_9125 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9125 + 96] = block.timestamp + arg2
                                    mem[_9125 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8879 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8879] = 26
                                    mem[_8879 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9475 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9475 + 32] = 0
                                    mem[_9475] = 0 / ext_call.return_data[0]
                                    mem[_9475 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9475 + 96] = block.timestamp + arg2
                                    mem[_9475 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9039 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9039] = 26
                                    mem[_9039 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9652 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9652 + 32] = 0
                                    mem[_9652] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9652 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9652 + 96] = block.timestamp + arg2
                                    mem[_9652 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
        else:
            mem[mem[64] + 36] = 0 / totalLockedShares
            require ext_code.size(stor3)
            call stor3.0xa9059cbb with:
                 gas gas_remaining wei
                args stor2, 0 / totalLockedShares
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 
                            32,
                            47,
                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                            mem[mem[64] + 115 len 17]
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[mem[64] + 32] = ext_call.return_data[0]
            emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
            _7709 = mem[64]
            mem[64] = mem[64] + 64
            mem[_7709] = 30
            mem[_7709 + 32] = 'SafeMath: subtraction overflow'
            if _lastAccountingTimestampSec > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.timestamp - _lastAccountingTimestampSec:
                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 12
                _7752 = mem[64]
                mem[64] = mem[64] + 64
                mem[_7752] = 30
                mem[_7752 + 32] = 'SafeMath: subtraction overflow'
                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8394 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8394 + 32] = 0
                                mem[_8394] = 0
                                mem[_8394 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8394 + 96] = block.timestamp + arg2
                                mem[_8394 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8472 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8472 + 32] = 0
                                mem[_8472] = arg1 * _initialSharesPerToken
                                mem[_8472 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8472 + 96] = block.timestamp + arg2
                                mem[_8472 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8344 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8344] = 26
                                mem[_8344 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8679 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8679 + 32] = 0
                                mem[_8679] = 0 / ext_call.return_data[0]
                                mem[_8679 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8679 + 96] = block.timestamp + arg2
                                mem[_8679 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8418 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8418] = 26
                                mem[_8418 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8822 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8822 + 32] = 0
                                mem[_8822] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_8822 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8822 + 96] = block.timestamp + arg2
                                mem[_8822 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _7971 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7971] = 26
                            mem[_7971 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9396 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9396 + 32] = 0
                                    mem[_9396] = 0
                                    mem[_9396 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9396 + 96] = block.timestamp + arg2
                                    mem[_9396 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9573 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9573 + 32] = 0
                                    mem[_9573] = arg1 * _initialSharesPerToken
                                    mem[_9573 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9573 + 96] = block.timestamp + arg2
                                    mem[_9573 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9296 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9296] = 26
                                    mem[_9296 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9959 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9959 + 32] = 0
                                    mem[_9959] = 0 / ext_call.return_data[0]
                                    mem[_9959 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9959 + 96] = block.timestamp + arg2
                                    mem[_9959 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9464 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9464] = 26
                                    mem[_9464 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10178 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10178 + 32] = 0
                                    mem[_10178] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10178 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10178 + 96] = block.timestamp + arg2
                                    mem[_10178 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _8006 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8006] = 26
                            mem[_8006 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9572 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9572 + 32] = 0
                                    mem[_9572] = 0
                                    mem[_9572 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9572 + 96] = block.timestamp + arg2
                                    mem[_9572 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9753 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9753 + 32] = 0
                                    mem[_9753] = arg1 * _initialSharesPerToken
                                    mem[_9753 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9753 + 96] = block.timestamp + arg2
                                    mem[_9753 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9463 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9463] = 26
                                    mem[_9463 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10169 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10169 + 32] = 0
                                    mem[_10169] = 0 / ext_call.return_data[0]
                                    mem[_10169 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10169 + 96] = block.timestamp + arg2
                                    mem[_10169 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9637 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9637] = 26
                                    mem[_9637 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10359 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10359 + 32] = 0
                                    mem[_10359] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10359 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10359 + 96] = block.timestamp + arg2
                                    mem[_10359 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                else:
                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8470 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8470 + 32] = 0
                                mem[_8470] = 0
                                mem[_8470 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8470 + 96] = block.timestamp + arg2
                                mem[_8470 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8556 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8556 + 32] = 0
                                mem[_8556] = arg1 * _initialSharesPerToken
                                mem[_8556 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8556 + 96] = block.timestamp + arg2
                                mem[_8556 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8416 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8416] = 26
                                mem[_8416 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8812 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8812 + 32] = 0
                                mem[_8812] = 0 / ext_call.return_data[0]
                                mem[_8812 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8812 + 96] = block.timestamp + arg2
                                mem[_8812 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8499 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8499] = 26
                                mem[_8499 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8952 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8952 + 32] = 0
                                mem[_8952] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_8952 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8952 + 96] = block.timestamp + arg2
                                mem[_8952 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _8004 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8004] = 26
                            mem[_8004 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9565 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9565 + 32] = 0
                                    mem[_9565] = 0
                                    mem[_9565 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9565 + 96] = block.timestamp + arg2
                                    mem[_9565 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9748 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9748 + 32] = 0
                                    mem[_9748] = arg1 * _initialSharesPerToken
                                    mem[_9748 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9748 + 96] = block.timestamp + arg2
                                    mem[_9748 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9457 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9457] = 26
                                    mem[_9457 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10153 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10153 + 32] = 0
                                    mem[_10153] = 0 / ext_call.return_data[0]
                                    mem[_10153 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10153 + 96] = block.timestamp + arg2
                                    mem[_10153 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9628 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9628] = 26
                                    mem[_9628 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10353 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10353 + 32] = 0
                                    mem[_10353] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10353 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10353 + 96] = block.timestamp + arg2
                                    mem[_10353 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _8046 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8046] = 26
                            mem[_8046 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9747 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9747 + 32] = 0
                                    mem[_9747] = 0
                                    mem[_9747 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9747 + 96] = block.timestamp + arg2
                                    mem[_9747 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9936 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9936 + 32] = 0
                                    mem[_9936] = arg1 * _initialSharesPerToken
                                    mem[_9936 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9936 + 96] = block.timestamp + arg2
                                    mem[_9936 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9627 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9627] = 26
                                    mem[_9627 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10344 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10344 + 32] = 0
                                    mem[_10344] = 0 / ext_call.return_data[0]
                                    mem[_10344 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10344 + 96] = block.timestamp + arg2
                                    mem[_10344 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9821 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9821] = 26
                                    mem[_9821 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10511 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10511 + 32] = 0
                                    mem[_10511] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10511 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10511 + 96] = block.timestamp + arg2
                                    mem[_10511 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
            else:
                require block.timestamp - _lastAccountingTimestampSec
                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 12
                _7758 = mem[64]
                mem[64] = mem[64] + 64
                mem[_7758] = 30
                mem[_7758 + 32] = 'SafeMath: subtraction overflow'
                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8466 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8466 + 32] = 0
                                mem[_8466] = 0
                                mem[_8466 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8466 + 96] = block.timestamp + arg2
                                mem[_8466 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8554 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8554 + 32] = 0
                                mem[_8554] = arg1 * _initialSharesPerToken
                                mem[_8554 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8554 + 96] = block.timestamp + arg2
                                mem[_8554 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8415 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8415] = 26
                                mem[_8415 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8798 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8798 + 32] = 0
                                mem[_8798] = 0 / ext_call.return_data[0]
                                mem[_8798 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8798 + 96] = block.timestamp + arg2
                                mem[_8798 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8494 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8494] = 26
                                mem[_8494 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8948 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8948 + 32] = 0
                                mem[_8948] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_8948 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8948 + 96] = block.timestamp + arg2
                                mem[_8948 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _8002 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8002] = 26
                            mem[_8002 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9554 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9554 + 32] = 0
                                    mem[_9554] = 0
                                    mem[_9554 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9554 + 96] = block.timestamp + arg2
                                    mem[_9554 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9742 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9742 + 32] = 0
                                    mem[_9742] = arg1 * _initialSharesPerToken
                                    mem[_9742 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9742 + 96] = block.timestamp + arg2
                                    mem[_9742 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9451 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9451] = 26
                                    mem[_9451 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10129 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10129 + 32] = 0
                                    mem[_10129] = 0 / ext_call.return_data[0]
                                    mem[_10129 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10129 + 96] = block.timestamp + arg2
                                    mem[_10129 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9618 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9618] = 26
                                    mem[_9618 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10336 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10336 + 32] = 0
                                    mem[_10336] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10336 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10336 + 96] = block.timestamp + arg2
                                    mem[_10336 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _8042 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8042] = 26
                            mem[_8042 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9741 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9741 + 32] = 0
                                    mem[_9741] = 0
                                    mem[_9741 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9741 + 96] = block.timestamp + arg2
                                    mem[_9741 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9923 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9923 + 32] = 0
                                    mem[_9923] = arg1 * _initialSharesPerToken
                                    mem[_9923 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9923 + 96] = block.timestamp + arg2
                                    mem[_9923 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9617 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9617] = 26
                                    mem[_9617 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10327 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10327 + 32] = 0
                                    mem[_10327] = 0 / ext_call.return_data[0]
                                    mem[_10327 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10327 + 96] = block.timestamp + arg2
                                    mem[_10327 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9806 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9806] = 26
                                    mem[_9806 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10496 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10496 + 32] = 0
                                    mem[_10496] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10496 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10496 + 96] = block.timestamp + arg2
                                    mem[_10496 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                else:
                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8552 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8552 + 32] = 0
                                mem[_8552] = 0
                                mem[_8552 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8552 + 96] = block.timestamp + arg2
                                mem[_8552 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8653 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8653 + 32] = 0
                                mem[_8653] = arg1 * _initialSharesPerToken
                                mem[_8653 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8653 + 96] = block.timestamp + arg2
                                mem[_8653 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8492 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8492] = 26
                                mem[_8492 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8938 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8938 + 32] = 0
                                mem[_8938] = 0 / ext_call.return_data[0]
                                mem[_8938 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8938 + 96] = block.timestamp + arg2
                                mem[_8938 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8596 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8596] = 26
                                mem[_8596 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _9092 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_9092 + 32] = 0
                                mem[_9092] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_9092 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_9092 + 96] = block.timestamp + arg2
                                mem[_9092 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _8040 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8040] = 26
                            mem[_8040 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9734 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9734 + 32] = 0
                                    mem[_9734] = 0
                                    mem[_9734 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9734 + 96] = block.timestamp + arg2
                                    mem[_9734 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9918 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9918 + 32] = 0
                                    mem[_9918] = arg1 * _initialSharesPerToken
                                    mem[_9918 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9918 + 96] = block.timestamp + arg2
                                    mem[_9918 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9611 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9611] = 26
                                    mem[_9611 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10311 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10311 + 32] = 0
                                    mem[_10311] = 0 / ext_call.return_data[0]
                                    mem[_10311 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10311 + 96] = block.timestamp + arg2
                                    mem[_10311 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9797 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9797] = 26
                                    mem[_9797 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10490 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10490 + 32] = 0
                                    mem[_10490] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10490 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10490 + 96] = block.timestamp + arg2
                                    mem[_10490 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _8086 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8086] = 26
                            mem[_8086 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9917 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9917 + 32] = 0
                                    mem[_9917] = 0
                                    mem[_9917 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9917 + 96] = block.timestamp + arg2
                                    mem[_9917 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _10106 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10106 + 32] = 0
                                    mem[_10106] = arg1 * _initialSharesPerToken
                                    mem[_10106 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10106 + 96] = block.timestamp + arg2
                                    mem[_10106 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9796 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9796] = 26
                                    mem[_9796 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10481 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10481 + 32] = 0
                                    mem[_10481] = 0 / ext_call.return_data[0]
                                    mem[_10481 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10481 + 96] = block.timestamp + arg2
                                    mem[_10481 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _10007 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_10007] = 26
                                    mem[_10007 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10640 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10640 + 32] = 0
                                    mem[_10640] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10640 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10640 + 96] = block.timestamp + arg2
                                    mem[_10640 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
        require ext_code.size(stor3)
        staticcall stor3.0xfc0c546a with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        call address(ext_call.return_data[0]).0x23b872dd with:
             gas gas_remaining wei
            args msg.sender, stor3, arg1
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            revert with 0, 
                        32,
                        45,
                        0xfe546f6b656e4765797365723a207472616e7366657220696e746f206c6f636b656420706f6f6c206661696c65,
                        mem[mem[64] + 113 len 19]
    ('bool', ('ext_call.return_data', 0, 32))
    require ext_code.size(stor3)
    staticcall stor3.balance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    emit TokensLocked(arg1, arg2, ext_call.return_data[0]);
}

function stake(uint256 arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    if arg1 <= 0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x64546f6b656e4765797365723a207374616b6520616d6f756e74206973207a6572,
                    mem[197 len 31]
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    40,
                    0x73546f6b656e4765797365723a2062656e6566696369617279206973207a65726f20616464726573,
                    mem[204 len 24]
    if not totalStakingShares:
        if totalStakingShares <= 0:
            if not arg1:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            38,
                            0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c,
                            mem[202 len 26]
            require arg1
            if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if arg1 * _initialSharesPerToken <= 0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            38,
                            0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c,
                            mem[202 len 26]
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not totalLockedShares:
                if ext_call.return_data[0] > 0:
                    require ext_code.size(stor3)
                    call stor3.0xa9059cbb with:
                         gas gas_remaining wei
                        args stor2, ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    47,
                                    0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                    mem[211 len 17]
                    require ext_code.size(stor3)
                    staticcall stor3.balance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                if _lastAccountingTimestampSec > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.timestamp - _lastAccountingTimestampSec:
                    if _totalStakingShareSeconds < _totalStakingShareSeconds:
                        revert with 0, 'SafeMath: addition overflow'
                else:
                    require block.timestamp - _lastAccountingTimestampSec
                    if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                        revert with 0, 'SafeMath: addition overflow'
                    _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                _lastAccountingTimestampSec = block.timestamp
                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                else:
                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                _userTotals[address(msg.sender)].field_512 = block.timestamp
                if _totalStakingShareSeconds <= 0:
                    require ext_code.size(stor3)
                    staticcall stor3.balance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor2)
                    staticcall stor2.balance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    _userStakes[address(msg.sender)].field_0++
                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalStakingShares += arg1 * _initialSharesPerToken
                    require ext_code.size(stor1)
                    staticcall stor1.0xfc0c546a with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    call address(ext_call.return_data[0]).0x23b872dd with:
                         gas gas_remaining wei
                        args msg.sender, stor1, arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        revert with 0, 
                                    32,
                                    46,
                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                    mem[466 len 18]
                    if totalStakingShares <= 0:
                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                    arg1,
                                    0,
                                    96,
                                    0,
                                    mem[480],
                                    msg.sender,
                    else:
                        require ext_code.size(stor1)
                        staticcall stor1.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if totalStakingShares <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalStakingShares
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0 / totalStakingShares,
                                        96,
                                        0,
                                        mem[544],
                                        msg.sender,
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if totalStakingShares <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalStakingShares
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                        96,
                                        0,
                                        mem[544],
                                        msg.sender,
                else:
                    require ext_code.size(stor2)
                    staticcall stor2.balance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0]:
                        require ext_call.return_data[0]
                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    if _totalStakingShareSeconds <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require _totalStakingShareSeconds
                    require ext_code.size(stor3)
                    staticcall stor3.balance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor2)
                    staticcall stor2.balance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    _userStakes[address(msg.sender)].field_0++
                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalStakingShares += arg1 * _initialSharesPerToken
                    require ext_code.size(stor1)
                    staticcall stor1.0xfc0c546a with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    call address(ext_call.return_data[0]).0x23b872dd with:
                         gas gas_remaining wei
                        args msg.sender, stor1, arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        revert with 0, 
                                    32,
                                    46,
                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                    mem[530 len 18]
                    if totalStakingShares <= 0:
                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                    arg1,
                                    0,
                                    96,
                                    0,
                                    mem[544],
                                    msg.sender,
                    else:
                        require ext_code.size(stor1)
                        staticcall stor1.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if totalStakingShares <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalStakingShares
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0 / totalStakingShares,
                                        96,
                                        0,
                                        mem[608],
                                        msg.sender,
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if totalStakingShares <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalStakingShares
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                        96,
                                        0,
                                        mem[608],
                                        msg.sender,
            else:
                idx = 0
                while idx < unlockSchedules.length:
                    mem[0] = 14
                    if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                        idx = idx + 1
                        continue 
                    if block.timestamp >= unlockSchedules[idx].field_768:
                        _22203 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22203] = 30
                        mem[_22203 + 32] = 'SafeMath: subtraction overflow'
                        if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                            unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                            if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                            if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _22237 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_22237 + idx + 68] = mem[_22203 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_22237 + 68] = mem[_22237 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _22237 + -mem[64] + 100
                    _22202 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22202] = 30
                    mem[_22202 + 32] = 'SafeMath: subtraction overflow'
                    if unlockSchedules[idx].field_512 > block.timestamp:
                        _22234 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_22234 + idx + 68] = mem[_22202 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_22234 + 68] = mem[_22234 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _22234 + -mem[64] + 100
                    if not block.timestamp - unlockSchedules[idx].field_512:
                        _22389 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22389] = 26
                        mem[_22389 + 32] = 'SafeMath: division by zero'
                        if unlockSchedules[idx].field_1024 > 0:
                            require unlockSchedules[idx].field_1024
                            unlockSchedules[idx].field_512 = block.timestamp
                            if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                            if 0 / unlockSchedules[idx].field_1024 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _22414 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_22414 + idx + 68] = mem[_22389 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_22414 + 68] = mem[_22414 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _22414 + -mem[64] + 100
                    require block.timestamp - unlockSchedules[idx].field_512
                    if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _22413 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22413] = 26
                    mem[_22413 + 32] = 'SafeMath: division by zero'
                    if unlockSchedules[idx].field_1024 > 0:
                        require unlockSchedules[idx].field_1024
                        unlockSchedules[idx].field_512 = block.timestamp
                        if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                        unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                        if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        continue 
                    _22473 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_22473 + idx + 68] = mem[_22413 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_22473 + 68] = mem[_22473 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _22473 + -mem[64] + 100
                _22201 = mem[64]
                mem[64] = mem[64] + 64
                mem[_22201] = 26
                mem[_22201 + 32] = 'SafeMath: division by zero'
                if totalLockedShares <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require totalLockedShares
                _22329 = mem[64]
                mem[64] = mem[64] + 64
                mem[_22329] = 30
                mem[_22329 + 32] = 'SafeMath: subtraction overflow'
                if 0 > totalLockedShares:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 / totalLockedShares <= 0:
                    _22497 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22497] = 30
                    mem[_22497 + 32] = 'SafeMath: subtraction overflow'
                    if _lastAccountingTimestampSec > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _lastAccountingTimestampSec:
                        if _totalStakingShareSeconds < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _lastAccountingTimestampSec = block.timestamp
                        mem[0] = msg.sender
                        mem[32] = 12
                        _22737 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22737] = 30
                        mem[_22737 + 32] = 'SafeMath: subtraction overflow'
                        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _23856 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_23856] = 0
                                mem[_23856 + 32] = 0
                                _23985 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_23985] = arg1 * _initialSharesPerToken
                                mem[_23985 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _27136 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27136] = 26
                                        mem[_27136 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _27409 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27409] = 26
                                        mem[_27409 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _23389 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23389] = 26
                                    mem[_23389 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25871 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25871] = 0
                                    mem[_25871 + 32] = 0
                                    _26051 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26051] = arg1 * _initialSharesPerToken
                                    mem[_26051 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29658 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29658] = 26
                                            mem[_29658 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29932 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29932] = 26
                                            mem[_29932 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _23503 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23503] = 26
                                    mem[_23503 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _26197 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26197] = 0
                                    mem[_26197 + 32] = 0
                                    _26371 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26371] = arg1 * _initialSharesPerToken
                                    mem[_26371 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29931 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29931] = 26
                                            mem[_29931 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _30272 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30272] = 26
                                            mem[_30272 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                        else:
                            require block.timestamp - _userTotals[address(msg.sender)].field_512
                            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _24090 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24090] = 0
                                mem[_24090 + 32] = 0
                                _24220 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24220] = arg1 * _initialSharesPerToken
                                mem[_24220 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _27407 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27407] = 26
                                        mem[_27407 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _27747 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27747] = 26
                                        mem[_27747 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _23501 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23501] = 26
                                    mem[_23501 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _26194 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26194] = 0
                                    mem[_26194 + 32] = 0
                                    _26365 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26365] = arg1 * _initialSharesPerToken
                                    mem[_26365 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29930 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29930] = 26
                                            mem[_29930 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _30268 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30268] = 26
                                            mem[_30268 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _23654 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23654] = 26
                                    mem[_23654 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _26544 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26544] = 0
                                    mem[_26544 + 32] = 0
                                    _26698 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26698] = arg1 * _initialSharesPerToken
                                    mem[_26698 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _30267 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30267] = 26
                                            mem[_30267 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _30638 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30638] = 26
                                            mem[_30638 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                    else:
                        require block.timestamp - _lastAccountingTimestampSec
                        if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                        _lastAccountingTimestampSec = block.timestamp
                        mem[0] = msg.sender
                        mem[32] = 12
                        _22775 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22775] = 30
                        mem[_22775 + 32] = 'SafeMath: subtraction overflow'
                        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _24087 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24087] = 0
                                mem[_24087 + 32] = 0
                                _24211 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24211] = arg1 * _initialSharesPerToken
                                mem[_24211 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _27405 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27405] = 26
                                        mem[_27405 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _27742 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27742] = 26
                                        mem[_27742 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _23499 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23499] = 26
                                    mem[_23499 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _26189 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26189] = 0
                                    mem[_26189 + 32] = 0
                                    _26359 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26359] = arg1 * _initialSharesPerToken
                                    mem[_26359 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29929 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29929] = 26
                                            mem[_29929 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _30263 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30263] = 26
                                            mem[_30263 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _23649 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23649] = 26
                                    mem[_23649 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _26542 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26542] = 0
                                    mem[_26542 + 32] = 0
                                    _26691 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26691] = arg1 * _initialSharesPerToken
                                    mem[_26691 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _30262 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30262] = 26
                                            mem[_30262 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _30630 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30630] = 26
                                            mem[_30630 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                        else:
                            require block.timestamp - _userTotals[address(msg.sender)].field_512
                            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _24359 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24359] = 0
                                mem[_24359 + 32] = 0
                                _24457 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24457] = arg1 * _initialSharesPerToken
                                mem[_24457 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _27740 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27740] = 26
                                        mem[_27740 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _28148 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28148] = 26
                                        mem[_28148 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _23647 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23647] = 26
                                    mem[_23647 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _26539 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26539] = 0
                                    mem[_26539 + 32] = 0
                                    _26685 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26685] = arg1 * _initialSharesPerToken
                                    mem[_26685 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _30261 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30261] = 26
                                            mem[_30261 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _30626 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30626] = 26
                                            mem[_30626 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _23837 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23837] = 26
                                    mem[_23837 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _26861 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26861] = 0
                                    mem[_26861 + 32] = 0
                                    _26987 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26987] = arg1 * _initialSharesPerToken
                                    mem[_26987 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _30625 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30625] = 26
                                            mem[_30625 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _30961 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30961] = 26
                                            mem[_30961 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                else:
                    mem[mem[64] + 36] = 0 / totalLockedShares
                    require ext_code.size(stor3)
                    call stor3.0xa9059cbb with:
                         gas gas_remaining wei
                        args stor2, 0 / totalLockedShares
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        revert with 0, 
                                    32,
                                    47,
                                    0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                    mem[mem[64] + 115 len 17]
                    require ext_code.size(stor3)
                    staticcall stor3.balance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 32] = ext_call.return_data[0]
                    emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                    _22699 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22699] = 30
                    mem[_22699 + 32] = 'SafeMath: subtraction overflow'
                    if _lastAccountingTimestampSec > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _lastAccountingTimestampSec:
                        if _totalStakingShareSeconds < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _lastAccountingTimestampSec = block.timestamp
                        mem[0] = msg.sender
                        mem[32] = 12
                        _22941 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22941] = 30
                        mem[_22941 + 32] = 'SafeMath: subtraction overflow'
                        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _25116 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25116] = 0
                                mem[_25116 + 32] = 0
                                _25280 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25280] = arg1 * _initialSharesPerToken
                                mem[_25280 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _28983 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28983] = 26
                                        mem[_28983 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _29307 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29307] = 26
                                        mem[_29307 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _24365 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24365] = 26
                                    mem[_24365 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _27427 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_27427] = 0
                                    mem[_27427 + 32] = 0
                                    _27589 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_27589] = arg1 * _initialSharesPerToken
                                    mem[_27589 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31263 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31263] = 26
                                            mem[_31263 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31497 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31497] = 26
                                            mem[_31497 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _24620 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24620] = 26
                                    mem[_24620 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _27770 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_27770] = 0
                                    mem[_27770 + 32] = 0
                                    _27972 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_27972] = arg1 * _initialSharesPerToken
                                    mem[_27972 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31496 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31496] = 26
                                            mem[_31496 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31685 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31685] = 26
                                            mem[_31685 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                        else:
                            require block.timestamp - _userTotals[address(msg.sender)].field_512
                            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _25415 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25415] = 0
                                mem[_25415 + 32] = 0
                                _25584 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25584] = arg1 * _initialSharesPerToken
                                mem[_25584 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _29305 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29305] = 26
                                        mem[_29305 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _29554 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29554] = 26
                                        mem[_29554 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _24618 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24618] = 26
                                    mem[_24618 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _27767 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_27767] = 0
                                    mem[_27767 + 32] = 0
                                    _27966 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_27966] = arg1 * _initialSharesPerToken
                                    mem[_27966 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31495 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31495] = 26
                                            mem[_31495 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31681 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31681] = 26
                                            mem[_31681 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _24848 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24848] = 26
                                    mem[_24848 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _28173 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28173] = 0
                                    mem[_28173 + 32] = 0
                                    _28384 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28384] = arg1 * _initialSharesPerToken
                                    mem[_28384 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31680 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31680] = 26
                                            mem[_31680 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31856 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31856] = 26
                                            mem[_31856 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                    else:
                        require block.timestamp - _lastAccountingTimestampSec
                        if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                        _lastAccountingTimestampSec = block.timestamp
                        mem[0] = msg.sender
                        mem[32] = 12
                        _22989 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22989] = 30
                        mem[_22989 + 32] = 'SafeMath: subtraction overflow'
                        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _25412 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25412] = 0
                                mem[_25412 + 32] = 0
                                _25575 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25575] = arg1 * _initialSharesPerToken
                                mem[_25575 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _29303 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29303] = 26
                                        mem[_29303 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _29549 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29549] = 26
                                        mem[_29549 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _24616 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24616] = 26
                                    mem[_24616 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _27762 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_27762] = 0
                                    mem[_27762 + 32] = 0
                                    _27960 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_27960] = arg1 * _initialSharesPerToken
                                    mem[_27960 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31494 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31494] = 26
                                            mem[_31494 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31676 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31676] = 26
                                            mem[_31676 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _24843 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24843] = 26
                                    mem[_24843 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _28171 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28171] = 0
                                    mem[_28171 + 32] = 0
                                    _28377 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28377] = arg1 * _initialSharesPerToken
                                    mem[_28377 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31675 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31675] = 26
                                            mem[_31675 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31848 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31848] = 26
                                            mem[_31848 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                        else:
                            require block.timestamp - _userTotals[address(msg.sender)].field_512
                            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _25741 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25741] = 0
                                mem[_25741 + 32] = 0
                                _25878 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25878] = arg1 * _initialSharesPerToken
                                mem[_25878 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _29547 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29547] = 26
                                        mem[_29547 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _29782 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29782] = 26
                                        mem[_29782 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _24841 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24841] = 26
                                    mem[_24841 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _28168 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28168] = 0
                                    mem[_28168 + 32] = 0
                                    _28371 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28371] = arg1 * _initialSharesPerToken
                                    mem[_28371 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31674 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31674] = 26
                                            mem[_31674 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31844 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31844] = 26
                                            mem[_31844 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _25097 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25097] = 26
                                    mem[_25097 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _28588 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28588] = 0
                                    mem[_28588 + 32] = 0
                                    _28779 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28779] = arg1 * _initialSharesPerToken
                                    mem[_28779 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31843 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31843] = 26
                                            mem[_31843 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _32057 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32057] = 26
                                            mem[_32057 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
        else:
            require ext_code.size(stor1)
            staticcall stor1.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not totalStakingShares:
                mem[64] = 160
                mem[96] = 26
                mem[128] = 'SafeMath: division by zero'
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if 0 / ext_call.return_data[0] <= 0:
                    revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[266 len 26]
                require ext_code.size(stor3)
                staticcall stor3.balance() with:
                        gas gas_remaining wei
                mem[160] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not totalLockedShares:
                    if ext_call.return_data[0] > 0:
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[275 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                    if _lastAccountingTimestampSec > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _lastAccountingTimestampSec:
                        if _totalStakingShareSeconds < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _lastAccountingTimestampSec
                        if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                    _lastAccountingTimestampSec = block.timestamp
                    if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                        if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _userTotals[address(msg.sender)].field_512
                        if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += 0 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[530 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[544],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _totalStakingShareSeconds <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require _totalStakingShareSeconds
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += 0 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[594 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[608],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                else:
                    idx = 0
                    while idx < unlockSchedules.length:
                        mem[0] = 14
                        if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                            idx = idx + 1
                            continue 
                        if block.timestamp >= unlockSchedules[idx].field_768:
                            _22200 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22200] = 30
                            mem[_22200 + 32] = 'SafeMath: subtraction overflow'
                            if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                                unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                                if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                                if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _22228 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_22228 + idx + 68] = mem[_22200 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_22228 + 68] = mem[_22228 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _22228 + -mem[64] + 100
                        _22199 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22199] = 30
                        mem[_22199 + 32] = 'SafeMath: subtraction overflow'
                        if unlockSchedules[idx].field_512 > block.timestamp:
                            _22225 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_22225 + idx + 68] = mem[_22199 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_22225 + 68] = mem[_22225 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _22225 + -mem[64] + 100
                        if not block.timestamp - unlockSchedules[idx].field_512:
                            _22388 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22388] = 26
                            mem[_22388 + 32] = 'SafeMath: division by zero'
                            if unlockSchedules[idx].field_1024 > 0:
                                require unlockSchedules[idx].field_1024
                                unlockSchedules[idx].field_512 = block.timestamp
                                if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                                if 0 / unlockSchedules[idx].field_1024 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _22408 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_22408 + idx + 68] = mem[_22388 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_22408 + 68] = mem[_22408 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _22408 + -mem[64] + 100
                        require block.timestamp - unlockSchedules[idx].field_512
                        if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _22407 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22407] = 26
                        mem[_22407 + 32] = 'SafeMath: division by zero'
                        if unlockSchedules[idx].field_1024 > 0:
                            require unlockSchedules[idx].field_1024
                            unlockSchedules[idx].field_512 = block.timestamp
                            if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _22469 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_22469 + idx + 68] = mem[_22407 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_22469 + 68] = mem[_22469 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _22469 + -mem[64] + 100
                    _22198 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22198] = 26
                    mem[_22198 + 32] = 'SafeMath: division by zero'
                    if totalLockedShares <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalLockedShares
                    _22325 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22325] = 30
                    mem[_22325 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > totalLockedShares:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / totalLockedShares <= 0:
                        _22493 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22493] = 30
                        mem[_22493 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22731 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22731] = 30
                            mem[_22731 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _23830 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23830] = 0
                                    mem[_23830 + 32] = 0
                                    _23967 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23967] = 0 / ext_call.return_data[0]
                                    mem[_23967 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27112 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27112] = 26
                                            mem[_27112 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _27380 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27380] = 26
                                            mem[_27380 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23383 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23383] = 26
                                        mem[_23383 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _25834 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_25834] = 0
                                        mem[_25834 + 32] = 0
                                        _26030 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26030] = 0 / ext_call.return_data[0]
                                        mem[_26030 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29641 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29641] = 26
                                                mem[_29641 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _29905 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29905] = 26
                                                mem[_29905 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23490 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23490] = 26
                                        mem[_23490 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26171 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26171] = 0
                                        mem[_26171 + 32] = 0
                                        _26336 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26336] = 0 / ext_call.return_data[0]
                                        mem[_26336 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29904 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29904] = 26
                                                mem[_29904 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30229 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30229] = 26
                                                mem[_30229 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _24075 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24075] = 0
                                    mem[_24075 + 32] = 0
                                    _24187 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24187] = 0 / ext_call.return_data[0]
                                    mem[_24187 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27378 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27378] = 26
                                            mem[_27378 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _27714 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27714] = 26
                                            mem[_27714 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23488 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23488] = 26
                                        mem[_23488 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26168 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26168] = 0
                                        mem[_26168 + 32] = 0
                                        _26330 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26330] = 0 / ext_call.return_data[0]
                                        mem[_26330 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29903 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29903] = 26
                                                mem[_29903 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30225 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30225] = 26
                                                mem[_30225 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23630 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23630] = 26
                                        mem[_23630 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26524 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26524] = 0
                                        mem[_26524 + 32] = 0
                                        _26664 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26664] = 0 / ext_call.return_data[0]
                                        mem[_26664 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30224 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30224] = 26
                                                mem[_30224 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30593 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30593] = 26
                                                mem[_30593 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22770 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22770] = 30
                            mem[_22770 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _24072 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24072] = 0
                                    mem[_24072 + 32] = 0
                                    _24178 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24178] = 0 / ext_call.return_data[0]
                                    mem[_24178 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27376 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27376] = 26
                                            mem[_27376 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _27709 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27709] = 26
                                            mem[_27709 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23486 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23486] = 26
                                        mem[_23486 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26163 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26163] = 0
                                        mem[_26163 + 32] = 0
                                        _26324 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26324] = 0 / ext_call.return_data[0]
                                        mem[_26324 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29902 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29902] = 26
                                                mem[_29902 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30220 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30220] = 26
                                                mem[_30220 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23625 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23625] = 26
                                        mem[_23625 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26522 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26522] = 0
                                        mem[_26522 + 32] = 0
                                        _26657 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26657] = 0 / ext_call.return_data[0]
                                        mem[_26657 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30219 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30219] = 26
                                                mem[_30219 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30585 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30585] = 26
                                                mem[_30585 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _24349 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24349] = 0
                                    mem[_24349 + 32] = 0
                                    _24429 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24429] = 0 / ext_call.return_data[0]
                                    mem[_24429 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27707 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27707] = 26
                                            mem[_27707 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _28118 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_28118] = 26
                                            mem[_28118 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23623 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23623] = 26
                                        mem[_23623 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26519 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26519] = 0
                                        mem[_26519 + 32] = 0
                                        _26651 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26651] = 0 / ext_call.return_data[0]
                                        mem[_26651 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30218 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30218] = 26
                                                mem[_30218 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30581 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30581] = 26
                                                mem[_30581 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23811 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23811] = 26
                                        mem[_23811 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26841 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26841] = 0
                                        mem[_26841 + 32] = 0
                                        _26964 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26964] = 0 / ext_call.return_data[0]
                                        mem[_26964 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30580 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30580] = 26
                                                mem[_30580 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30931 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30931] = 26
                                                mem[_30931 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                    else:
                        mem[mem[64] + 36] = 0 / totalLockedShares
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, 0 / totalLockedShares
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[mem[64] + 115 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                        _22694 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22694] = 30
                        mem[_22694 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22934 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22934] = 30
                            mem[_22934 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25084 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25084] = 0
                                    mem[_25084 + 32] = 0
                                    _25256 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25256] = 0 / ext_call.return_data[0]
                                    mem[_25256 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _28960 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_28960] = 26
                                            mem[_28960 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29289 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29289] = 26
                                            mem[_29289 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24355 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24355] = 26
                                        mem[_24355 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27398 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27398] = 0
                                        mem[_27398 + 32] = 0
                                        _27563 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27563] = 0 / ext_call.return_data[0]
                                        mem[_27563 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31248 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31248] = 26
                                                mem[_31248 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31485 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31485] = 26
                                                mem[_31485 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _24600 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24600] = 26
                                        mem[_24600 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27737 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27737] = 0
                                        mem[_27737 + 32] = 0
                                        _27936 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27936] = 0 / ext_call.return_data[0]
                                        mem[_27936 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31484 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31484] = 26
                                                mem[_31484 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31665 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31665] = 26
                                                mem[_31665 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25395 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25395] = 0
                                    mem[_25395 + 32] = 0
                                    _25545 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25545] = 0 / ext_call.return_data[0]
                                    mem[_25545 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29287 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29287] = 26
                                            mem[_29287 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29534 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29534] = 26
                                            mem[_29534 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24598 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24598] = 26
                                        mem[_24598 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27734 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27734] = 0
                                        mem[_27734 + 32] = 0
                                        _27930 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27930] = 0 / ext_call.return_data[0]
                                        mem[_27930 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31483 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31483] = 26
                                                mem[_31483 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31661 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31661] = 26
                                                mem[_31661 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _24816 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24816] = 26
                                        mem[_24816 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28143 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28143] = 0
                                        mem[_28143 + 32] = 0
                                        _28342 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28342] = 0 / ext_call.return_data[0]
                                        mem[_28342 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31660 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31660] = 26
                                                mem[_31660 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31829 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31829] = 26
                                                mem[_31829 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22981 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22981] = 30
                            mem[_22981 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25392 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25392] = 0
                                    mem[_25392 + 32] = 0
                                    _25536 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25536] = 0 / ext_call.return_data[0]
                                    mem[_25536 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29285 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29285] = 26
                                            mem[_29285 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29529 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29529] = 26
                                            mem[_29529 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24596 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24596] = 26
                                        mem[_24596 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27729 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27729] = 0
                                        mem[_27729 + 32] = 0
                                        _27924 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27924] = 0 / ext_call.return_data[0]
                                        mem[_27924 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31482 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31482] = 26
                                                mem[_31482 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31656 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31656] = 26
                                                mem[_31656 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _24811 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24811] = 26
                                        mem[_24811 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28141 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28141] = 0
                                        mem[_28141 + 32] = 0
                                        _28335 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28335] = 0 / ext_call.return_data[0]
                                        mem[_28335 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31655 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31655] = 26
                                                mem[_31655 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31821 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31821] = 26
                                                mem[_31821 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25729 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25729] = 0
                                    mem[_25729 + 32] = 0
                                    _25841 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25841] = 0 / ext_call.return_data[0]
                                    mem[_25841 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29527 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29527] = 26
                                            mem[_29527 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29757 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29757] = 26
                                            mem[_29757 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24809 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24809] = 26
                                        mem[_24809 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28138 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28138] = 0
                                        mem[_28138 + 32] = 0
                                        _28329 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28329] = 0 / ext_call.return_data[0]
                                        mem[_28329 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31654 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31654] = 26
                                                mem[_31654 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31817 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31817] = 26
                                                mem[_31817 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _25065 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_25065] = 26
                                        mem[_25065 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28562 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28562] = 0
                                        mem[_28562 + 32] = 0
                                        _28739 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28739] = 0 / ext_call.return_data[0]
                                        mem[_28739 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31816 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31816] = 26
                                                mem[_31816 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _32034 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32034] = 26
                                                mem[_32034 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
            else:
                require totalStakingShares
                if totalStakingShares * arg1 / totalStakingShares != arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                mem[64] = 160
                mem[96] = 26
                mem[128] = 'SafeMath: division by zero'
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if totalStakingShares * arg1 / ext_call.return_data[0] <= 0:
                    revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[266 len 26]
                require ext_code.size(stor3)
                staticcall stor3.balance() with:
                        gas gas_remaining wei
                mem[160] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not totalLockedShares:
                    if ext_call.return_data[0] > 0:
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[275 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                    if _lastAccountingTimestampSec > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _lastAccountingTimestampSec:
                        if _totalStakingShareSeconds < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _lastAccountingTimestampSec
                        if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                    _lastAccountingTimestampSec = block.timestamp
                    if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                        if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _userTotals[address(msg.sender)].field_512
                        if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[530 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[544],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _totalStakingShareSeconds <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require _totalStakingShareSeconds
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[594 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[608],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                else:
                    idx = 0
                    while idx < unlockSchedules.length:
                        mem[0] = 14
                        if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                            idx = idx + 1
                            continue 
                        if block.timestamp >= unlockSchedules[idx].field_768:
                            _22197 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22197] = 30
                            mem[_22197 + 32] = 'SafeMath: subtraction overflow'
                            if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                                unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                                if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                                if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _22219 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_22219 + idx + 68] = mem[_22197 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_22219 + 68] = mem[_22219 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _22219 + -mem[64] + 100
                        _22196 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22196] = 30
                        mem[_22196 + 32] = 'SafeMath: subtraction overflow'
                        if unlockSchedules[idx].field_512 > block.timestamp:
                            _22216 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_22216 + idx + 68] = mem[_22196 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_22216 + 68] = mem[_22216 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _22216 + -mem[64] + 100
                        if not block.timestamp - unlockSchedules[idx].field_512:
                            _22387 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22387] = 26
                            mem[_22387 + 32] = 'SafeMath: division by zero'
                            if unlockSchedules[idx].field_1024 > 0:
                                require unlockSchedules[idx].field_1024
                                unlockSchedules[idx].field_512 = block.timestamp
                                if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                                if 0 / unlockSchedules[idx].field_1024 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _22402 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_22402 + idx + 68] = mem[_22387 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_22402 + 68] = mem[_22402 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _22402 + -mem[64] + 100
                        require block.timestamp - unlockSchedules[idx].field_512
                        if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _22401 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22401] = 26
                        mem[_22401 + 32] = 'SafeMath: division by zero'
                        if unlockSchedules[idx].field_1024 > 0:
                            require unlockSchedules[idx].field_1024
                            unlockSchedules[idx].field_512 = block.timestamp
                            if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _22465 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_22465 + idx + 68] = mem[_22401 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_22465 + 68] = mem[_22465 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _22465 + -mem[64] + 100
                    _22195 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22195] = 26
                    mem[_22195 + 32] = 'SafeMath: division by zero'
                    if totalLockedShares <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalLockedShares
                    _22321 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22321] = 30
                    mem[_22321 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > totalLockedShares:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / totalLockedShares <= 0:
                        _22489 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22489] = 30
                        mem[_22489 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22725 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22725] = 30
                            mem[_22725 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _23804 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23804] = 0
                                    mem[_23804 + 32] = 0
                                    _23949 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23949] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_23949 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27088 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27088] = 26
                                            mem[_27088 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _27351 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27351] = 26
                                            mem[_27351 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23377 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23377] = 26
                                        mem[_23377 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _25797 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_25797] = 0
                                        mem[_25797 + 32] = 0
                                        _26009 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26009] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26009 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29624 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29624] = 26
                                                mem[_29624 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _29878 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29878] = 26
                                                mem[_29878 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23477 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23477] = 26
                                        mem[_23477 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26145 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26145] = 0
                                        mem[_26145 + 32] = 0
                                        _26301 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26301] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26301 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29877 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29877] = 26
                                                mem[_29877 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30186 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30186] = 26
                                                mem[_30186 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _24060 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24060] = 0
                                    mem[_24060 + 32] = 0
                                    _24154 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24154] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_24154 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27349 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27349] = 26
                                            mem[_27349 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _27681 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27681] = 26
                                            mem[_27681 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23475 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23475] = 26
                                        mem[_23475 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26142 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26142] = 0
                                        mem[_26142 + 32] = 0
                                        _26295 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26295] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26295 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29876 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29876] = 26
                                                mem[_29876 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30182 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30182] = 26
                                                mem[_30182 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23606 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23606] = 26
                                        mem[_23606 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26504 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26504] = 0
                                        mem[_26504 + 32] = 0
                                        _26630 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26630] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26630 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30181 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30181] = 26
                                                mem[_30181 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30548 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30548] = 26
                                                mem[_30548 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22765 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22765] = 30
                            mem[_22765 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _24057 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24057] = 0
                                    mem[_24057 + 32] = 0
                                    _24145 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24145] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_24145 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27347 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27347] = 26
                                            mem[_27347 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _27676 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27676] = 26
                                            mem[_27676 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23473 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23473] = 26
                                        mem[_23473 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26137 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26137] = 0
                                        mem[_26137 + 32] = 0
                                        _26289 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26289] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26289 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29875 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29875] = 26
                                                mem[_29875 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30177 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30177] = 26
                                                mem[_30177 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23601 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23601] = 26
                                        mem[_23601 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26502 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26502] = 0
                                        mem[_26502 + 32] = 0
                                        _26623 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26623] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26623 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30176 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30176] = 26
                                                mem[_30176 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30540 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30540] = 26
                                                mem[_30540 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _24339 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24339] = 0
                                    mem[_24339 + 32] = 0
                                    _24401 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24401] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_24401 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27674 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27674] = 26
                                            mem[_27674 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _28088 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_28088] = 26
                                            mem[_28088 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23599 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23599] = 26
                                        mem[_23599 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26499 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26499] = 0
                                        mem[_26499 + 32] = 0
                                        _26617 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26617] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26617 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30175 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30175] = 26
                                                mem[_30175 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30536 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30536] = 26
                                                mem[_30536 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23785 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23785] = 26
                                        mem[_23785 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26821 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26821] = 0
                                        mem[_26821 + 32] = 0
                                        _26941 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26941] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26941 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30535 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30535] = 26
                                                mem[_30535 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30901 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30901] = 26
                                                mem[_30901 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                    else:
                        mem[mem[64] + 36] = 0 / totalLockedShares
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, 0 / totalLockedShares
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[mem[64] + 115 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                        _22689 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22689] = 30
                        mem[_22689 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22927 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22927] = 30
                            mem[_22927 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25052 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25052] = 0
                                    mem[_25052 + 32] = 0
                                    _25232 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25232] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_25232 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _28937 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_28937] = 26
                                            mem[_28937 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29271 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29271] = 26
                                            mem[_29271 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24345 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24345] = 26
                                        mem[_24345 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27369 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27369] = 0
                                        mem[_27369 + 32] = 0
                                        _27537 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27537] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_27537 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31233 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31233] = 26
                                                mem[_31233 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31473 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31473] = 26
                                                mem[_31473 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _24580 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24580] = 26
                                        mem[_24580 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27704 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27704] = 0
                                        mem[_27704 + 32] = 0
                                        _27900 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27900] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_27900 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31472 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31472] = 26
                                                mem[_31472 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31645 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31645] = 26
                                                mem[_31645 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25375 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25375] = 0
                                    mem[_25375 + 32] = 0
                                    _25506 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25506] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_25506 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29269 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29269] = 26
                                            mem[_29269 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29514 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29514] = 26
                                            mem[_29514 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24578 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24578] = 26
                                        mem[_24578 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27701 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27701] = 0
                                        mem[_27701 + 32] = 0
                                        _27894 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27894] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_27894 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31471 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31471] = 26
                                                mem[_31471 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31641 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31641] = 26
                                                mem[_31641 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _24784 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24784] = 26
                                        mem[_24784 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28113 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28113] = 0
                                        mem[_28113 + 32] = 0
                                        _28300 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28300] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_28300 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31640 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31640] = 26
                                                mem[_31640 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31802 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31802] = 26
                                                mem[_31802 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22973 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22973] = 30
                            mem[_22973 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25372 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25372] = 0
                                    mem[_25372 + 32] = 0
                                    _25497 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25497] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_25497 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29267 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29267] = 26
                                            mem[_29267 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29509 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29509] = 26
                                            mem[_29509 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24576 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24576] = 26
                                        mem[_24576 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27696 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27696] = 0
                                        mem[_27696 + 32] = 0
                                        _27888 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27888] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_27888 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31470 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31470] = 26
                                                mem[_31470 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31636 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31636] = 26
                                                mem[_31636 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _24779 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24779] = 26
                                        mem[_24779 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28111 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28111] = 0
                                        mem[_28111 + 32] = 0
                                        _28293 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28293] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_28293 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31635 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31635] = 26
                                                mem[_31635 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31794 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31794] = 26
                                                mem[_31794 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25717 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25717] = 0
                                    mem[_25717 + 32] = 0
                                    _25804 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25804] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_25804 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29507 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29507] = 26
                                            mem[_29507 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29732 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29732] = 26
                                            mem[_29732 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24777 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24777] = 26
                                        mem[_24777 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28108 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28108] = 0
                                        mem[_28108 + 32] = 0
                                        _28287 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28287] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_28287 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31634 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31634] = 26
                                                mem[_31634 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31790 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31790] = 26
                                                mem[_31790 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _25033 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_25033] = 26
                                        mem[_25033 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28536 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28536] = 0
                                        mem[_28536 + 32] = 0
                                        _28699 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28699] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_28699 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31789 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31789] = 26
                                                mem[_31789 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _32011 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32011] = 26
                                                mem[_32011 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
    else:
        require ext_code.size(stor1)
        staticcall stor1.balance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] <= 0:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        74,
                        0x77546f6b656e4765797365723a20496e76616c69642073746174652e205374616b696e67207368617265732065786973742c20627574206e6f207374616b696e6720746f6b656e732064,
                        mem[238 len 22]
        if totalStakingShares <= 0:
            if not arg1:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            38,
                            0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c,
                            mem[202 len 26]
            require arg1
            if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if arg1 * _initialSharesPerToken <= 0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            38,
                            0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c,
                            mem[202 len 26]
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not totalLockedShares:
                if ext_call.return_data[0] > 0:
                    require ext_code.size(stor3)
                    call stor3.0xa9059cbb with:
                         gas gas_remaining wei
                        args stor2, ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    47,
                                    0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                    mem[211 len 17]
                    require ext_code.size(stor3)
                    staticcall stor3.balance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                if _lastAccountingTimestampSec > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.timestamp - _lastAccountingTimestampSec:
                    if _totalStakingShareSeconds < _totalStakingShareSeconds:
                        revert with 0, 'SafeMath: addition overflow'
                else:
                    require block.timestamp - _lastAccountingTimestampSec
                    if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                        revert with 0, 'SafeMath: addition overflow'
                    _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                _lastAccountingTimestampSec = block.timestamp
                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                else:
                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                _userTotals[address(msg.sender)].field_512 = block.timestamp
                if _totalStakingShareSeconds <= 0:
                    require ext_code.size(stor3)
                    staticcall stor3.balance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor2)
                    staticcall stor2.balance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    _userStakes[address(msg.sender)].field_0++
                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalStakingShares += arg1 * _initialSharesPerToken
                    require ext_code.size(stor1)
                    staticcall stor1.0xfc0c546a with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    call address(ext_call.return_data[0]).0x23b872dd with:
                         gas gas_remaining wei
                        args msg.sender, stor1, arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        revert with 0, 
                                    32,
                                    46,
                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                    mem[466 len 18]
                    if totalStakingShares <= 0:
                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                    arg1,
                                    0,
                                    96,
                                    0,
                                    mem[480],
                                    msg.sender,
                    else:
                        require ext_code.size(stor1)
                        staticcall stor1.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if totalStakingShares <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalStakingShares
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0 / totalStakingShares,
                                        96,
                                        0,
                                        mem[544],
                                        msg.sender,
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if totalStakingShares <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalStakingShares
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                        96,
                                        0,
                                        mem[544],
                                        msg.sender,
                else:
                    require ext_code.size(stor2)
                    staticcall stor2.balance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0]:
                        require ext_call.return_data[0]
                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    if _totalStakingShareSeconds <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require _totalStakingShareSeconds
                    require ext_code.size(stor3)
                    staticcall stor3.balance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor2)
                    staticcall stor2.balance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    _userStakes[address(msg.sender)].field_0++
                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalStakingShares += arg1 * _initialSharesPerToken
                    require ext_code.size(stor1)
                    staticcall stor1.0xfc0c546a with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    call address(ext_call.return_data[0]).0x23b872dd with:
                         gas gas_remaining wei
                        args msg.sender, stor1, arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        revert with 0, 
                                    32,
                                    46,
                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                    mem[530 len 18]
                    if totalStakingShares <= 0:
                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                    arg1,
                                    0,
                                    96,
                                    0,
                                    mem[544],
                                    msg.sender,
                    else:
                        require ext_code.size(stor1)
                        staticcall stor1.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if totalStakingShares <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalStakingShares
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0 / totalStakingShares,
                                        96,
                                        0,
                                        mem[608],
                                        msg.sender,
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if totalStakingShares <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalStakingShares
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                        96,
                                        0,
                                        mem[608],
                                        msg.sender,
            else:
                idx = 0
                while idx < unlockSchedules.length:
                    mem[0] = 14
                    if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                        idx = idx + 1
                        continue 
                    if block.timestamp >= unlockSchedules[idx].field_768:
                        _22212 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22212] = 30
                        mem[_22212 + 32] = 'SafeMath: subtraction overflow'
                        if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                            unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                            if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                            if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _22264 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_22264 + idx + 68] = mem[_22212 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_22264 + 68] = mem[_22264 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _22264 + -mem[64] + 100
                    _22211 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22211] = 30
                    mem[_22211 + 32] = 'SafeMath: subtraction overflow'
                    if unlockSchedules[idx].field_512 > block.timestamp:
                        _22261 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_22261 + idx + 68] = mem[_22211 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_22261 + 68] = mem[_22261 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _22261 + -mem[64] + 100
                    if not block.timestamp - unlockSchedules[idx].field_512:
                        _22392 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22392] = 26
                        mem[_22392 + 32] = 'SafeMath: division by zero'
                        if unlockSchedules[idx].field_1024 > 0:
                            require unlockSchedules[idx].field_1024
                            unlockSchedules[idx].field_512 = block.timestamp
                            if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                            if 0 / unlockSchedules[idx].field_1024 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _22432 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_22432 + idx + 68] = mem[_22392 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_22432 + 68] = mem[_22432 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _22432 + -mem[64] + 100
                    require block.timestamp - unlockSchedules[idx].field_512
                    if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _22431 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22431] = 26
                    mem[_22431 + 32] = 'SafeMath: division by zero'
                    if unlockSchedules[idx].field_1024 > 0:
                        require unlockSchedules[idx].field_1024
                        unlockSchedules[idx].field_512 = block.timestamp
                        if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                        unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                        if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        continue 
                    _22485 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_22485 + idx + 68] = mem[_22431 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_22485 + 68] = mem[_22485 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _22485 + -mem[64] + 100
                _22210 = mem[64]
                mem[64] = mem[64] + 64
                mem[_22210] = 26
                mem[_22210 + 32] = 'SafeMath: division by zero'
                if totalLockedShares <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require totalLockedShares
                _22341 = mem[64]
                mem[64] = mem[64] + 64
                mem[_22341] = 30
                mem[_22341 + 32] = 'SafeMath: subtraction overflow'
                if 0 > totalLockedShares:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 / totalLockedShares <= 0:
                    _22509 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22509] = 30
                    mem[_22509 + 32] = 'SafeMath: subtraction overflow'
                    if _lastAccountingTimestampSec > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _lastAccountingTimestampSec:
                        if _totalStakingShareSeconds < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _lastAccountingTimestampSec = block.timestamp
                        mem[0] = msg.sender
                        mem[32] = 12
                        _22755 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22755] = 30
                        mem[_22755 + 32] = 'SafeMath: subtraction overflow'
                        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _23934 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_23934] = 0
                                mem[_23934 + 32] = 0
                                _24039 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24039] = arg1 * _initialSharesPerToken
                                mem[_24039 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _27208 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27208] = 26
                                        mem[_27208 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _27496 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27496] = 26
                                        mem[_27496 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _23407 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23407] = 26
                                    mem[_23407 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25982 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25982] = 0
                                    mem[_25982 + 32] = 0
                                    _26114 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26114] = arg1 * _initialSharesPerToken
                                    mem[_26114 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29709 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29709] = 26
                                            mem[_29709 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _30013 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30013] = 26
                                            mem[_30013 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _23542 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23542] = 26
                                    mem[_23542 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _26275 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26275] = 0
                                    mem[_26275 + 32] = 0
                                    _26476 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26476] = arg1 * _initialSharesPerToken
                                    mem[_26476 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _30012 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30012] = 26
                                            mem[_30012 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _30401 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30401] = 26
                                            mem[_30401 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                        else:
                            require block.timestamp - _userTotals[address(msg.sender)].field_512
                            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _24135 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24135] = 0
                                mem[_24135 + 32] = 0
                                _24319 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24319] = arg1 * _initialSharesPerToken
                                mem[_24319 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _27494 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27494] = 26
                                        mem[_27494 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _27846 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27846] = 26
                                        mem[_27846 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _23540 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23540] = 26
                                    mem[_23540 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _26272 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26272] = 0
                                    mem[_26272 + 32] = 0
                                    _26470 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26470] = arg1 * _initialSharesPerToken
                                    mem[_26470 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _30011 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30011] = 26
                                            mem[_30011 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _30397 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30397] = 26
                                            mem[_30397 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _23726 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23726] = 26
                                    mem[_23726 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _26604 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26604] = 0
                                    mem[_26604 + 32] = 0
                                    _26800 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26800] = arg1 * _initialSharesPerToken
                                    mem[_26800 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _30396 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30396] = 26
                                            mem[_30396 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _30773 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30773] = 26
                                            mem[_30773 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                    else:
                        require block.timestamp - _lastAccountingTimestampSec
                        if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                        _lastAccountingTimestampSec = block.timestamp
                        mem[0] = msg.sender
                        mem[32] = 12
                        _22790 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22790] = 30
                        mem[_22790 + 32] = 'SafeMath: subtraction overflow'
                        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _24132 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24132] = 0
                                mem[_24132 + 32] = 0
                                _24310 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24310] = arg1 * _initialSharesPerToken
                                mem[_24310 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _27492 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27492] = 26
                                        mem[_27492 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _27841 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27841] = 26
                                        mem[_27841 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _23538 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23538] = 26
                                    mem[_23538 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _26267 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26267] = 0
                                    mem[_26267 + 32] = 0
                                    _26464 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26464] = arg1 * _initialSharesPerToken
                                    mem[_26464 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _30010 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30010] = 26
                                            mem[_30010 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _30392 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30392] = 26
                                            mem[_30392 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _23721 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23721] = 26
                                    mem[_23721 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _26602 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26602] = 0
                                    mem[_26602 + 32] = 0
                                    _26793 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26793] = arg1 * _initialSharesPerToken
                                    mem[_26793 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _30391 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30391] = 26
                                            mem[_30391 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _30765 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30765] = 26
                                            mem[_30765 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                        else:
                            require block.timestamp - _userTotals[address(msg.sender)].field_512
                            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _24389 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24389] = 0
                                mem[_24389 + 32] = 0
                                _24541 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24541] = arg1 * _initialSharesPerToken
                                mem[_24541 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _27839 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27839] = 26
                                        mem[_27839 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _28238 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28238] = 26
                                        mem[_28238 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _23719 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23719] = 26
                                    mem[_23719 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _26599 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26599] = 0
                                    mem[_26599 + 32] = 0
                                    _26787 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26787] = arg1 * _initialSharesPerToken
                                    mem[_26787 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _30390 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30390] = 26
                                            mem[_30390 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _30761 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30761] = 26
                                            mem[_30761 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _23915 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23915] = 26
                                    mem[_23915 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _26921 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_26921] = 0
                                    mem[_26921 + 32] = 0
                                    _27056 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_27056] = arg1 * _initialSharesPerToken
                                    mem[_27056 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _30760 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_30760] = 26
                                            mem[_30760 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31051 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31051] = 26
                                            mem[_31051 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                else:
                    mem[mem[64] + 36] = 0 / totalLockedShares
                    require ext_code.size(stor3)
                    call stor3.0xa9059cbb with:
                         gas gas_remaining wei
                        args stor2, 0 / totalLockedShares
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        revert with 0, 
                                    32,
                                    47,
                                    0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                    mem[mem[64] + 115 len 17]
                    require ext_code.size(stor3)
                    staticcall stor3.balance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 32] = ext_call.return_data[0]
                    emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                    _22714 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22714] = 30
                    mem[_22714 + 32] = 'SafeMath: subtraction overflow'
                    if _lastAccountingTimestampSec > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _lastAccountingTimestampSec:
                        if _totalStakingShareSeconds < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _lastAccountingTimestampSec = block.timestamp
                        mem[0] = msg.sender
                        mem[32] = 12
                        _22962 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22962] = 30
                        mem[_22962 + 32] = 'SafeMath: subtraction overflow'
                        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _25212 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25212] = 0
                                mem[_25212 + 32] = 0
                                _25352 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25352] = arg1 * _initialSharesPerToken
                                mem[_25352 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _29052 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29052] = 26
                                        mem[_29052 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _29361 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29361] = 26
                                        mem[_29361 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _24395 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24395] = 26
                                    mem[_24395 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _27514 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_27514] = 0
                                    mem[_27514 + 32] = 0
                                    _27667 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_27667] = arg1 * _initialSharesPerToken
                                    mem[_27667 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31308 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31308] = 26
                                            mem[_31308 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31533 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31533] = 26
                                            mem[_31533 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _24680 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24680] = 26
                                    mem[_24680 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _27869 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_27869] = 0
                                    mem[_27869 + 32] = 0
                                    _28080 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28080] = arg1 * _initialSharesPerToken
                                    mem[_28080 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31532 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31532] = 26
                                            mem[_31532 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31745 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31745] = 26
                                            mem[_31745 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                        else:
                            require block.timestamp - _userTotals[address(msg.sender)].field_512
                            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _25475 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25475] = 0
                                mem[_25475 + 32] = 0
                                _25701 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25701] = arg1 * _initialSharesPerToken
                                mem[_25701 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _29359 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29359] = 26
                                        mem[_29359 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _29614 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29614] = 26
                                        mem[_29614 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _24678 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24678] = 26
                                    mem[_24678 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _27866 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_27866] = 0
                                    mem[_27866 + 32] = 0
                                    _28074 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28074] = arg1 * _initialSharesPerToken
                                    mem[_28074 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31531 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31531] = 26
                                            mem[_31531 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31741 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31741] = 26
                                            mem[_31741 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _24944 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24944] = 26
                                    mem[_24944 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _28263 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28263] = 0
                                    mem[_28263 + 32] = 0
                                    _28510 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28510] = arg1 * _initialSharesPerToken
                                    mem[_28510 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31740 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31740] = 26
                                            mem[_31740 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31937 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31937] = 26
                                            mem[_31937 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                    else:
                        require block.timestamp - _lastAccountingTimestampSec
                        if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                        _lastAccountingTimestampSec = block.timestamp
                        mem[0] = msg.sender
                        mem[32] = 12
                        _23013 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_23013] = 30
                        mem[_23013 + 32] = 'SafeMath: subtraction overflow'
                        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _25472 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25472] = 0
                                mem[_25472 + 32] = 0
                                _25692 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25692] = arg1 * _initialSharesPerToken
                                mem[_25692 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _29357 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29357] = 26
                                        mem[_29357 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _29609 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29609] = 26
                                        mem[_29609 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _24676 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24676] = 26
                                    mem[_24676 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _27861 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_27861] = 0
                                    mem[_27861 + 32] = 0
                                    _28068 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28068] = arg1 * _initialSharesPerToken
                                    mem[_28068 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31530 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31530] = 26
                                            mem[_31530 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31736 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31736] = 26
                                            mem[_31736 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _24939 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24939] = 26
                                    mem[_24939 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _28261 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28261] = 0
                                    mem[_28261 + 32] = 0
                                    _28503 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28503] = arg1 * _initialSharesPerToken
                                    mem[_28503 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31735 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31735] = 26
                                            mem[_31735 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31929 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31929] = 26
                                            mem[_31929 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                        else:
                            require block.timestamp - _userTotals[address(msg.sender)].field_512
                            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            if _totalStakingShareSeconds <= 0:
                                require ext_code.size(stor3)
                                staticcall stor3.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[0] = msg.sender
                                mem[32] = 12
                                if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                _25777 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25777] = 0
                                mem[_25777 + 32] = 0
                                _25989 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25989] = arg1 * _initialSharesPerToken
                                mem[_25989 + 32] = block.timestamp
                                mem[32] = 13
                                _userStakes[address(msg.sender)].field_0++
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalStakingShares += arg1 * _initialSharesPerToken
                                require ext_code.size(stor1)
                                staticcall stor1.0xfc0c546a with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, stor1, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                46,
                                                0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                mem[mem[64] + 114 len 18]
                                if totalStakingShares <= 0:
                                    mem[mem[64] + 64] = 96
                                    mem[mem[64] + 96] = 0
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0,
                                                96,
                                                0,
                                                mem[mem[64] + 128],
                                                msg.sender,
                                else:
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    require ext_code.size(stor1)
                                    staticcall stor1.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _29607 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29607] = 26
                                        mem[_29607 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _29857 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_29857] = 26
                                        mem[_29857 + 32] = 'SafeMath: division by zero'
                                        if totalStakingShares <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalStakingShares
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                            else:
                                require ext_code.size(stor2)
                                staticcall stor2.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    _24937 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24937] = 26
                                    mem[_24937 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _28258 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28258] = 0
                                    mem[_28258 + 32] = 0
                                    _28497 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28497] = arg1 * _initialSharesPerToken
                                    mem[_28497 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31734 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31734] = 26
                                            mem[_31734 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _31925 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31925] = 26
                                            mem[_31925 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _25193 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25193] = 26
                                    mem[_25193 + 32] = 'SafeMath: division by zero'
                                    if _totalStakingShareSeconds <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require _totalStakingShareSeconds
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (arg1 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += arg1 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _28666 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28666] = 0
                                    mem[_28666 + 32] = 0
                                    _28899 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28899] = arg1 * _initialSharesPerToken
                                    mem[_28899 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = arg1 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (arg1 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += arg1 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _31924 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_31924] = 26
                                            mem[_31924 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _32126 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32126] = 26
                                            mem[_32126 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
        else:
            require ext_code.size(stor1)
            staticcall stor1.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not totalStakingShares:
                mem[64] = 160
                mem[96] = 26
                mem[128] = 'SafeMath: division by zero'
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if 0 / ext_call.return_data[0] <= 0:
                    revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[266 len 26]
                require ext_code.size(stor3)
                staticcall stor3.balance() with:
                        gas gas_remaining wei
                mem[160] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not totalLockedShares:
                    if ext_call.return_data[0] > 0:
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[275 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                    if _lastAccountingTimestampSec > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _lastAccountingTimestampSec:
                        if _totalStakingShareSeconds < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _lastAccountingTimestampSec
                        if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                    _lastAccountingTimestampSec = block.timestamp
                    if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                        if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _userTotals[address(msg.sender)].field_512
                        if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += 0 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[530 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[544],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _totalStakingShareSeconds <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require _totalStakingShareSeconds
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += 0 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[594 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[608],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                else:
                    idx = 0
                    while idx < unlockSchedules.length:
                        mem[0] = 14
                        if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                            idx = idx + 1
                            continue 
                        if block.timestamp >= unlockSchedules[idx].field_768:
                            _22209 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22209] = 30
                            mem[_22209 + 32] = 'SafeMath: subtraction overflow'
                            if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                                unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                                if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                                if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _22255 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_22255 + idx + 68] = mem[_22209 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_22255 + 68] = mem[_22255 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _22255 + -mem[64] + 100
                        _22208 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22208] = 30
                        mem[_22208 + 32] = 'SafeMath: subtraction overflow'
                        if unlockSchedules[idx].field_512 > block.timestamp:
                            _22252 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_22252 + idx + 68] = mem[_22208 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_22252 + 68] = mem[_22252 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _22252 + -mem[64] + 100
                        if not block.timestamp - unlockSchedules[idx].field_512:
                            _22391 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22391] = 26
                            mem[_22391 + 32] = 'SafeMath: division by zero'
                            if unlockSchedules[idx].field_1024 > 0:
                                require unlockSchedules[idx].field_1024
                                unlockSchedules[idx].field_512 = block.timestamp
                                if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                                if 0 / unlockSchedules[idx].field_1024 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _22426 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_22426 + idx + 68] = mem[_22391 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_22426 + 68] = mem[_22426 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _22426 + -mem[64] + 100
                        require block.timestamp - unlockSchedules[idx].field_512
                        if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _22425 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22425] = 26
                        mem[_22425 + 32] = 'SafeMath: division by zero'
                        if unlockSchedules[idx].field_1024 > 0:
                            require unlockSchedules[idx].field_1024
                            unlockSchedules[idx].field_512 = block.timestamp
                            if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _22481 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_22481 + idx + 68] = mem[_22425 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_22481 + 68] = mem[_22481 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _22481 + -mem[64] + 100
                    _22207 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22207] = 26
                    mem[_22207 + 32] = 'SafeMath: division by zero'
                    if totalLockedShares <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalLockedShares
                    _22337 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22337] = 30
                    mem[_22337 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > totalLockedShares:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / totalLockedShares <= 0:
                        _22505 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22505] = 30
                        mem[_22505 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22749 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22749] = 30
                            mem[_22749 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _23908 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23908] = 0
                                    mem[_23908 + 32] = 0
                                    _24021 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24021] = 0 / ext_call.return_data[0]
                                    mem[_24021 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27184 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27184] = 26
                                            mem[_27184 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _27467 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27467] = 26
                                            mem[_27467 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23401 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23401] = 26
                                        mem[_23401 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _25945 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_25945] = 0
                                        mem[_25945 + 32] = 0
                                        _26093 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26093] = 0 / ext_call.return_data[0]
                                        mem[_26093 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29692 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29692] = 26
                                                mem[_29692 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _29986 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29986] = 26
                                                mem[_29986 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23529 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23529] = 26
                                        mem[_23529 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26249 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26249] = 0
                                        mem[_26249 + 32] = 0
                                        _26441 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26441] = 0 / ext_call.return_data[0]
                                        mem[_26441 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29985 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29985] = 26
                                                mem[_29985 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30358 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30358] = 26
                                                mem[_30358 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _24120 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24120] = 0
                                    mem[_24120 + 32] = 0
                                    _24286 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24286] = 0 / ext_call.return_data[0]
                                    mem[_24286 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27465 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27465] = 26
                                            mem[_27465 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _27813 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27813] = 26
                                            mem[_27813 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23527 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23527] = 26
                                        mem[_23527 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26246 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26246] = 0
                                        mem[_26246 + 32] = 0
                                        _26435 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26435] = 0 / ext_call.return_data[0]
                                        mem[_26435 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29984 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29984] = 26
                                                mem[_29984 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30354 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30354] = 26
                                                mem[_30354 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23702 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23702] = 26
                                        mem[_23702 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26584 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26584] = 0
                                        mem[_26584 + 32] = 0
                                        _26766 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26766] = 0 / ext_call.return_data[0]
                                        mem[_26766 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30353 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30353] = 26
                                                mem[_30353 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30728 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30728] = 26
                                                mem[_30728 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22785 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22785] = 30
                            mem[_22785 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _24117 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24117] = 0
                                    mem[_24117 + 32] = 0
                                    _24277 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24277] = 0 / ext_call.return_data[0]
                                    mem[_24277 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27463 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27463] = 26
                                            mem[_27463 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _27808 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27808] = 26
                                            mem[_27808 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23525 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23525] = 26
                                        mem[_23525 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26241 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26241] = 0
                                        mem[_26241 + 32] = 0
                                        _26429 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26429] = 0 / ext_call.return_data[0]
                                        mem[_26429 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29983 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29983] = 26
                                                mem[_29983 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30349 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30349] = 26
                                                mem[_30349 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23697 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23697] = 26
                                        mem[_23697 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26582 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26582] = 0
                                        mem[_26582 + 32] = 0
                                        _26759 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26759] = 0 / ext_call.return_data[0]
                                        mem[_26759 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30348 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30348] = 26
                                                mem[_30348 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30720 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30720] = 26
                                                mem[_30720 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _24379 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24379] = 0
                                    mem[_24379 + 32] = 0
                                    _24513 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24513] = 0 / ext_call.return_data[0]
                                    mem[_24513 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27806 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27806] = 26
                                            mem[_27806 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _28208 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_28208] = 26
                                            mem[_28208 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23695 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23695] = 26
                                        mem[_23695 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26579 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26579] = 0
                                        mem[_26579 + 32] = 0
                                        _26753 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26753] = 0 / ext_call.return_data[0]
                                        mem[_26753 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30347 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30347] = 26
                                                mem[_30347 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30716 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30716] = 26
                                                mem[_30716 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23889 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23889] = 26
                                        mem[_23889 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26901 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26901] = 0
                                        mem[_26901 + 32] = 0
                                        _27033 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27033] = 0 / ext_call.return_data[0]
                                        mem[_27033 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30715 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30715] = 26
                                                mem[_30715 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31021 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31021] = 26
                                                mem[_31021 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                    else:
                        mem[mem[64] + 36] = 0 / totalLockedShares
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, 0 / totalLockedShares
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[mem[64] + 115 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                        _22709 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22709] = 30
                        mem[_22709 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22955 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22955] = 30
                            mem[_22955 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25180 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25180] = 0
                                    mem[_25180 + 32] = 0
                                    _25328 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25328] = 0 / ext_call.return_data[0]
                                    mem[_25328 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29029 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29029] = 26
                                            mem[_29029 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29343 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29343] = 26
                                            mem[_29343 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24385 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24385] = 26
                                        mem[_24385 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27485 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27485] = 0
                                        mem[_27485 + 32] = 0
                                        _27641 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27641] = 0 / ext_call.return_data[0]
                                        mem[_27641 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31293 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31293] = 26
                                                mem[_31293 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31521 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31521] = 26
                                                mem[_31521 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _24660 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24660] = 26
                                        mem[_24660 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27836 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27836] = 0
                                        mem[_27836 + 32] = 0
                                        _28044 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28044] = 0 / ext_call.return_data[0]
                                        mem[_28044 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31520 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31520] = 26
                                                mem[_31520 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31725 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31725] = 26
                                                mem[_31725 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25455 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25455] = 0
                                    mem[_25455 + 32] = 0
                                    _25662 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25662] = 0 / ext_call.return_data[0]
                                    mem[_25662 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29341 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29341] = 26
                                            mem[_29341 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29594 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29594] = 26
                                            mem[_29594 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24658 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24658] = 26
                                        mem[_24658 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27833 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27833] = 0
                                        mem[_27833 + 32] = 0
                                        _28038 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28038] = 0 / ext_call.return_data[0]
                                        mem[_28038 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31519 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31519] = 26
                                                mem[_31519 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31721 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31721] = 26
                                                mem[_31721 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _24912 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24912] = 26
                                        mem[_24912 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28233 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28233] = 0
                                        mem[_28233 + 32] = 0
                                        _28468 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28468] = 0 / ext_call.return_data[0]
                                        mem[_28468 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31720 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31720] = 26
                                                mem[_31720 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31910 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31910] = 26
                                                mem[_31910 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _23005 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_23005] = 30
                            mem[_23005 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25452 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25452] = 0
                                    mem[_25452 + 32] = 0
                                    _25653 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25653] = 0 / ext_call.return_data[0]
                                    mem[_25653 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29339 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29339] = 26
                                            mem[_29339 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29589 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29589] = 26
                                            mem[_29589 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24656 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24656] = 26
                                        mem[_24656 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27828 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27828] = 0
                                        mem[_27828 + 32] = 0
                                        _28032 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28032] = 0 / ext_call.return_data[0]
                                        mem[_28032 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31518 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31518] = 26
                                                mem[_31518 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31716 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31716] = 26
                                                mem[_31716 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _24907 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24907] = 26
                                        mem[_24907 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28231 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28231] = 0
                                        mem[_28231 + 32] = 0
                                        _28461 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28461] = 0 / ext_call.return_data[0]
                                        mem[_28461 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31715 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31715] = 26
                                                mem[_31715 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31902 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31902] = 26
                                                mem[_31902 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25765 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25765] = 0
                                    mem[_25765 + 32] = 0
                                    _25952 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25952] = 0 / ext_call.return_data[0]
                                    mem[_25952 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29587 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29587] = 26
                                            mem[_29587 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29832 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29832] = 26
                                            mem[_29832 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24905 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24905] = 26
                                        mem[_24905 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28228 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28228] = 0
                                        mem[_28228 + 32] = 0
                                        _28455 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28455] = 0 / ext_call.return_data[0]
                                        mem[_28455 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31714 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31714] = 26
                                                mem[_31714 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31898 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31898] = 26
                                                mem[_31898 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _25161 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_25161] = 26
                                        mem[_25161 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28640 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28640] = 0
                                        mem[_28640 + 32] = 0
                                        _28859 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28859] = 0 / ext_call.return_data[0]
                                        mem[_28859 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31897 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31897] = 26
                                                mem[_31897 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _32103 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32103] = 26
                                                mem[_32103 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
            else:
                require totalStakingShares
                if totalStakingShares * arg1 / totalStakingShares != arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                mem[64] = 160
                mem[96] = 26
                mem[128] = 'SafeMath: division by zero'
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if totalStakingShares * arg1 / ext_call.return_data[0] <= 0:
                    revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[266 len 26]
                require ext_code.size(stor3)
                staticcall stor3.balance() with:
                        gas gas_remaining wei
                mem[160] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not totalLockedShares:
                    if ext_call.return_data[0] > 0:
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[275 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                    if _lastAccountingTimestampSec > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _lastAccountingTimestampSec:
                        if _totalStakingShareSeconds < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _lastAccountingTimestampSec
                        if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                    _lastAccountingTimestampSec = block.timestamp
                    if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                        if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _userTotals[address(msg.sender)].field_512
                        if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[530 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[544],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _totalStakingShareSeconds <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require _totalStakingShareSeconds
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[594 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[608],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                else:
                    idx = 0
                    while idx < unlockSchedules.length:
                        mem[0] = 14
                        if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                            idx = idx + 1
                            continue 
                        if block.timestamp >= unlockSchedules[idx].field_768:
                            _22206 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22206] = 30
                            mem[_22206 + 32] = 'SafeMath: subtraction overflow'
                            if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                                unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                                if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                                if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _22246 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_22246 + idx + 68] = mem[_22206 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_22246 + 68] = mem[_22246 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _22246 + -mem[64] + 100
                        _22205 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22205] = 30
                        mem[_22205 + 32] = 'SafeMath: subtraction overflow'
                        if unlockSchedules[idx].field_512 > block.timestamp:
                            _22243 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_22243 + idx + 68] = mem[_22205 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_22243 + 68] = mem[_22243 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _22243 + -mem[64] + 100
                        if not block.timestamp - unlockSchedules[idx].field_512:
                            _22390 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22390] = 26
                            mem[_22390 + 32] = 'SafeMath: division by zero'
                            if unlockSchedules[idx].field_1024 > 0:
                                require unlockSchedules[idx].field_1024
                                unlockSchedules[idx].field_512 = block.timestamp
                                if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                                if 0 / unlockSchedules[idx].field_1024 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _22420 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_22420 + idx + 68] = mem[_22390 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_22420 + 68] = mem[_22420 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _22420 + -mem[64] + 100
                        require block.timestamp - unlockSchedules[idx].field_512
                        if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _22419 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22419] = 26
                        mem[_22419 + 32] = 'SafeMath: division by zero'
                        if unlockSchedules[idx].field_1024 > 0:
                            require unlockSchedules[idx].field_1024
                            unlockSchedules[idx].field_512 = block.timestamp
                            if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _22477 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_22477 + idx + 68] = mem[_22419 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_22477 + 68] = mem[_22477 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _22477 + -mem[64] + 100
                    _22204 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22204] = 26
                    mem[_22204 + 32] = 'SafeMath: division by zero'
                    if totalLockedShares <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalLockedShares
                    _22333 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_22333] = 30
                    mem[_22333 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > totalLockedShares:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / totalLockedShares <= 0:
                        _22501 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22501] = 30
                        mem[_22501 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22743 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22743] = 30
                            mem[_22743 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _23882 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23882] = 0
                                    mem[_23882 + 32] = 0
                                    _24003 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24003] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_24003 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27160 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27160] = 26
                                            mem[_27160 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _27438 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27438] = 26
                                            mem[_27438 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23395 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23395] = 26
                                        mem[_23395 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _25908 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_25908] = 0
                                        mem[_25908 + 32] = 0
                                        _26072 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26072] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26072 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29675 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29675] = 26
                                                mem[_29675 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _29959 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29959] = 26
                                                mem[_29959 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23516 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23516] = 26
                                        mem[_23516 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26223 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26223] = 0
                                        mem[_26223 + 32] = 0
                                        _26406 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26406] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26406 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29958 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29958] = 26
                                                mem[_29958 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30315 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30315] = 26
                                                mem[_30315 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _24105 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24105] = 0
                                    mem[_24105 + 32] = 0
                                    _24253 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24253] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_24253 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27436 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27436] = 26
                                            mem[_27436 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _27780 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27780] = 26
                                            mem[_27780 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23514 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23514] = 26
                                        mem[_23514 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26220 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26220] = 0
                                        mem[_26220 + 32] = 0
                                        _26400 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26400] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26400 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29957 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29957] = 26
                                                mem[_29957 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30311 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30311] = 26
                                                mem[_30311 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23678 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23678] = 26
                                        mem[_23678 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26564 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26564] = 0
                                        mem[_26564 + 32] = 0
                                        _26732 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26732] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26732 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30310 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30310] = 26
                                                mem[_30310 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30683 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30683] = 26
                                                mem[_30683 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22780 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22780] = 30
                            mem[_22780 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _24102 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24102] = 0
                                    mem[_24102 + 32] = 0
                                    _24244 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24244] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_24244 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27434 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27434] = 26
                                            mem[_27434 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _27775 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27775] = 26
                                            mem[_27775 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23512 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23512] = 26
                                        mem[_23512 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26215 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26215] = 0
                                        mem[_26215 + 32] = 0
                                        _26394 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26394] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26394 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _29956 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_29956] = 26
                                                mem[_29956 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30306 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30306] = 26
                                                mem[_30306 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23673 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23673] = 26
                                        mem[_23673 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26562 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26562] = 0
                                        mem[_26562 + 32] = 0
                                        _26725 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26725] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26725 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30305 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30305] = 26
                                                mem[_30305 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30675 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30675] = 26
                                                mem[_30675 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _24369 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24369] = 0
                                    mem[_24369 + 32] = 0
                                    _24485 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24485] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_24485 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _27773 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_27773] = 26
                                            mem[_27773 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _28178 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_28178] = 26
                                            mem[_28178 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _23671 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23671] = 26
                                        mem[_23671 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26559 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26559] = 0
                                        mem[_26559 + 32] = 0
                                        _26719 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26719] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_26719 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30304 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30304] = 26
                                                mem[_30304 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30671 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30671] = 26
                                                mem[_30671 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _23863 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23863] = 26
                                        mem[_23863 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _26881 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_26881] = 0
                                        mem[_26881 + 32] = 0
                                        _27010 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27010] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_27010 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _30670 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30670] = 26
                                                mem[_30670 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _30991 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_30991] = 26
                                                mem[_30991 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                    else:
                        mem[mem[64] + 36] = 0 / totalLockedShares
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, 0 / totalLockedShares
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[mem[64] + 115 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                        _22704 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_22704] = 30
                        mem[_22704 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22948 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22948] = 30
                            mem[_22948 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25148 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25148] = 0
                                    mem[_25148 + 32] = 0
                                    _25304 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25304] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_25304 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29006 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29006] = 26
                                            mem[_29006 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29325 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29325] = 26
                                            mem[_29325 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24375 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24375] = 26
                                        mem[_24375 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27456 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27456] = 0
                                        mem[_27456 + 32] = 0
                                        _27615 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27615] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_27615 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31278 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31278] = 26
                                                mem[_31278 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31509 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31509] = 26
                                                mem[_31509 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _24640 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24640] = 26
                                        mem[_24640 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27803 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27803] = 0
                                        mem[_27803 + 32] = 0
                                        _28008 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28008] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_28008 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31508 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31508] = 26
                                                mem[_31508 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31705 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31705] = 26
                                                mem[_31705 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25435 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25435] = 0
                                    mem[_25435 + 32] = 0
                                    _25623 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25623] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_25623 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29323 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29323] = 26
                                            mem[_29323 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29574 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29574] = 26
                                            mem[_29574 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24638 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24638] = 26
                                        mem[_24638 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27800 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27800] = 0
                                        mem[_27800 + 32] = 0
                                        _28002 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28002] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_28002 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31507 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31507] = 26
                                                mem[_31507 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31701 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31701] = 26
                                                mem[_31701 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _24880 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24880] = 26
                                        mem[_24880 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28203 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28203] = 0
                                        mem[_28203 + 32] = 0
                                        _28426 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28426] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_28426 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31700 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31700] = 26
                                                mem[_31700 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31883 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31883] = 26
                                                mem[_31883 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 12
                            _22997 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_22997] = 30
                            mem[_22997 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25432 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25432] = 0
                                    mem[_25432 + 32] = 0
                                    _25614 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25614] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_25614 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29321 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29321] = 26
                                            mem[_29321 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29569 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29569] = 26
                                            mem[_29569 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24636 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24636] = 26
                                        mem[_24636 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _27795 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27795] = 0
                                        mem[_27795 + 32] = 0
                                        _27996 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_27996] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_27996 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31506 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31506] = 26
                                                mem[_31506 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31696 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31696] = 26
                                                mem[_31696 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _24875 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24875] = 26
                                        mem[_24875 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28201 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28201] = 0
                                        mem[_28201 + 32] = 0
                                        _28419 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28419] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_28419 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31695 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31695] = 26
                                                mem[_31695 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31875 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31875] = 26
                                                mem[_31875 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 12
                                    if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _25753 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25753] = 0
                                    mem[_25753 + 32] = 0
                                    _25915 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_25915] = totalStakingShares * arg1 / ext_call.return_data[0]
                                    mem[_25915 + 32] = block.timestamp
                                    mem[32] = 13
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _29567 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29567] = 26
                                            mem[_29567 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _29807 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_29807] = 26
                                            mem[_29807 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _24873 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24873] = 26
                                        mem[_24873 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28198 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28198] = 0
                                        mem[_28198 + 32] = 0
                                        _28413 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28413] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_28413 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31694 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31694] = 26
                                                mem[_31694 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _31871 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31871] = 26
                                                mem[_31871 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _25129 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_25129] = 26
                                        mem[_25129 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 12
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * arg1 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _28614 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28614] = 0
                                        mem[_28614 + 32] = 0
                                        _28819 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28819] = totalStakingShares * arg1 / ext_call.return_data[0]
                                        mem[_28819 + 32] = block.timestamp
                                        mem[32] = 13
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * arg1 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * arg1 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * arg1 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 12
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _31870 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_31870] = 26
                                                mem[_31870 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _32080 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32080] = 26
                                                mem[_32080 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
}



}
